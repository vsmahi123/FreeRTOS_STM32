
FreeRTOS_Learn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08006ffc  08006ffc  00016ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800719c  0800719c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800719c  0800719c  0001719c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071a4  080071a4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071a4  080071a4  000171a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071a8  080071a8  000171a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080071ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0001449c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20014514  20014514  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015012  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030cf  00000000  00000000  000350ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  00038190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001210  00000000  00000000  00039538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000243fe  00000000  00000000  0003a748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b60  00000000  00000000  0005eb46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8f31  00000000  00000000  000746a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014d5d7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005850  00000000  00000000  0014d628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006fe4 	.word	0x08006fe4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006fe4 	.word	0x08006fe4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f2c 	.word	0x20012f2c

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fb93 	bl	8000c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f84f 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8b7 	bl	80006e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRl |= (1<<0); //for time keeping , to maintain time stamp information
 800057a:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <main+0x90>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a1e      	ldr	r2, [pc, #120]	; (80005f8 <main+0x90>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 8000586:	f004 fa75 	bl	8004a74 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800058a:	f005 fae3 	bl	8005b54 <SEGGER_SYSVIEW_Start>
  Task1_Status = xTaskCreate(Task1_Handler, "Task_1", 200, "Venk_Task1", 2, &Task1_hand);
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	2302      	movs	r3, #2
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	4b19      	ldr	r3, [pc, #100]	; (80005fc <main+0x94>)
 8000598:	22c8      	movs	r2, #200	; 0xc8
 800059a:	4919      	ldr	r1, [pc, #100]	; (8000600 <main+0x98>)
 800059c:	4819      	ldr	r0, [pc, #100]	; (8000604 <main+0x9c>)
 800059e:	f002 fbc7 	bl	8002d30 <xTaskCreate>
 80005a2:	6178      	str	r0, [r7, #20]
  configASSERT(Task1_Status == pdPASS);
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d00a      	beq.n	80005c0 <main+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ae:	f383 8811 	msr	BASEPRI, r3
 80005b2:	f3bf 8f6f 	isb	sy
 80005b6:	f3bf 8f4f 	dsb	sy
 80005ba:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005bc:	bf00      	nop
 80005be:	e7fe      	b.n	80005be <main+0x56>
  Task2_Status = xTaskCreate(Task2_Handler, "Task_2", 200, "Shubh_Task2", 2, &Task2_hand);
 80005c0:	463b      	mov	r3, r7
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	2302      	movs	r3, #2
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <main+0xa0>)
 80005ca:	22c8      	movs	r2, #200	; 0xc8
 80005cc:	490f      	ldr	r1, [pc, #60]	; (800060c <main+0xa4>)
 80005ce:	4810      	ldr	r0, [pc, #64]	; (8000610 <main+0xa8>)
 80005d0:	f002 fbae 	bl	8002d30 <xTaskCreate>
 80005d4:	6138      	str	r0, [r7, #16]
  configASSERT(Task2_Status == pdPASS);
 80005d6:	693b      	ldr	r3, [r7, #16]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d00a      	beq.n	80005f2 <main+0x8a>
        __asm volatile
 80005dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e0:	f383 8811 	msr	BASEPRI, r3
 80005e4:	f3bf 8f6f 	isb	sy
 80005e8:	f3bf 8f4f 	dsb	sy
 80005ec:	60bb      	str	r3, [r7, #8]
    }
 80005ee:	bf00      	nop
 80005f0:	e7fe      	b.n	80005f0 <main+0x88>
  vTaskStartScheduler();
 80005f2:	f002 fd01 	bl	8002ff8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f6:	e7fe      	b.n	80005f6 <main+0x8e>
 80005f8:	e0001000 	.word	0xe0001000
 80005fc:	08006ffc 	.word	0x08006ffc
 8000600:	08007008 	.word	0x08007008
 8000604:	080009a5 	.word	0x080009a5
 8000608:	08007010 	.word	0x08007010
 800060c:	0800701c 	.word	0x0800701c
 8000610:	080009b5 	.word	0x080009b5

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f005 ffdc 	bl	80065e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a27      	ldr	r2, [pc, #156]	; (80006e0 <SystemClock_Config+0xcc>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <SystemClock_Config+0xd0>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000670:	2302      	movs	r3, #2
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000674:	2301      	movs	r3, #1
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000678:	2310      	movs	r3, #16
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000684:	2308      	movs	r3, #8
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000688:	2332      	movs	r3, #50	; 0x32
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800068c:	2304      	movs	r3, #4
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000690:	2307      	movs	r3, #7
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fdd7 	bl	800124c <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a4:	f000 f9a0 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 f838 	bl	800173c <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006d2:	f000 f989 	bl	80009e8 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	; 0x30
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]
 8000702:	4ba2      	ldr	r3, [pc, #648]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4aa1      	ldr	r2, [pc, #644]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000708:	f043 0310 	orr.w	r3, r3, #16
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b9f      	ldr	r3, [pc, #636]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0310 	and.w	r3, r3, #16
 8000716:	61bb      	str	r3, [r7, #24]
 8000718:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	4b9b      	ldr	r3, [pc, #620]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a9a      	ldr	r2, [pc, #616]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b98      	ldr	r3, [pc, #608]	; (800098c <MX_GPIO_Init+0x2a4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	4b94      	ldr	r3, [pc, #592]	; (800098c <MX_GPIO_Init+0x2a4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a93      	ldr	r2, [pc, #588]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b91      	ldr	r3, [pc, #580]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	4b8d      	ldr	r3, [pc, #564]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a8c      	ldr	r2, [pc, #560]	; (800098c <MX_GPIO_Init+0x2a4>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b8a      	ldr	r3, [pc, #552]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b86      	ldr	r3, [pc, #536]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a85      	ldr	r2, [pc, #532]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b83      	ldr	r3, [pc, #524]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b7f      	ldr	r3, [pc, #508]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a7e      	ldr	r2, [pc, #504]	; (800098c <MX_GPIO_Init+0x2a4>)
 8000794:	f043 0308 	orr.w	r3, r3, #8
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b7c      	ldr	r3, [pc, #496]	; (800098c <MX_GPIO_Init+0x2a4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0308 	and.w	r3, r3, #8
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2108      	movs	r1, #8
 80007aa:	4879      	ldr	r0, [pc, #484]	; (8000990 <MX_GPIO_Init+0x2a8>)
 80007ac:	f000 fd34 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2101      	movs	r1, #1
 80007b4:	4877      	ldr	r0, [pc, #476]	; (8000994 <MX_GPIO_Init+0x2ac>)
 80007b6:	f000 fd2f 	bl	8001218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ba:	2200      	movs	r2, #0
 80007bc:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007c0:	4875      	ldr	r0, [pc, #468]	; (8000998 <MX_GPIO_Init+0x2b0>)
 80007c2:	f000 fd29 	bl	8001218 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007c6:	2308      	movs	r3, #8
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	486c      	ldr	r0, [pc, #432]	; (8000990 <MX_GPIO_Init+0x2a8>)
 80007de:	f000 fb7f 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	4866      	ldr	r0, [pc, #408]	; (8000994 <MX_GPIO_Init+0x2ac>)
 80007fa:	f000 fb71 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007fe:	2308      	movs	r3, #8
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800080e:	2305      	movs	r3, #5
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	485e      	ldr	r0, [pc, #376]	; (8000994 <MX_GPIO_Init+0x2ac>)
 800081a:	f000 fb61 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800081e:	2301      	movs	r3, #1
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000822:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	485a      	ldr	r0, [pc, #360]	; (800099c <MX_GPIO_Init+0x2b4>)
 8000834:	f000 fb54 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000838:	2310      	movs	r3, #16
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000848:	2306      	movs	r3, #6
 800084a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	4852      	ldr	r0, [pc, #328]	; (800099c <MX_GPIO_Init+0x2b4>)
 8000854:	f000 fb44 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000858:	23e0      	movs	r3, #224	; 0xe0
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000868:	2305      	movs	r3, #5
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	484a      	ldr	r0, [pc, #296]	; (800099c <MX_GPIO_Init+0x2b4>)
 8000874:	f000 fb34 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000878:	2304      	movs	r3, #4
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	4845      	ldr	r0, [pc, #276]	; (80009a0 <MX_GPIO_Init+0x2b8>)
 800088c:	f000 fb28 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000890:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a2:	2305      	movs	r3, #5
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	483c      	ldr	r0, [pc, #240]	; (80009a0 <MX_GPIO_Init+0x2b8>)
 80008ae:	f000 fb17 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008b2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008b6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4833      	ldr	r0, [pc, #204]	; (8000998 <MX_GPIO_Init+0x2b0>)
 80008cc:	f000 fb08 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008d0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e2:	2306      	movs	r3, #6
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4829      	ldr	r0, [pc, #164]	; (8000994 <MX_GPIO_Init+0x2ac>)
 80008ee:	f000 faf7 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80008f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4825      	ldr	r0, [pc, #148]	; (800099c <MX_GPIO_Init+0x2b4>)
 8000908:	f000 faea 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800090c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800091e:	230a      	movs	r3, #10
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	481c      	ldr	r0, [pc, #112]	; (800099c <MX_GPIO_Init+0x2b4>)
 800092a:	f000 fad9 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800092e:	2320      	movs	r3, #32
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4815      	ldr	r0, [pc, #84]	; (8000998 <MX_GPIO_Init+0x2b0>)
 8000942:	f000 facd 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000946:	f44f 7310 	mov.w	r3, #576	; 0x240
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800094c:	2312      	movs	r3, #18
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000958:	2304      	movs	r3, #4
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	480f      	ldr	r0, [pc, #60]	; (80009a0 <MX_GPIO_Init+0x2b8>)
 8000964:	f000 fabc 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000968:	2302      	movs	r3, #2
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800096c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4804      	ldr	r0, [pc, #16]	; (8000990 <MX_GPIO_Init+0x2a8>)
 800097e:	f000 faaf 	bl	8000ee0 <HAL_GPIO_Init>

}
 8000982:	bf00      	nop
 8000984:	3730      	adds	r7, #48	; 0x30
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	40021000 	.word	0x40021000
 8000994:	40020800 	.word	0x40020800
 8000998:	40020c00 	.word	0x40020c00
 800099c:	40020000 	.word	0x40020000
 80009a0:	40020400 	.word	0x40020400

080009a4 <Task1_Handler>:

/* USER CODE BEGIN 4 */
static void Task1_Handler(void* par)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n",(char*)par);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f005 fe8d 	bl	80066cc <puts>
 80009b2:	e7fb      	b.n	80009ac <Task1_Handler+0x8>

080009b4 <Task2_Handler>:
	}
}
static void Task2_Handler(void* par)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n",(char*)par);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f005 fe85 	bl	80066cc <puts>
 80009c2:	e7fb      	b.n	80009bc <Task2_Handler+0x8>

080009c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d101      	bne.n	80009da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009d6:	f000 f981 	bl	8000cdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40001000 	.word	0x40001000

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <Error_Handler+0x8>
	...

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */
	vInitPrioGroupValue();
 80009fa:	f003 fbeb 	bl	80041d4 <vInitPrioGroupValue>
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800

08000a44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08e      	sub	sp, #56	; 0x38
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	4b33      	ldr	r3, [pc, #204]	; (8000b28 <HAL_InitTick+0xe4>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5c:	4a32      	ldr	r2, [pc, #200]	; (8000b28 <HAL_InitTick+0xe4>)
 8000a5e:	f043 0310 	orr.w	r3, r3, #16
 8000a62:	6413      	str	r3, [r2, #64]	; 0x40
 8000a64:	4b30      	ldr	r3, [pc, #192]	; (8000b28 <HAL_InitTick+0xe4>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	f003 0310 	and.w	r3, r3, #16
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a70:	f107 0210 	add.w	r2, r7, #16
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 f86a 	bl	8001b54 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a80:	6a3b      	ldr	r3, [r7, #32]
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d103      	bne.n	8000a92 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a8a:	f001 f84f 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 8000a8e:	6378      	str	r0, [r7, #52]	; 0x34
 8000a90:	e004      	b.n	8000a9c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a92:	f001 f84b 	bl	8001b2c <HAL_RCC_GetPCLK1Freq>
 8000a96:	4603      	mov	r3, r0
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a9e:	4a23      	ldr	r2, [pc, #140]	; (8000b2c <HAL_InitTick+0xe8>)
 8000aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa4:	0c9b      	lsrs	r3, r3, #18
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <HAL_InitTick+0xec>)
 8000aac:	4a21      	ldr	r2, [pc, #132]	; (8000b34 <HAL_InitTick+0xf0>)
 8000aae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <HAL_InitTick+0xec>)
 8000ab2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	; (8000b30 <HAL_InitTick+0xec>)
 8000aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000abc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <HAL_InitTick+0xec>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <HAL_InitTick+0xec>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <HAL_InitTick+0xec>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ad0:	4817      	ldr	r0, [pc, #92]	; (8000b30 <HAL_InitTick+0xec>)
 8000ad2:	f001 f871 	bl	8001bb8 <HAL_TIM_Base_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000adc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d11b      	bne.n	8000b1c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ae4:	4812      	ldr	r0, [pc, #72]	; (8000b30 <HAL_InitTick+0xec>)
 8000ae6:	f001 f8c1 	bl	8001c6c <HAL_TIM_Base_Start_IT>
 8000aea:	4603      	mov	r3, r0
 8000aec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000af0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d111      	bne.n	8000b1c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000af8:	2036      	movs	r0, #54	; 0x36
 8000afa:	f000 f9e3 	bl	8000ec4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b0f      	cmp	r3, #15
 8000b02:	d808      	bhi.n	8000b16 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b04:	2200      	movs	r2, #0
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	2036      	movs	r0, #54	; 0x36
 8000b0a:	f000 f9bf 	bl	8000e8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <HAL_InitTick+0xf4>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	e002      	b.n	8000b1c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3738      	adds	r7, #56	; 0x38
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	431bde83 	.word	0x431bde83
 8000b30:	20000094 	.word	0x20000094
 8000b34:	40001000 	.word	0x40001000
 8000b38:	20000004 	.word	0x20000004

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <NMI_Handler+0x4>

08000b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <HardFault_Handler+0x4>

08000b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <MemManage_Handler+0x4>

08000b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <BusFault_Handler+0x4>

08000b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <UsageFault_Handler+0x4>

08000b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <TIM6_DAC_IRQHandler+0x10>)
 8000b6e:	f001 f8ed 	bl	8001d4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000094 	.word	0x20000094

08000b7c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	e00a      	b.n	8000ba4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b8e:	f3af 8000 	nop.w
 8000b92:	4601      	mov	r1, r0
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	1c5a      	adds	r2, r3, #1
 8000b98:	60ba      	str	r2, [r7, #8]
 8000b9a:	b2ca      	uxtb	r2, r1
 8000b9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	dbf0      	blt.n	8000b8e <_read+0x12>
	}

return len;
 8000bac:	687b      	ldr	r3, [r7, #4]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3718      	adds	r7, #24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
	return -1;
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bde:	605a      	str	r2, [r3, #4]
	return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <_isatty>:

int _isatty(int file)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	b083      	sub	sp, #12
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
	return 1;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <SystemInit+0x20>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <SystemInit+0x20>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c4a:	490e      	ldr	r1, [pc, #56]	; (8000c84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c4c:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c50:	e002      	b.n	8000c58 <LoopCopyDataInit>

08000c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c56:	3304      	adds	r3, #4

08000c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c5c:	d3f9      	bcc.n	8000c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c60:	4c0b      	ldr	r4, [pc, #44]	; (8000c90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c64:	e001      	b.n	8000c6a <LoopFillZerobss>

08000c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c68:	3204      	adds	r2, #4

08000c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c6c:	d3fb      	bcc.n	8000c66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c6e:	f7ff ffd7 	bl	8000c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c72:	f005 fc73 	bl	800655c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c76:	f7ff fc77 	bl	8000568 <main>
  bx  lr    
 8000c7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c84:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c88:	080071ac 	.word	0x080071ac
  ldr r2, =_sbss
 8000c8c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c90:	20014514 	.word	0x20014514

08000c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <HAL_Init+0x40>)
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_Init+0x40>)
 8000cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <HAL_Init+0x40>)
 8000cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f8d8 	bl	8000e76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff febc 	bl	8000a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fe92 	bl	80009f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023c00 	.word	0x40023c00

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	200000dc 	.word	0x200000dc

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	200000dc 	.word	0x200000dc

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	; (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ff4c 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9e:	f7ff ff61 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ea2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	68b9      	ldr	r1, [r7, #8]
 8000ea8:	6978      	ldr	r0, [r7, #20]
 8000eaa:	f7ff ffb1 	bl	8000e10 <NVIC_EncodePriority>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff80 	bl	8000dbc <__NVIC_SetPriority>
}
 8000ebc:	bf00      	nop
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff54 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
 8000efa:	e16b      	b.n	80011d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000efc:	2201      	movs	r2, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	f040 815a 	bne.w	80011ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d005      	beq.n	8000f32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d130      	bne.n	8000f94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	68da      	ldr	r2, [r3, #12]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	091b      	lsrs	r3, r3, #4
 8000f7e:	f003 0201 	and.w	r2, r3, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d017      	beq.n	8000fd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d123      	bne.n	8001024 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	08da      	lsrs	r2, r3, #3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3208      	adds	r2, #8
 8000fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	220f      	movs	r2, #15
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	691a      	ldr	r2, [r3, #16]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	08da      	lsrs	r2, r3, #3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3208      	adds	r2, #8
 800101e:	69b9      	ldr	r1, [r7, #24]
 8001020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0203 	and.w	r2, r3, #3
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 80b4 	beq.w	80011ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b60      	ldr	r3, [pc, #384]	; (80011ec <HAL_GPIO_Init+0x30c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	4a5f      	ldr	r2, [pc, #380]	; (80011ec <HAL_GPIO_Init+0x30c>)
 8001070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001074:	6453      	str	r3, [r2, #68]	; 0x44
 8001076:	4b5d      	ldr	r3, [pc, #372]	; (80011ec <HAL_GPIO_Init+0x30c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001082:	4a5b      	ldr	r2, [pc, #364]	; (80011f0 <HAL_GPIO_Init+0x310>)
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	220f      	movs	r2, #15
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a52      	ldr	r2, [pc, #328]	; (80011f4 <HAL_GPIO_Init+0x314>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d02b      	beq.n	8001106 <HAL_GPIO_Init+0x226>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a51      	ldr	r2, [pc, #324]	; (80011f8 <HAL_GPIO_Init+0x318>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d025      	beq.n	8001102 <HAL_GPIO_Init+0x222>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a50      	ldr	r2, [pc, #320]	; (80011fc <HAL_GPIO_Init+0x31c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d01f      	beq.n	80010fe <HAL_GPIO_Init+0x21e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4f      	ldr	r2, [pc, #316]	; (8001200 <HAL_GPIO_Init+0x320>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d019      	beq.n	80010fa <HAL_GPIO_Init+0x21a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4e      	ldr	r2, [pc, #312]	; (8001204 <HAL_GPIO_Init+0x324>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d013      	beq.n	80010f6 <HAL_GPIO_Init+0x216>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4d      	ldr	r2, [pc, #308]	; (8001208 <HAL_GPIO_Init+0x328>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d00d      	beq.n	80010f2 <HAL_GPIO_Init+0x212>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4c      	ldr	r2, [pc, #304]	; (800120c <HAL_GPIO_Init+0x32c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d007      	beq.n	80010ee <HAL_GPIO_Init+0x20e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4b      	ldr	r2, [pc, #300]	; (8001210 <HAL_GPIO_Init+0x330>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d101      	bne.n	80010ea <HAL_GPIO_Init+0x20a>
 80010e6:	2307      	movs	r3, #7
 80010e8:	e00e      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010ea:	2308      	movs	r3, #8
 80010ec:	e00c      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010ee:	2306      	movs	r3, #6
 80010f0:	e00a      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010f2:	2305      	movs	r3, #5
 80010f4:	e008      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010f6:	2304      	movs	r3, #4
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e004      	b.n	8001108 <HAL_GPIO_Init+0x228>
 80010fe:	2302      	movs	r3, #2
 8001100:	e002      	b.n	8001108 <HAL_GPIO_Init+0x228>
 8001102:	2301      	movs	r3, #1
 8001104:	e000      	b.n	8001108 <HAL_GPIO_Init+0x228>
 8001106:	2300      	movs	r3, #0
 8001108:	69fa      	ldr	r2, [r7, #28]
 800110a:	f002 0203 	and.w	r2, r2, #3
 800110e:	0092      	lsls	r2, r2, #2
 8001110:	4093      	lsls	r3, r2
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001118:	4935      	ldr	r1, [pc, #212]	; (80011f0 <HAL_GPIO_Init+0x310>)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	3302      	adds	r3, #2
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001126:	4b3b      	ldr	r3, [pc, #236]	; (8001214 <HAL_GPIO_Init+0x334>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800114a:	4a32      	ldr	r2, [pc, #200]	; (8001214 <HAL_GPIO_Init+0x334>)
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <HAL_GPIO_Init+0x334>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001174:	4a27      	ldr	r2, [pc, #156]	; (8001214 <HAL_GPIO_Init+0x334>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800117a:	4b26      	ldr	r3, [pc, #152]	; (8001214 <HAL_GPIO_Init+0x334>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800119e:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <HAL_GPIO_Init+0x334>)
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <HAL_GPIO_Init+0x334>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4013      	ands	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011c8:	4a12      	ldr	r2, [pc, #72]	; (8001214 <HAL_GPIO_Init+0x334>)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3301      	adds	r3, #1
 80011d2:	61fb      	str	r3, [r7, #28]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	2b0f      	cmp	r3, #15
 80011d8:	f67f ae90 	bls.w	8000efc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40013800 	.word	0x40013800
 80011f4:	40020000 	.word	0x40020000
 80011f8:	40020400 	.word	0x40020400
 80011fc:	40020800 	.word	0x40020800
 8001200:	40020c00 	.word	0x40020c00
 8001204:	40021000 	.word	0x40021000
 8001208:	40021400 	.word	0x40021400
 800120c:	40021800 	.word	0x40021800
 8001210:	40021c00 	.word	0x40021c00
 8001214:	40013c00 	.word	0x40013c00

08001218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
 8001224:	4613      	mov	r3, r2
 8001226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001228:	787b      	ldrb	r3, [r7, #1]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800122e:	887a      	ldrh	r2, [r7, #2]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001234:	e003      	b.n	800123e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001236:	887b      	ldrh	r3, [r7, #2]
 8001238:	041a      	lsls	r2, r3, #16
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	619a      	str	r2, [r3, #24]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
	...

0800124c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e267      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d075      	beq.n	8001356 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126a:	4b88      	ldr	r3, [pc, #544]	; (800148c <HAL_RCC_OscConfig+0x240>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 030c 	and.w	r3, r3, #12
 8001272:	2b04      	cmp	r3, #4
 8001274:	d00c      	beq.n	8001290 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001276:	4b85      	ldr	r3, [pc, #532]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800127e:	2b08      	cmp	r3, #8
 8001280:	d112      	bne.n	80012a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001282:	4b82      	ldr	r3, [pc, #520]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800128e:	d10b      	bne.n	80012a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	4b7e      	ldr	r3, [pc, #504]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d05b      	beq.n	8001354 <HAL_RCC_OscConfig+0x108>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d157      	bne.n	8001354 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e242      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b0:	d106      	bne.n	80012c0 <HAL_RCC_OscConfig+0x74>
 80012b2:	4b76      	ldr	r3, [pc, #472]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a75      	ldr	r2, [pc, #468]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e01d      	b.n	80012fc <HAL_RCC_OscConfig+0xb0>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x98>
 80012ca:	4b70      	ldr	r3, [pc, #448]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a6f      	ldr	r2, [pc, #444]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b6d      	ldr	r3, [pc, #436]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a6c      	ldr	r2, [pc, #432]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e00b      	b.n	80012fc <HAL_RCC_OscConfig+0xb0>
 80012e4:	4b69      	ldr	r3, [pc, #420]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a68      	ldr	r2, [pc, #416]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b66      	ldr	r3, [pc, #408]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a65      	ldr	r2, [pc, #404]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d013      	beq.n	800132c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fcfe 	bl	8000d04 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff fcfa 	bl	8000d04 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	; 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e207      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	4b5b      	ldr	r3, [pc, #364]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0xc0>
 800132a:	e014      	b.n	8001356 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fcea 	bl	8000d04 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fce6 	bl	8000d04 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e1f3      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	4b51      	ldr	r3, [pc, #324]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0xe8>
 8001352:	e000      	b.n	8001356 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d063      	beq.n	800142a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001362:	4b4a      	ldr	r3, [pc, #296]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00b      	beq.n	8001386 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136e:	4b47      	ldr	r3, [pc, #284]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001376:	2b08      	cmp	r3, #8
 8001378:	d11c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137a:	4b44      	ldr	r3, [pc, #272]	; (800148c <HAL_RCC_OscConfig+0x240>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d116      	bne.n	80013b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	4b41      	ldr	r3, [pc, #260]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d005      	beq.n	800139e <HAL_RCC_OscConfig+0x152>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d001      	beq.n	800139e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e1c7      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139e:	4b3b      	ldr	r3, [pc, #236]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4937      	ldr	r1, [pc, #220]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b2:	e03a      	b.n	800142a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d020      	beq.n	80013fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013bc:	4b34      	ldr	r3, [pc, #208]	; (8001490 <HAL_RCC_OscConfig+0x244>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c2:	f7ff fc9f 	bl	8000d04 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ca:	f7ff fc9b 	bl	8000d04 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e1a8      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	4b2b      	ldr	r3, [pc, #172]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e8:	4b28      	ldr	r3, [pc, #160]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4925      	ldr	r1, [pc, #148]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
 80013fc:	e015      	b.n	800142a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fe:	4b24      	ldr	r3, [pc, #144]	; (8001490 <HAL_RCC_OscConfig+0x244>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001404:	f7ff fc7e 	bl	8000d04 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140c:	f7ff fc7a 	bl	8000d04 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e187      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	4b1b      	ldr	r3, [pc, #108]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d036      	beq.n	80014a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d016      	beq.n	800146c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_RCC_OscConfig+0x248>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001444:	f7ff fc5e 	bl	8000d04 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144c:	f7ff fc5a 	bl	8000d04 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e167      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x200>
 800146a:	e01b      	b.n	80014a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_RCC_OscConfig+0x248>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001472:	f7ff fc47 	bl	8000d04 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001478:	e00e      	b.n	8001498 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147a:	f7ff fc43 	bl	8000d04 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d907      	bls.n	8001498 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e150      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
 800148c:	40023800 	.word	0x40023800
 8001490:	42470000 	.word	0x42470000
 8001494:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001498:	4b88      	ldr	r3, [pc, #544]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800149a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1ea      	bne.n	800147a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 8097 	beq.w	80015e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b6:	4b81      	ldr	r3, [pc, #516]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10f      	bne.n	80014e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	4b7d      	ldr	r3, [pc, #500]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a7c      	ldr	r2, [pc, #496]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
 80014d2:	4b7a      	ldr	r3, [pc, #488]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014de:	2301      	movs	r3, #1
 80014e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e2:	4b77      	ldr	r3, [pc, #476]	; (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d118      	bne.n	8001520 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ee:	4b74      	ldr	r3, [pc, #464]	; (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a73      	ldr	r2, [pc, #460]	; (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fc03 	bl	8000d04 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001502:	f7ff fbff 	bl	8000d04 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e10c      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001514:	4b6a      	ldr	r3, [pc, #424]	; (80016c0 <HAL_RCC_OscConfig+0x474>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x2ea>
 8001528:	4b64      	ldr	r3, [pc, #400]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800152a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152c:	4a63      	ldr	r2, [pc, #396]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6713      	str	r3, [r2, #112]	; 0x70
 8001534:	e01c      	b.n	8001570 <HAL_RCC_OscConfig+0x324>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b05      	cmp	r3, #5
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0x30c>
 800153e:	4b5f      	ldr	r3, [pc, #380]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001542:	4a5e      	ldr	r2, [pc, #376]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6713      	str	r3, [r2, #112]	; 0x70
 800154a:	4b5c      	ldr	r3, [pc, #368]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800154c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154e:	4a5b      	ldr	r2, [pc, #364]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6713      	str	r3, [r2, #112]	; 0x70
 8001556:	e00b      	b.n	8001570 <HAL_RCC_OscConfig+0x324>
 8001558:	4b58      	ldr	r3, [pc, #352]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155c:	4a57      	ldr	r2, [pc, #348]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800155e:	f023 0301 	bic.w	r3, r3, #1
 8001562:	6713      	str	r3, [r2, #112]	; 0x70
 8001564:	4b55      	ldr	r3, [pc, #340]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001568:	4a54      	ldr	r2, [pc, #336]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800156a:	f023 0304 	bic.w	r3, r3, #4
 800156e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d015      	beq.n	80015a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001578:	f7ff fbc4 	bl	8000d04 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157e:	e00a      	b.n	8001596 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001580:	f7ff fbc0 	bl	8000d04 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	f241 3288 	movw	r2, #5000	; 0x1388
 800158e:	4293      	cmp	r3, r2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e0cb      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001596:	4b49      	ldr	r3, [pc, #292]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0ee      	beq.n	8001580 <HAL_RCC_OscConfig+0x334>
 80015a2:	e014      	b.n	80015ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a4:	f7ff fbae 	bl	8000d04 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015aa:	e00a      	b.n	80015c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ac:	f7ff fbaa 	bl	8000d04 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e0b5      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c2:	4b3e      	ldr	r3, [pc, #248]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1ee      	bne.n	80015ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ce:	7dfb      	ldrb	r3, [r7, #23]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d105      	bne.n	80015e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d4:	4b39      	ldr	r3, [pc, #228]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	4a38      	ldr	r2, [pc, #224]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80015da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 80a1 	beq.w	800172c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ea:	4b34      	ldr	r3, [pc, #208]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d05c      	beq.n	80016b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d141      	bne.n	8001682 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fe:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fb7e 	bl	8000d04 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160c:	f7ff fb7a 	bl	8000d04 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e087      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161e:	4b27      	ldr	r3, [pc, #156]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69da      	ldr	r2, [r3, #28]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	019b      	lsls	r3, r3, #6
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	3b01      	subs	r3, #1
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164c:	061b      	lsls	r3, r3, #24
 800164e:	491b      	ldr	r1, [pc, #108]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001656:	2201      	movs	r2, #1
 8001658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff fb53 	bl	8000d04 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001662:	f7ff fb4f 	bl	8000d04 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e05c      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x416>
 8001680:	e054      	b.n	800172c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fb3c 	bl	8000d04 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fb38 	bl	8000d04 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e045      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x444>
 80016ae:	e03d      	b.n	800172c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d107      	bne.n	80016c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e038      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40007000 	.word	0x40007000
 80016c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <HAL_RCC_OscConfig+0x4ec>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d028      	beq.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d121      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d11a      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016f8:	4013      	ands	r3, r2
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001700:	4293      	cmp	r3, r2
 8001702:	d111      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170e:	085b      	lsrs	r3, r3, #1
 8001710:	3b01      	subs	r3, #1
 8001712:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001714:	429a      	cmp	r2, r3
 8001716:	d107      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800

0800173c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0cc      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001750:	4b68      	ldr	r3, [pc, #416]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d90c      	bls.n	8001778 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b65      	ldr	r3, [pc, #404]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	4b63      	ldr	r3, [pc, #396]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0b8      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d020      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001790:	4b59      	ldr	r3, [pc, #356]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4a58      	ldr	r2, [pc, #352]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800179a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a8:	4b53      	ldr	r3, [pc, #332]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4a52      	ldr	r2, [pc, #328]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b4:	4b50      	ldr	r3, [pc, #320]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	494d      	ldr	r1, [pc, #308]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d044      	beq.n	800185c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d119      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e07f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d003      	beq.n	80017fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fa:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e06f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180a:	4b3b      	ldr	r3, [pc, #236]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e067      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181a:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f023 0203 	bic.w	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4934      	ldr	r1, [pc, #208]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	4313      	orrs	r3, r2
 800182a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800182c:	f7ff fa6a 	bl	8000d04 <HAL_GetTick>
 8001830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	e00a      	b.n	800184a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001834:	f7ff fa66 	bl	8000d04 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e04f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 020c 	and.w	r2, r3, #12
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	429a      	cmp	r2, r3
 800185a:	d1eb      	bne.n	8001834 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800185c:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d20c      	bcs.n	8001884 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001872:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e032      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d008      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	4916      	ldr	r1, [pc, #88]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d009      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	490e      	ldr	r1, [pc, #56]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018c2:	f000 f821 	bl	8001908 <HAL_RCC_GetSysClockFreq>
 80018c6:	4602      	mov	r2, r0
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	490a      	ldr	r1, [pc, #40]	; (80018fc <HAL_RCC_ClockConfig+0x1c0>)
 80018d4:	5ccb      	ldrb	r3, [r1, r3]
 80018d6:	fa22 f303 	lsr.w	r3, r2, r3
 80018da:	4a09      	ldr	r2, [pc, #36]	; (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <HAL_RCC_ClockConfig+0x1c8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff f8ae 	bl	8000a44 <HAL_InitTick>

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023c00 	.word	0x40023c00
 80018f8:	40023800 	.word	0x40023800
 80018fc:	0800710c 	.word	0x0800710c
 8001900:	20000000 	.word	0x20000000
 8001904:	20000004 	.word	0x20000004

08001908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800190c:	b094      	sub	sp, #80	; 0x50
 800190e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	647b      	str	r3, [r7, #68]	; 0x44
 8001914:	2300      	movs	r3, #0
 8001916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001918:	2300      	movs	r3, #0
 800191a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001920:	4b79      	ldr	r3, [pc, #484]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b08      	cmp	r3, #8
 800192a:	d00d      	beq.n	8001948 <HAL_RCC_GetSysClockFreq+0x40>
 800192c:	2b08      	cmp	r3, #8
 800192e:	f200 80e1 	bhi.w	8001af4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x34>
 8001936:	2b04      	cmp	r3, #4
 8001938:	d003      	beq.n	8001942 <HAL_RCC_GetSysClockFreq+0x3a>
 800193a:	e0db      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800193c:	4b73      	ldr	r3, [pc, #460]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x204>)
 800193e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001940:	e0db      	b.n	8001afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001942:	4b73      	ldr	r3, [pc, #460]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x208>)
 8001944:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001946:	e0d8      	b.n	8001afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001948:	4b6f      	ldr	r3, [pc, #444]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001950:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001952:	4b6d      	ldr	r3, [pc, #436]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d063      	beq.n	8001a26 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195e:	4b6a      	ldr	r3, [pc, #424]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	099b      	lsrs	r3, r3, #6
 8001964:	2200      	movs	r2, #0
 8001966:	63bb      	str	r3, [r7, #56]	; 0x38
 8001968:	63fa      	str	r2, [r7, #60]	; 0x3c
 800196a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800196c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
 8001972:	2300      	movs	r3, #0
 8001974:	637b      	str	r3, [r7, #52]	; 0x34
 8001976:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800197a:	4622      	mov	r2, r4
 800197c:	462b      	mov	r3, r5
 800197e:	f04f 0000 	mov.w	r0, #0
 8001982:	f04f 0100 	mov.w	r1, #0
 8001986:	0159      	lsls	r1, r3, #5
 8001988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800198c:	0150      	lsls	r0, r2, #5
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4621      	mov	r1, r4
 8001994:	1a51      	subs	r1, r2, r1
 8001996:	6139      	str	r1, [r7, #16]
 8001998:	4629      	mov	r1, r5
 800199a:	eb63 0301 	sbc.w	r3, r3, r1
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019ac:	4659      	mov	r1, fp
 80019ae:	018b      	lsls	r3, r1, #6
 80019b0:	4651      	mov	r1, sl
 80019b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019b6:	4651      	mov	r1, sl
 80019b8:	018a      	lsls	r2, r1, #6
 80019ba:	4651      	mov	r1, sl
 80019bc:	ebb2 0801 	subs.w	r8, r2, r1
 80019c0:	4659      	mov	r1, fp
 80019c2:	eb63 0901 	sbc.w	r9, r3, r1
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019da:	4690      	mov	r8, r2
 80019dc:	4699      	mov	r9, r3
 80019de:	4623      	mov	r3, r4
 80019e0:	eb18 0303 	adds.w	r3, r8, r3
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	462b      	mov	r3, r5
 80019e8:	eb49 0303 	adc.w	r3, r9, r3
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019fa:	4629      	mov	r1, r5
 80019fc:	024b      	lsls	r3, r1, #9
 80019fe:	4621      	mov	r1, r4
 8001a00:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a04:	4621      	mov	r1, r4
 8001a06:	024a      	lsls	r2, r1, #9
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a0e:	2200      	movs	r2, #0
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a18:	f7fe fc24 	bl	8000264 <__aeabi_uldivmod>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4613      	mov	r3, r2
 8001a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a24:	e058      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a26:	4b38      	ldr	r3, [pc, #224]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	099b      	lsrs	r3, r3, #6
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	4611      	mov	r1, r2
 8001a32:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a36:	623b      	str	r3, [r7, #32]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a40:	4642      	mov	r2, r8
 8001a42:	464b      	mov	r3, r9
 8001a44:	f04f 0000 	mov.w	r0, #0
 8001a48:	f04f 0100 	mov.w	r1, #0
 8001a4c:	0159      	lsls	r1, r3, #5
 8001a4e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a52:	0150      	lsls	r0, r2, #5
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4641      	mov	r1, r8
 8001a5a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a5e:	4649      	mov	r1, r9
 8001a60:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a70:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a74:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a78:	ebb2 040a 	subs.w	r4, r2, sl
 8001a7c:	eb63 050b 	sbc.w	r5, r3, fp
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	00eb      	lsls	r3, r5, #3
 8001a8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a8e:	00e2      	lsls	r2, r4, #3
 8001a90:	4614      	mov	r4, r2
 8001a92:	461d      	mov	r5, r3
 8001a94:	4643      	mov	r3, r8
 8001a96:	18e3      	adds	r3, r4, r3
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	464b      	mov	r3, r9
 8001a9c:	eb45 0303 	adc.w	r3, r5, r3
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aae:	4629      	mov	r1, r5
 8001ab0:	028b      	lsls	r3, r1, #10
 8001ab2:	4621      	mov	r1, r4
 8001ab4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ab8:	4621      	mov	r1, r4
 8001aba:	028a      	lsls	r2, r1, #10
 8001abc:	4610      	mov	r0, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
 8001ac6:	61fa      	str	r2, [r7, #28]
 8001ac8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001acc:	f7fe fbca 	bl	8000264 <__aeabi_uldivmod>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	0c1b      	lsrs	r3, r3, #16
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ae8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001af2:	e002      	b.n	8001afa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x204>)
 8001af6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001af8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3750      	adds	r7, #80	; 0x50
 8001b00:	46bd      	mov	sp, r7
 8001b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	00f42400 	.word	0x00f42400
 8001b10:	007a1200 	.word	0x007a1200

08001b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000000 	.word	0x20000000

08001b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b30:	f7ff fff0 	bl	8001b14 <HAL_RCC_GetHCLKFreq>
 8001b34:	4602      	mov	r2, r0
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	0a9b      	lsrs	r3, r3, #10
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	4903      	ldr	r1, [pc, #12]	; (8001b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b42:	5ccb      	ldrb	r3, [r1, r3]
 8001b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	0800711c 	.word	0x0800711c

08001b54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	220f      	movs	r2, #15
 8001b62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 0203 	and.w	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	08db      	lsrs	r3, r3, #3
 8001b8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <HAL_RCC_GetClockConfig+0x60>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0207 	and.w	r2, r3, #7
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	601a      	str	r2, [r3, #0]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40023c00 	.word	0x40023c00

08001bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e041      	b.n	8001c4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f839 	bl	8001c56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	f000 f9d8 	bl	8001fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d001      	beq.n	8001c84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e04e      	b.n	8001d22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2202      	movs	r2, #2
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a23      	ldr	r2, [pc, #140]	; (8001d30 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d022      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cae:	d01d      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a1f      	ldr	r2, [pc, #124]	; (8001d34 <HAL_TIM_Base_Start_IT+0xc8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d018      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a1e      	ldr	r2, [pc, #120]	; (8001d38 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d013      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a1c      	ldr	r2, [pc, #112]	; (8001d3c <HAL_TIM_Base_Start_IT+0xd0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d00e      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a1b      	ldr	r2, [pc, #108]	; (8001d40 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d009      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a19      	ldr	r2, [pc, #100]	; (8001d44 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d004      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0x80>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a18      	ldr	r2, [pc, #96]	; (8001d48 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d111      	bne.n	8001d10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2b06      	cmp	r3, #6
 8001cfc:	d010      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 0201 	orr.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d0e:	e007      	b.n	8001d20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40010000 	.word	0x40010000
 8001d34:	40000400 	.word	0x40000400
 8001d38:	40000800 	.word	0x40000800
 8001d3c:	40000c00 	.word	0x40000c00
 8001d40:	40010400 	.word	0x40010400
 8001d44:	40014000 	.word	0x40014000
 8001d48:	40001800 	.word	0x40001800

08001d4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d122      	bne.n	8001da8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d11b      	bne.n	8001da8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f06f 0202 	mvn.w	r2, #2
 8001d78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f8ee 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001d94:	e005      	b.n	8001da2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f8e0 	bl	8001f5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f8f1 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d122      	bne.n	8001dfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d11b      	bne.n	8001dfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0204 	mvn.w	r2, #4
 8001dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f8c4 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001de8:	e005      	b.n	8001df6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f8b6 	bl	8001f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f8c7 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d122      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d11b      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0208 	mvn.w	r2, #8
 8001e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2204      	movs	r2, #4
 8001e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f89a 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001e3c:	e005      	b.n	8001e4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f88c 	bl	8001f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f89d 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0310 	and.w	r3, r3, #16
 8001e5a:	2b10      	cmp	r3, #16
 8001e5c:	d122      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0310 	and.w	r3, r3, #16
 8001e68:	2b10      	cmp	r3, #16
 8001e6a:	d11b      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0210 	mvn.w	r2, #16
 8001e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2208      	movs	r2, #8
 8001e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f870 	bl	8001f70 <HAL_TIM_IC_CaptureCallback>
 8001e90:	e005      	b.n	8001e9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f862 	bl	8001f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f873 	bl	8001f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d10e      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d107      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0201 	mvn.w	r2, #1
 8001ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7fe fd7a 	bl	80009c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eda:	2b80      	cmp	r3, #128	; 0x80
 8001edc:	d10e      	bne.n	8001efc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee8:	2b80      	cmp	r3, #128	; 0x80
 8001eea:	d107      	bne.n	8001efc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f902 	bl	8002100 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f06:	2b40      	cmp	r3, #64	; 0x40
 8001f08:	d10e      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f14:	2b40      	cmp	r3, #64	; 0x40
 8001f16:	d107      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f838 	bl	8001f98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0320 	and.w	r3, r3, #32
 8001f32:	2b20      	cmp	r3, #32
 8001f34:	d10e      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0320 	and.w	r3, r3, #32
 8001f40:	2b20      	cmp	r3, #32
 8001f42:	d107      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0220 	mvn.w	r2, #32
 8001f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f8cc 	bl	80020ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f54:	bf00      	nop
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a40      	ldr	r2, [pc, #256]	; (80020c0 <TIM_Base_SetConfig+0x114>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d013      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fca:	d00f      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a3d      	ldr	r2, [pc, #244]	; (80020c4 <TIM_Base_SetConfig+0x118>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d00b      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a3c      	ldr	r2, [pc, #240]	; (80020c8 <TIM_Base_SetConfig+0x11c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d007      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a3b      	ldr	r2, [pc, #236]	; (80020cc <TIM_Base_SetConfig+0x120>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d003      	beq.n	8001fec <TIM_Base_SetConfig+0x40>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a3a      	ldr	r2, [pc, #232]	; (80020d0 <TIM_Base_SetConfig+0x124>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d108      	bne.n	8001ffe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a2f      	ldr	r2, [pc, #188]	; (80020c0 <TIM_Base_SetConfig+0x114>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d02b      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800200c:	d027      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a2c      	ldr	r2, [pc, #176]	; (80020c4 <TIM_Base_SetConfig+0x118>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d023      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a2b      	ldr	r2, [pc, #172]	; (80020c8 <TIM_Base_SetConfig+0x11c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d01f      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a2a      	ldr	r2, [pc, #168]	; (80020cc <TIM_Base_SetConfig+0x120>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d01b      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a29      	ldr	r2, [pc, #164]	; (80020d0 <TIM_Base_SetConfig+0x124>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d017      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a28      	ldr	r2, [pc, #160]	; (80020d4 <TIM_Base_SetConfig+0x128>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a27      	ldr	r2, [pc, #156]	; (80020d8 <TIM_Base_SetConfig+0x12c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00f      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a26      	ldr	r2, [pc, #152]	; (80020dc <TIM_Base_SetConfig+0x130>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00b      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a25      	ldr	r2, [pc, #148]	; (80020e0 <TIM_Base_SetConfig+0x134>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d007      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a24      	ldr	r2, [pc, #144]	; (80020e4 <TIM_Base_SetConfig+0x138>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d003      	beq.n	800205e <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a23      	ldr	r2, [pc, #140]	; (80020e8 <TIM_Base_SetConfig+0x13c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d108      	bne.n	8002070 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <TIM_Base_SetConfig+0x114>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d003      	beq.n	80020a4 <TIM_Base_SetConfig+0xf8>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <TIM_Base_SetConfig+0x124>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d103      	bne.n	80020ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	615a      	str	r2, [r3, #20]
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40010000 	.word	0x40010000
 80020c4:	40000400 	.word	0x40000400
 80020c8:	40000800 	.word	0x40000800
 80020cc:	40000c00 	.word	0x40000c00
 80020d0:	40010400 	.word	0x40010400
 80020d4:	40014000 	.word	0x40014000
 80020d8:	40014400 	.word	0x40014400
 80020dc:	40014800 	.word	0x40014800
 80020e0:	40001800 	.word	0x40001800
 80020e4:	40001c00 	.word	0x40001c00
 80020e8:	40002000 	.word	0x40002000

080020ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f103 0208 	add.w	r2, r3, #8
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f04f 32ff 	mov.w	r2, #4294967295
 800212c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f103 0208 	add.w	r2, r3, #8
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f103 0208 	add.w	r2, r3, #8
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800216e:	b480      	push	{r7}
 8002170:	b085      	sub	sp, #20
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	1c5a      	adds	r2, r3, #1
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	601a      	str	r2, [r3, #0]
}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021b6:	b480      	push	{r7}
 80021b8:	b085      	sub	sp, #20
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021cc:	d103      	bne.n	80021d6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	e00c      	b.n	80021f0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3308      	adds	r3, #8
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	e002      	b.n	80021e4 <vListInsert+0x2e>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d2f6      	bcs.n	80021de <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	1c5a      	adds	r2, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	601a      	str	r2, [r3, #0]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6892      	ldr	r2, [r2, #8]
 800223e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6852      	ldr	r2, [r2, #4]
 8002248:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	429a      	cmp	r2, r3
 8002252:	d103      	bne.n	800225c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	1e5a      	subs	r2, r3, #1
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10a      	bne.n	80022a6 <xQueueGenericReset+0x2a>
        __asm volatile
 8002290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002294:	f383 8811 	msr	BASEPRI, r3
 8002298:	f3bf 8f6f 	isb	sy
 800229c:	f3bf 8f4f 	dsb	sy
 80022a0:	60bb      	str	r3, [r7, #8]
    }
 80022a2:	bf00      	nop
 80022a4:	e7fe      	b.n	80022a4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80022a6:	f002 f8b5 	bl	8004414 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b2:	68f9      	ldr	r1, [r7, #12]
 80022b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	441a      	add	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d6:	3b01      	subs	r3, #1
 80022d8:	68f9      	ldr	r1, [r7, #12]
 80022da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022dc:	fb01 f303 	mul.w	r3, r1, r3
 80022e0:	441a      	add	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	22ff      	movs	r2, #255	; 0xff
 80022ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	22ff      	movs	r2, #255	; 0xff
 80022f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d114      	bne.n	8002326 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d01a      	beq.n	800233a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	3310      	adds	r3, #16
 8002308:	4618      	mov	r0, r3
 800230a:	f001 f91f 	bl	800354c <xTaskRemoveFromEventList>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d012      	beq.n	800233a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <xQueueGenericReset+0xcc>)
 8002316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	f3bf 8f4f 	dsb	sy
 8002320:	f3bf 8f6f 	isb	sy
 8002324:	e009      	b.n	800233a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	3310      	adds	r3, #16
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fef2 	bl	8002114 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3324      	adds	r3, #36	; 0x24
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff feed 	bl	8002114 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800233a:	f002 f89b 	bl	8004474 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800233e:	2301      	movs	r3, #1
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	e000ed04 	.word	0xe000ed04

0800234c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800234c:	b580      	push	{r7, lr}
 800234e:	b08c      	sub	sp, #48	; 0x30
 8002350:	af02      	add	r7, sp, #8
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	4613      	mov	r3, r2
 8002358:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10a      	bne.n	8002376 <xQueueGenericCreate+0x2a>
        __asm volatile
 8002360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002364:	f383 8811 	msr	BASEPRI, r3
 8002368:	f3bf 8f6f 	isb	sy
 800236c:	f3bf 8f4f 	dsb	sy
 8002370:	61bb      	str	r3, [r7, #24]
    }
 8002372:	bf00      	nop
 8002374:	e7fe      	b.n	8002374 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d006      	beq.n	8002394 <xQueueGenericCreate+0x48>
 8002386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	fbb2 f3f3 	udiv	r3, r2, r3
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	429a      	cmp	r2, r3
 8002392:	d101      	bne.n	8002398 <xQueueGenericCreate+0x4c>
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <xQueueGenericCreate+0x4e>
 8002398:	2300      	movs	r3, #0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10a      	bne.n	80023b4 <xQueueGenericCreate+0x68>
        __asm volatile
 800239e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a2:	f383 8811 	msr	BASEPRI, r3
 80023a6:	f3bf 8f6f 	isb	sy
 80023aa:	f3bf 8f4f 	dsb	sy
 80023ae:	617b      	str	r3, [r7, #20]
    }
 80023b0:	bf00      	nop
 80023b2:	e7fe      	b.n	80023b2 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80023ba:	d90a      	bls.n	80023d2 <xQueueGenericCreate+0x86>
        __asm volatile
 80023bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c0:	f383 8811 	msr	BASEPRI, r3
 80023c4:	f3bf 8f6f 	isb	sy
 80023c8:	f3bf 8f4f 	dsb	sy
 80023cc:	613b      	str	r3, [r7, #16]
    }
 80023ce:	bf00      	nop
 80023d0:	e7fe      	b.n	80023d0 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	3350      	adds	r3, #80	; 0x50
 80023d6:	4618      	mov	r0, r3
 80023d8:	f002 f940 	bl	800465c <pvPortMalloc>
 80023dc:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00d      	beq.n	8002400 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023e4:	6a3b      	ldr	r3, [r7, #32]
 80023e6:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	3350      	adds	r3, #80	; 0x50
 80023ec:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023ee:	79fa      	ldrb	r2, [r7, #7]
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	4613      	mov	r3, r2
 80023f6:	69fa      	ldr	r2, [r7, #28]
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 f805 	bl	800240a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002400:	6a3b      	ldr	r3, [r7, #32]
    }
 8002402:	4618      	mov	r0, r3
 8002404:	3728      	adds	r7, #40	; 0x28
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b084      	sub	sp, #16
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d103      	bne.n	8002426 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	e002      	b.n	800242c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002438:	2101      	movs	r1, #1
 800243a:	69b8      	ldr	r0, [r7, #24]
 800243c:	f7ff ff1e 	bl	800227c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	78fa      	ldrb	r2, [r7, #3]
 8002444:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	68f9      	ldr	r1, [r7, #12]
 800244e:	2073      	movs	r0, #115	; 0x73
 8002450:	f003 fa78 	bl	8005944 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b090      	sub	sp, #64	; 0x40
 8002460:	af02      	add	r7, sp, #8
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
 8002468:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800246a:	2300      	movs	r3, #0
 800246c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10a      	bne.n	800248e <xQueueGenericSend+0x32>
        __asm volatile
 8002478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247c:	f383 8811 	msr	BASEPRI, r3
 8002480:	f3bf 8f6f 	isb	sy
 8002484:	f3bf 8f4f 	dsb	sy
 8002488:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800248a:	bf00      	nop
 800248c:	e7fe      	b.n	800248c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d103      	bne.n	800249c <xQueueGenericSend+0x40>
 8002494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <xQueueGenericSend+0x44>
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <xQueueGenericSend+0x46>
 80024a0:	2300      	movs	r3, #0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10a      	bne.n	80024bc <xQueueGenericSend+0x60>
        __asm volatile
 80024a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024aa:	f383 8811 	msr	BASEPRI, r3
 80024ae:	f3bf 8f6f 	isb	sy
 80024b2:	f3bf 8f4f 	dsb	sy
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80024b8:	bf00      	nop
 80024ba:	e7fe      	b.n	80024ba <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d103      	bne.n	80024ca <xQueueGenericSend+0x6e>
 80024c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <xQueueGenericSend+0x72>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <xQueueGenericSend+0x74>
 80024ce:	2300      	movs	r3, #0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10a      	bne.n	80024ea <xQueueGenericSend+0x8e>
        __asm volatile
 80024d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d8:	f383 8811 	msr	BASEPRI, r3
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	623b      	str	r3, [r7, #32]
    }
 80024e6:	bf00      	nop
 80024e8:	e7fe      	b.n	80024e8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024ea:	f001 f9cf 	bl	800388c <xTaskGetSchedulerState>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <xQueueGenericSend+0x9e>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <xQueueGenericSend+0xa2>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <xQueueGenericSend+0xa4>
 80024fe:	2300      	movs	r3, #0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10a      	bne.n	800251a <xQueueGenericSend+0xbe>
        __asm volatile
 8002504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002508:	f383 8811 	msr	BASEPRI, r3
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	61fb      	str	r3, [r7, #28]
    }
 8002516:	bf00      	nop
 8002518:	e7fe      	b.n	8002518 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800251a:	f001 ff7b 	bl	8004414 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002526:	429a      	cmp	r2, r3
 8002528:	d302      	bcc.n	8002530 <xQueueGenericSend+0xd4>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d136      	bne.n	800259e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002532:	4618      	mov	r0, r3
 8002534:	f003 feb8 	bl	80062a8 <SEGGER_SYSVIEW_ShrinkId>
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	460b      	mov	r3, r1
 8002542:	4601      	mov	r1, r0
 8002544:	205a      	movs	r0, #90	; 0x5a
 8002546:	f003 fa73 	bl	8005a30 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	68b9      	ldr	r1, [r7, #8]
 800254e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002550:	f000 fa78 	bl	8002a44 <prvCopyDataToQueue>
 8002554:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	2b00      	cmp	r3, #0
 800255c:	d010      	beq.n	8002580 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800255e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002560:	3324      	adds	r3, #36	; 0x24
 8002562:	4618      	mov	r0, r3
 8002564:	f000 fff2 	bl	800354c <xTaskRemoveFromEventList>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d013      	beq.n	8002596 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800256e:	4b4d      	ldr	r3, [pc, #308]	; (80026a4 <xQueueGenericSend+0x248>)
 8002570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	f3bf 8f4f 	dsb	sy
 800257a:	f3bf 8f6f 	isb	sy
 800257e:	e00a      	b.n	8002596 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002582:	2b00      	cmp	r3, #0
 8002584:	d007      	beq.n	8002596 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002586:	4b47      	ldr	r3, [pc, #284]	; (80026a4 <xQueueGenericSend+0x248>)
 8002588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	f3bf 8f4f 	dsb	sy
 8002592:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002596:	f001 ff6d 	bl	8004474 <vPortExitCritical>
                return pdPASS;
 800259a:	2301      	movs	r3, #1
 800259c:	e07d      	b.n	800269a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d110      	bne.n	80025c6 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80025a4:	f001 ff66 	bl	8004474 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80025a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 fe7c 	bl	80062a8 <SEGGER_SYSVIEW_ShrinkId>
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	460b      	mov	r3, r1
 80025ba:	4601      	mov	r1, r0
 80025bc:	205a      	movs	r0, #90	; 0x5a
 80025be:	f003 fa37 	bl	8005a30 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	e069      	b.n	800269a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80025c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d106      	bne.n	80025da <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	4618      	mov	r0, r3
 80025d2:	f001 f821 	bl	8003618 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80025d6:	2301      	movs	r3, #1
 80025d8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80025da:	f001 ff4b 	bl	8004474 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80025de:	f000 fd6d 	bl	80030bc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80025e2:	f001 ff17 	bl	8004414 <vPortEnterCritical>
 80025e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f2:	d103      	bne.n	80025fc <xQueueGenericSend+0x1a0>
 80025f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002602:	b25b      	sxtb	r3, r3
 8002604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002608:	d103      	bne.n	8002612 <xQueueGenericSend+0x1b6>
 800260a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002612:	f001 ff2f 	bl	8004474 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002616:	1d3a      	adds	r2, r7, #4
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f001 f810 	bl	8003644 <xTaskCheckForTimeOut>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d124      	bne.n	8002674 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800262a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800262c:	f000 fb02 	bl	8002c34 <prvIsQueueFull>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d018      	beq.n	8002668 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002638:	3310      	adds	r3, #16
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	4611      	mov	r1, r2
 800263e:	4618      	mov	r0, r3
 8002640:	f000 ff32 	bl	80034a8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002646:	f000 fa8d 	bl	8002b64 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800264a:	f000 fd45 	bl	80030d8 <xTaskResumeAll>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	f47f af62 	bne.w	800251a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002656:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <xQueueGenericSend+0x248>)
 8002658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	f3bf 8f4f 	dsb	sy
 8002662:	f3bf 8f6f 	isb	sy
 8002666:	e758      	b.n	800251a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800266a:	f000 fa7b 	bl	8002b64 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800266e:	f000 fd33 	bl	80030d8 <xTaskResumeAll>
 8002672:	e752      	b.n	800251a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002676:	f000 fa75 	bl	8002b64 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800267a:	f000 fd2d 	bl	80030d8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	4618      	mov	r0, r3
 8002682:	f003 fe11 	bl	80062a8 <SEGGER_SYSVIEW_ShrinkId>
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	460b      	mov	r3, r1
 8002690:	4601      	mov	r1, r0
 8002692:	205a      	movs	r0, #90	; 0x5a
 8002694:	f003 f9cc 	bl	8005a30 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002698:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800269a:	4618      	mov	r0, r3
 800269c:	3738      	adds	r7, #56	; 0x38
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	e000ed04 	.word	0xe000ed04

080026a8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b090      	sub	sp, #64	; 0x40
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80026ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10a      	bne.n	80026d6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80026c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80026d2:	bf00      	nop
 80026d4:	e7fe      	b.n	80026d4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d103      	bne.n	80026e4 <xQueueGenericSendFromISR+0x3c>
 80026dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <xQueueGenericSendFromISR+0x40>
 80026e4:	2301      	movs	r3, #1
 80026e6:	e000      	b.n	80026ea <xQueueGenericSendFromISR+0x42>
 80026e8:	2300      	movs	r3, #0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10a      	bne.n	8002704 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80026ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f2:	f383 8811 	msr	BASEPRI, r3
 80026f6:	f3bf 8f6f 	isb	sy
 80026fa:	f3bf 8f4f 	dsb	sy
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002700:	bf00      	nop
 8002702:	e7fe      	b.n	8002702 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d103      	bne.n	8002712 <xQueueGenericSendFromISR+0x6a>
 800270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800270c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <xQueueGenericSendFromISR+0x6e>
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <xQueueGenericSendFromISR+0x70>
 8002716:	2300      	movs	r3, #0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10a      	bne.n	8002732 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002720:	f383 8811 	msr	BASEPRI, r3
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	623b      	str	r3, [r7, #32]
    }
 800272e:	bf00      	nop
 8002730:	e7fe      	b.n	8002730 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002732:	f001 ff53 	bl	80045dc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002736:	f3ef 8211 	mrs	r2, BASEPRI
 800273a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273e:	f383 8811 	msr	BASEPRI, r3
 8002742:	f3bf 8f6f 	isb	sy
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	61fa      	str	r2, [r7, #28]
 800274c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800274e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002750:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275a:	429a      	cmp	r2, r3
 800275c:	d302      	bcc.n	8002764 <xQueueGenericSendFromISR+0xbc>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d148      	bne.n	80027f6 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800276a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002776:	4618      	mov	r0, r3
 8002778:	f003 fd96 	bl	80062a8 <SEGGER_SYSVIEW_ShrinkId>
 800277c:	4601      	mov	r1, r0
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	461a      	mov	r2, r3
 8002782:	2060      	movs	r0, #96	; 0x60
 8002784:	f003 f884 	bl	8005890 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	68b9      	ldr	r1, [r7, #8]
 800278c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800278e:	f000 f959 	bl	8002a44 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002792:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279a:	d112      	bne.n	80027c2 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800279c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d025      	beq.n	80027f0 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a6:	3324      	adds	r3, #36	; 0x24
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 fecf 	bl	800354c <xTaskRemoveFromEventList>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d01d      	beq.n	80027f0 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d01a      	beq.n	80027f0 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	e016      	b.n	80027f0 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80027c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80027c6:	2b7f      	cmp	r3, #127	; 0x7f
 80027c8:	d10a      	bne.n	80027e0 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80027ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ce:	f383 8811 	msr	BASEPRI, r3
 80027d2:	f3bf 8f6f 	isb	sy
 80027d6:	f3bf 8f4f 	dsb	sy
 80027da:	617b      	str	r3, [r7, #20]
    }
 80027dc:	bf00      	nop
 80027de:	e7fe      	b.n	80027de <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027e4:	3301      	adds	r3, #1
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	b25a      	sxtb	r2, r3
 80027ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80027f0:	2301      	movs	r3, #1
 80027f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80027f4:	e00b      	b.n	800280e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80027f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f8:	4618      	mov	r0, r3
 80027fa:	f003 fd55 	bl	80062a8 <SEGGER_SYSVIEW_ShrinkId>
 80027fe:	4601      	mov	r1, r0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	461a      	mov	r2, r3
 8002804:	2060      	movs	r0, #96	; 0x60
 8002806:	f003 f843 	bl	8005890 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800280a:	2300      	movs	r3, #0
 800280c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800280e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002810:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002818:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800281a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800281c:	4618      	mov	r0, r3
 800281e:	3740      	adds	r7, #64	; 0x40
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002824:	b590      	push	{r4, r7, lr}
 8002826:	b08f      	sub	sp, #60	; 0x3c
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002830:	2300      	movs	r3, #0
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10a      	bne.n	8002854 <xQueueReceive+0x30>
        __asm volatile
 800283e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002842:	f383 8811 	msr	BASEPRI, r3
 8002846:	f3bf 8f6f 	isb	sy
 800284a:	f3bf 8f4f 	dsb	sy
 800284e:	623b      	str	r3, [r7, #32]
    }
 8002850:	bf00      	nop
 8002852:	e7fe      	b.n	8002852 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d103      	bne.n	8002862 <xQueueReceive+0x3e>
 800285a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <xQueueReceive+0x42>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <xQueueReceive+0x44>
 8002866:	2300      	movs	r3, #0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10a      	bne.n	8002882 <xQueueReceive+0x5e>
        __asm volatile
 800286c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002870:	f383 8811 	msr	BASEPRI, r3
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	f3bf 8f4f 	dsb	sy
 800287c:	61fb      	str	r3, [r7, #28]
    }
 800287e:	bf00      	nop
 8002880:	e7fe      	b.n	8002880 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002882:	f001 f803 	bl	800388c <xTaskGetSchedulerState>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d102      	bne.n	8002892 <xQueueReceive+0x6e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <xQueueReceive+0x72>
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <xQueueReceive+0x74>
 8002896:	2300      	movs	r3, #0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <xQueueReceive+0x8e>
        __asm volatile
 800289c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a0:	f383 8811 	msr	BASEPRI, r3
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	61bb      	str	r3, [r7, #24]
    }
 80028ae:	bf00      	nop
 80028b0:	e7fe      	b.n	80028b0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80028b2:	f001 fdaf 	bl	8004414 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d02f      	beq.n	8002922 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028c6:	f000 f927 	bl	8002b18 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80028ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028cc:	4618      	mov	r0, r3
 80028ce:	f003 fceb 	bl	80062a8 <SEGGER_SYSVIEW_ShrinkId>
 80028d2:	4604      	mov	r4, r0
 80028d4:	2000      	movs	r0, #0
 80028d6:	f003 fce7 	bl	80062a8 <SEGGER_SYSVIEW_ShrinkId>
 80028da:	4602      	mov	r2, r0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2101      	movs	r1, #1
 80028e0:	9100      	str	r1, [sp, #0]
 80028e2:	4621      	mov	r1, r4
 80028e4:	205c      	movs	r0, #92	; 0x5c
 80028e6:	f003 f8a3 	bl	8005a30 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	1e5a      	subs	r2, r3, #1
 80028ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00f      	beq.n	800291a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fc:	3310      	adds	r3, #16
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fe24 	bl	800354c <xTaskRemoveFromEventList>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d007      	beq.n	800291a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800290a:	4b4d      	ldr	r3, [pc, #308]	; (8002a40 <xQueueReceive+0x21c>)
 800290c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	f3bf 8f4f 	dsb	sy
 8002916:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800291a:	f001 fdab 	bl	8004474 <vPortExitCritical>
                return pdPASS;
 800291e:	2301      	movs	r3, #1
 8002920:	e08a      	b.n	8002a38 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d113      	bne.n	8002950 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002928:	f001 fda4 	bl	8004474 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800292c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292e:	4618      	mov	r0, r3
 8002930:	f003 fcba 	bl	80062a8 <SEGGER_SYSVIEW_ShrinkId>
 8002934:	4604      	mov	r4, r0
 8002936:	2000      	movs	r0, #0
 8002938:	f003 fcb6 	bl	80062a8 <SEGGER_SYSVIEW_ShrinkId>
 800293c:	4602      	mov	r2, r0
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2101      	movs	r1, #1
 8002942:	9100      	str	r1, [sp, #0]
 8002944:	4621      	mov	r1, r4
 8002946:	205c      	movs	r0, #92	; 0x5c
 8002948:	f003 f872 	bl	8005a30 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800294c:	2300      	movs	r3, #0
 800294e:	e073      	b.n	8002a38 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002956:	f107 0310 	add.w	r3, r7, #16
 800295a:	4618      	mov	r0, r3
 800295c:	f000 fe5c 	bl	8003618 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002960:	2301      	movs	r3, #1
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002964:	f001 fd86 	bl	8004474 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002968:	f000 fba8 	bl	80030bc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800296c:	f001 fd52 	bl	8004414 <vPortEnterCritical>
 8002970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002972:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002976:	b25b      	sxtb	r3, r3
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d103      	bne.n	8002986 <xQueueReceive+0x162>
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002988:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800298c:	b25b      	sxtb	r3, r3
 800298e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002992:	d103      	bne.n	800299c <xQueueReceive+0x178>
 8002994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800299c:	f001 fd6a 	bl	8004474 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029a0:	1d3a      	adds	r2, r7, #4
 80029a2:	f107 0310 	add.w	r3, r7, #16
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 fe4b 	bl	8003644 <xTaskCheckForTimeOut>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d124      	bne.n	80029fe <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029b6:	f000 f927 	bl	8002c08 <prvIsQueueEmpty>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d018      	beq.n	80029f2 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c2:	3324      	adds	r3, #36	; 0x24
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fd6d 	bl	80034a8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80029ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029d0:	f000 f8c8 	bl	8002b64 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80029d4:	f000 fb80 	bl	80030d8 <xTaskResumeAll>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f47f af69 	bne.w	80028b2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80029e0:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <xQueueReceive+0x21c>)
 80029e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	e75f      	b.n	80028b2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80029f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029f4:	f000 f8b6 	bl	8002b64 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029f8:	f000 fb6e 	bl	80030d8 <xTaskResumeAll>
 80029fc:	e759      	b.n	80028b2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80029fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a00:	f000 f8b0 	bl	8002b64 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a04:	f000 fb68 	bl	80030d8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a0a:	f000 f8fd 	bl	8002c08 <prvIsQueueEmpty>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f43f af4e 	beq.w	80028b2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f003 fc45 	bl	80062a8 <SEGGER_SYSVIEW_ShrinkId>
 8002a1e:	4604      	mov	r4, r0
 8002a20:	2000      	movs	r0, #0
 8002a22:	f003 fc41 	bl	80062a8 <SEGGER_SYSVIEW_ShrinkId>
 8002a26:	4602      	mov	r2, r0
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	9100      	str	r1, [sp, #0]
 8002a2e:	4621      	mov	r1, r4
 8002a30:	205c      	movs	r0, #92	; 0x5c
 8002a32:	f002 fffd 	bl	8005a30 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002a36:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3734      	adds	r7, #52	; 0x34
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd90      	pop	{r4, r7, pc}
 8002a40:	e000ed04 	.word	0xe000ed04

08002a44 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a58:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10d      	bne.n	8002a7e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d14d      	bne.n	8002b06 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 ff2a 	bl	80038c8 <xTaskPriorityDisinherit>
 8002a74:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	e043      	b.n	8002b06 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d119      	bne.n	8002ab8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6858      	ldr	r0, [r3, #4]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	68b9      	ldr	r1, [r7, #8]
 8002a90:	f003 fd98 	bl	80065c4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	441a      	add	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d32b      	bcc.n	8002b06 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	e026      	b.n	8002b06 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	68d8      	ldr	r0, [r3, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	68b9      	ldr	r1, [r7, #8]
 8002ac4:	f003 fd7e 	bl	80065c4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	425b      	negs	r3, r3
 8002ad2:	441a      	add	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d207      	bcs.n	8002af4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	425b      	negs	r3, r3
 8002aee:	441a      	add	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d105      	bne.n	8002b06 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002b0e:	697b      	ldr	r3, [r7, #20]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d018      	beq.n	8002b5c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	441a      	add	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d303      	bcc.n	8002b4c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68d9      	ldr	r1, [r3, #12]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	461a      	mov	r2, r3
 8002b56:	6838      	ldr	r0, [r7, #0]
 8002b58:	f003 fd34 	bl	80065c4 <memcpy>
    }
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002b6c:	f001 fc52 	bl	8004414 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b76:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b78:	e011      	b.n	8002b9e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d012      	beq.n	8002ba8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3324      	adds	r3, #36	; 0x24
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fce0 	bl	800354c <xTaskRemoveFromEventList>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002b92:	f000 fdbd 	bl	8003710 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	dce9      	bgt.n	8002b7a <prvUnlockQueue+0x16>
 8002ba6:	e000      	b.n	8002baa <prvUnlockQueue+0x46>
                        break;
 8002ba8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	22ff      	movs	r2, #255	; 0xff
 8002bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002bb2:	f001 fc5f 	bl	8004474 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002bb6:	f001 fc2d 	bl	8004414 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bc0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bc2:	e011      	b.n	8002be8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d012      	beq.n	8002bf2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3310      	adds	r3, #16
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fcbb 	bl	800354c <xTaskRemoveFromEventList>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002bdc:	f000 fd98 	bl	8003710 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002be0:	7bbb      	ldrb	r3, [r7, #14]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002be8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	dce9      	bgt.n	8002bc4 <prvUnlockQueue+0x60>
 8002bf0:	e000      	b.n	8002bf4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002bf2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	22ff      	movs	r2, #255	; 0xff
 8002bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002bfc:	f001 fc3a 	bl	8004474 <vPortExitCritical>
}
 8002c00:	bf00      	nop
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c10:	f001 fc00 	bl	8004414 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d102      	bne.n	8002c22 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	e001      	b.n	8002c26 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c26:	f001 fc25 	bl	8004474 <vPortExitCritical>

    return xReturn;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c3c:	f001 fbea 	bl	8004414 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d102      	bne.n	8002c52 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	e001      	b.n	8002c56 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c56:	f001 fc0d 	bl	8004474 <vPortExitCritical>

    return xReturn;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3710      	adds	r7, #16
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	e01e      	b.n	8002cb2 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c74:	4a13      	ldr	r2, [pc, #76]	; (8002cc4 <vQueueAddToRegistry+0x60>)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d115      	bne.n	8002cac <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c80:	4910      	ldr	r1, [pc, #64]	; (8002cc4 <vQueueAddToRegistry+0x60>)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002c8a:	4a0e      	ldr	r2, [pc, #56]	; (8002cc4 <vQueueAddToRegistry+0x60>)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4413      	add	r3, r2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f003 fb05 	bl	80062a8 <SEGGER_SYSVIEW_ShrinkId>
 8002c9e:	4601      	mov	r1, r0
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	2071      	movs	r0, #113	; 0x71
 8002ca6:	f002 fdf3 	bl	8005890 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002caa:	e006      	b.n	8002cba <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2b07      	cmp	r3, #7
 8002cb6:	d9dd      	bls.n	8002c74 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002cb8:	bf00      	nop
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	200000e0 	.word	0x200000e0

08002cc8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002cd8:	f001 fb9c 	bl	8004414 <vPortEnterCritical>
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ce2:	b25b      	sxtb	r3, r3
 8002ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce8:	d103      	bne.n	8002cf2 <vQueueWaitForMessageRestricted+0x2a>
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cf8:	b25b      	sxtb	r3, r3
 8002cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfe:	d103      	bne.n	8002d08 <vQueueWaitForMessageRestricted+0x40>
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d08:	f001 fbb4 	bl	8004474 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d106      	bne.n	8002d22 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	3324      	adds	r3, #36	; 0x24
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 fbe7 	bl	80034f0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002d22:	6978      	ldr	r0, [r7, #20]
 8002d24:	f7ff ff1e 	bl	8002b64 <prvUnlockQueue>
    }
 8002d28:	bf00      	nop
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08c      	sub	sp, #48	; 0x30
 8002d34:	af04      	add	r7, sp, #16
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f001 fc89 	bl	800465c <pvPortMalloc>
 8002d4a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00e      	beq.n	8002d70 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d52:	2058      	movs	r0, #88	; 0x58
 8002d54:	f001 fc82 	bl	800465c <pvPortMalloc>
 8002d58:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	631a      	str	r2, [r3, #48]	; 0x30
 8002d66:	e005      	b.n	8002d74 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002d68:	6978      	ldr	r0, [r7, #20]
 8002d6a:	f001 fd57 	bl	800481c <vPortFree>
 8002d6e:	e001      	b.n	8002d74 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d013      	beq.n	8002da2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d7a:	88fa      	ldrh	r2, [r7, #6]
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	9303      	str	r3, [sp, #12]
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	9302      	str	r3, [sp, #8]
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d86:	9301      	str	r3, [sp, #4]
 8002d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68b9      	ldr	r1, [r7, #8]
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f80e 	bl	8002db2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002d96:	69f8      	ldr	r0, [r7, #28]
 8002d98:	f000 f8a2 	bl	8002ee0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	61bb      	str	r3, [r7, #24]
 8002da0:	e002      	b.n	8002da8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002da2:	f04f 33ff 	mov.w	r3, #4294967295
 8002da6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002da8:	69bb      	ldr	r3, [r7, #24]
    }
 8002daa:	4618      	mov	r0, r3
 8002dac:	3720      	adds	r7, #32
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b088      	sub	sp, #32
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	461a      	mov	r2, r3
 8002dca:	21a5      	movs	r1, #165	; 0xa5
 8002dcc:	f003 fc08 	bl	80065e0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	f023 0307 	bic.w	r3, r3, #7
 8002de8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00a      	beq.n	8002e0a <prvInitialiseNewTask+0x58>
        __asm volatile
 8002df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	617b      	str	r3, [r7, #20]
    }
 8002e06:	bf00      	nop
 8002e08:	e7fe      	b.n	8002e08 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d01f      	beq.n	8002e50 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e10:	2300      	movs	r3, #0
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	e012      	b.n	8002e3c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	7819      	ldrb	r1, [r3, #0]
 8002e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	4413      	add	r3, r2
 8002e24:	3334      	adds	r3, #52	; 0x34
 8002e26:	460a      	mov	r2, r1
 8002e28:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	4413      	add	r3, r2
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d006      	beq.n	8002e44 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	61fb      	str	r3, [r7, #28]
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	2b09      	cmp	r3, #9
 8002e40:	d9e9      	bls.n	8002e16 <prvInitialiseNewTask+0x64>
 8002e42:	e000      	b.n	8002e46 <prvInitialiseNewTask+0x94>
            {
                break;
 8002e44:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002e4e:	e003      	b.n	8002e58 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d901      	bls.n	8002e62 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e5e:	2304      	movs	r3, #4
 8002e60:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e66:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e6c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e70:	2200      	movs	r2, #0
 8002e72:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e76:	3304      	adds	r3, #4
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff f96b 	bl	8002154 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e80:	3318      	adds	r3, #24
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff f966 	bl	8002154 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e8c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	f1c3 0205 	rsb	r2, r3, #5
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e9c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea0:	3350      	adds	r3, #80	; 0x50
 8002ea2:	2204      	movs	r2, #4
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f003 fb9a 	bl	80065e0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eae:	3354      	adds	r3, #84	; 0x54
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f003 fb93 	bl	80065e0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	68f9      	ldr	r1, [r7, #12]
 8002ebe:	69b8      	ldr	r0, [r7, #24]
 8002ec0:	f001 f8fe 	bl	80040c0 <pxPortInitialiseStack>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ed6:	bf00      	nop
 8002ed8:	3720      	adds	r7, #32
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002ee0:	b5b0      	push	{r4, r5, r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002ee8:	f001 fa94 	bl	8004414 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002eec:	4b3b      	ldr	r3, [pc, #236]	; (8002fdc <prvAddNewTaskToReadyList+0xfc>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	4a3a      	ldr	r2, [pc, #232]	; (8002fdc <prvAddNewTaskToReadyList+0xfc>)
 8002ef4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002ef6:	4b3a      	ldr	r3, [pc, #232]	; (8002fe0 <prvAddNewTaskToReadyList+0x100>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002efe:	4a38      	ldr	r2, [pc, #224]	; (8002fe0 <prvAddNewTaskToReadyList+0x100>)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f04:	4b35      	ldr	r3, [pc, #212]	; (8002fdc <prvAddNewTaskToReadyList+0xfc>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d110      	bne.n	8002f2e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002f0c:	f000 fc24 	bl	8003758 <prvInitialiseTaskLists>
 8002f10:	e00d      	b.n	8002f2e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002f12:	4b34      	ldr	r3, [pc, #208]	; (8002fe4 <prvAddNewTaskToReadyList+0x104>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d109      	bne.n	8002f2e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f1a:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <prvAddNewTaskToReadyList+0x100>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d802      	bhi.n	8002f2e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002f28:	4a2d      	ldr	r2, [pc, #180]	; (8002fe0 <prvAddNewTaskToReadyList+0x100>)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002f2e:	4b2e      	ldr	r3, [pc, #184]	; (8002fe8 <prvAddNewTaskToReadyList+0x108>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	3301      	adds	r3, #1
 8002f34:	4a2c      	ldr	r2, [pc, #176]	; (8002fe8 <prvAddNewTaskToReadyList+0x108>)
 8002f36:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f38:	4b2b      	ldr	r3, [pc, #172]	; (8002fe8 <prvAddNewTaskToReadyList+0x108>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d016      	beq.n	8002f74 <prvAddNewTaskToReadyList+0x94>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f003 f8e7 	bl	800611c <SEGGER_SYSVIEW_OnTaskCreate>
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	461d      	mov	r5, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	461c      	mov	r4, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	1ae3      	subs	r3, r4, r3
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	462b      	mov	r3, r5
 8002f70:	f001 fe22 	bl	8004bb8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f003 f954 	bl	8006224 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	2201      	movs	r2, #1
 8002f82:	409a      	lsls	r2, r3
 8002f84:	4b19      	ldr	r3, [pc, #100]	; (8002fec <prvAddNewTaskToReadyList+0x10c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	4a18      	ldr	r2, [pc, #96]	; (8002fec <prvAddNewTaskToReadyList+0x10c>)
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f92:	4613      	mov	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4a15      	ldr	r2, [pc, #84]	; (8002ff0 <prvAddNewTaskToReadyList+0x110>)
 8002f9c:	441a      	add	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	f7ff f8e2 	bl	800216e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002faa:	f001 fa63 	bl	8004474 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002fae:	4b0d      	ldr	r3, [pc, #52]	; (8002fe4 <prvAddNewTaskToReadyList+0x104>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00e      	beq.n	8002fd4 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fb6:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <prvAddNewTaskToReadyList+0x100>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d207      	bcs.n	8002fd4 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <prvAddNewTaskToReadyList+0x114>)
 8002fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bdb0      	pop	{r4, r5, r7, pc}
 8002fdc:	200001f8 	.word	0x200001f8
 8002fe0:	20000120 	.word	0x20000120
 8002fe4:	20000204 	.word	0x20000204
 8002fe8:	20000214 	.word	0x20000214
 8002fec:	20000200 	.word	0x20000200
 8002ff0:	20000124 	.word	0x20000124
 8002ff4:	e000ed04 	.word	0xe000ed04

08002ff8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002ffe:	4b27      	ldr	r3, [pc, #156]	; (800309c <vTaskStartScheduler+0xa4>)
 8003000:	9301      	str	r3, [sp, #4]
 8003002:	2300      	movs	r3, #0
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	2300      	movs	r3, #0
 8003008:	2282      	movs	r2, #130	; 0x82
 800300a:	4925      	ldr	r1, [pc, #148]	; (80030a0 <vTaskStartScheduler+0xa8>)
 800300c:	4825      	ldr	r0, [pc, #148]	; (80030a4 <vTaskStartScheduler+0xac>)
 800300e:	f7ff fe8f 	bl	8002d30 <xTaskCreate>
 8003012:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d102      	bne.n	8003020 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800301a:	f000 fd3f 	bl	8003a9c <xTimerCreateTimerTask>
 800301e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d124      	bne.n	8003070 <vTaskStartScheduler+0x78>
        __asm volatile
 8003026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	60bb      	str	r3, [r7, #8]
    }
 8003038:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800303a:	4b1b      	ldr	r3, [pc, #108]	; (80030a8 <vTaskStartScheduler+0xb0>)
 800303c:	f04f 32ff 	mov.w	r2, #4294967295
 8003040:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003042:	4b1a      	ldr	r3, [pc, #104]	; (80030ac <vTaskStartScheduler+0xb4>)
 8003044:	2201      	movs	r2, #1
 8003046:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003048:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <vTaskStartScheduler+0xb8>)
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800304e:	4b19      	ldr	r3, [pc, #100]	; (80030b4 <vTaskStartScheduler+0xbc>)
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <vTaskStartScheduler+0xa4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d102      	bne.n	8003060 <vTaskStartScheduler+0x68>
 800305a:	f003 f843 	bl	80060e4 <SEGGER_SYSVIEW_OnIdle>
 800305e:	e004      	b.n	800306a <vTaskStartScheduler+0x72>
 8003060:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <vTaskStartScheduler+0xbc>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4618      	mov	r0, r3
 8003066:	f003 f89b 	bl	80061a0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800306a:	f001 f931 	bl	80042d0 <xPortStartScheduler>
 800306e:	e00e      	b.n	800308e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003076:	d10a      	bne.n	800308e <vTaskStartScheduler+0x96>
        __asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	607b      	str	r3, [r7, #4]
    }
 800308a:	bf00      	nop
 800308c:	e7fe      	b.n	800308c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <vTaskStartScheduler+0xc0>)
 8003090:	681b      	ldr	r3, [r3, #0]
}
 8003092:	bf00      	nop
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	2000021c 	.word	0x2000021c
 80030a0:	08007024 	.word	0x08007024
 80030a4:	08003729 	.word	0x08003729
 80030a8:	20000218 	.word	0x20000218
 80030ac:	20000204 	.word	0x20000204
 80030b0:	200001fc 	.word	0x200001fc
 80030b4:	20000120 	.word	0x20000120
 80030b8:	2000000c 	.word	0x2000000c

080030bc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <vTaskSuspendAll+0x18>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3301      	adds	r3, #1
 80030c6:	4a03      	ldr	r2, [pc, #12]	; (80030d4 <vTaskSuspendAll+0x18>)
 80030c8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80030ca:	bf00      	nop
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	20000220 	.word	0x20000220

080030d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80030e6:	4b43      	ldr	r3, [pc, #268]	; (80031f4 <xTaskResumeAll+0x11c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10a      	bne.n	8003104 <xTaskResumeAll+0x2c>
        __asm volatile
 80030ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	603b      	str	r3, [r7, #0]
    }
 8003100:	bf00      	nop
 8003102:	e7fe      	b.n	8003102 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003104:	f001 f986 	bl	8004414 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003108:	4b3a      	ldr	r3, [pc, #232]	; (80031f4 <xTaskResumeAll+0x11c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3b01      	subs	r3, #1
 800310e:	4a39      	ldr	r2, [pc, #228]	; (80031f4 <xTaskResumeAll+0x11c>)
 8003110:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003112:	4b38      	ldr	r3, [pc, #224]	; (80031f4 <xTaskResumeAll+0x11c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d165      	bne.n	80031e6 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800311a:	4b37      	ldr	r3, [pc, #220]	; (80031f8 <xTaskResumeAll+0x120>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d061      	beq.n	80031e6 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003122:	e032      	b.n	800318a <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003124:	4b35      	ldr	r3, [pc, #212]	; (80031fc <xTaskResumeAll+0x124>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	3318      	adds	r3, #24
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff f879 	bl	8002228 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3304      	adds	r3, #4
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff f874 	bl	8002228 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4618      	mov	r0, r3
 8003144:	f003 f86e 	bl	8006224 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	2201      	movs	r2, #1
 800314e:	409a      	lsls	r2, r3
 8003150:	4b2b      	ldr	r3, [pc, #172]	; (8003200 <xTaskResumeAll+0x128>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4313      	orrs	r3, r2
 8003156:	4a2a      	ldr	r2, [pc, #168]	; (8003200 <xTaskResumeAll+0x128>)
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4a27      	ldr	r2, [pc, #156]	; (8003204 <xTaskResumeAll+0x12c>)
 8003168:	441a      	add	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	3304      	adds	r3, #4
 800316e:	4619      	mov	r1, r3
 8003170:	4610      	mov	r0, r2
 8003172:	f7fe fffc 	bl	800216e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317a:	4b23      	ldr	r3, [pc, #140]	; (8003208 <xTaskResumeAll+0x130>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	429a      	cmp	r2, r3
 8003182:	d302      	bcc.n	800318a <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8003184:	4b21      	ldr	r3, [pc, #132]	; (800320c <xTaskResumeAll+0x134>)
 8003186:	2201      	movs	r2, #1
 8003188:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800318a:	4b1c      	ldr	r3, [pc, #112]	; (80031fc <xTaskResumeAll+0x124>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1c8      	bne.n	8003124 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003198:	f000 fb5c 	bl	8003854 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800319c:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <xTaskResumeAll+0x138>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d010      	beq.n	80031ca <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80031a8:	f000 f858 	bl	800325c <xTaskIncrementTick>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80031b2:	4b16      	ldr	r3, [pc, #88]	; (800320c <xTaskResumeAll+0x134>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1f1      	bne.n	80031a8 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80031c4:	4b12      	ldr	r3, [pc, #72]	; (8003210 <xTaskResumeAll+0x138>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80031ca:	4b10      	ldr	r3, [pc, #64]	; (800320c <xTaskResumeAll+0x134>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d009      	beq.n	80031e6 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80031d2:	2301      	movs	r3, #1
 80031d4:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80031d6:	4b0f      	ldr	r3, [pc, #60]	; (8003214 <xTaskResumeAll+0x13c>)
 80031d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80031e6:	f001 f945 	bl	8004474 <vPortExitCritical>

    return xAlreadyYielded;
 80031ea:	68bb      	ldr	r3, [r7, #8]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	20000220 	.word	0x20000220
 80031f8:	200001f8 	.word	0x200001f8
 80031fc:	200001b8 	.word	0x200001b8
 8003200:	20000200 	.word	0x20000200
 8003204:	20000124 	.word	0x20000124
 8003208:	20000120 	.word	0x20000120
 800320c:	2000020c 	.word	0x2000020c
 8003210:	20000208 	.word	0x20000208
 8003214:	e000ed04 	.word	0xe000ed04

08003218 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800321e:	4b05      	ldr	r3, [pc, #20]	; (8003234 <xTaskGetTickCount+0x1c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003224:	687b      	ldr	r3, [r7, #4]
}
 8003226:	4618      	mov	r0, r3
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	200001fc 	.word	0x200001fc

08003238 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800323e:	f001 f9cd 	bl	80045dc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003242:	2300      	movs	r3, #0
 8003244:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003246:	4b04      	ldr	r3, [pc, #16]	; (8003258 <xTaskGetTickCountFromISR+0x20>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800324c:	683b      	ldr	r3, [r7, #0]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	200001fc 	.word	0x200001fc

0800325c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003266:	4b50      	ldr	r3, [pc, #320]	; (80033a8 <xTaskIncrementTick+0x14c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	f040 8092 	bne.w	8003394 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003270:	4b4e      	ldr	r3, [pc, #312]	; (80033ac <xTaskIncrementTick+0x150>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	3301      	adds	r3, #1
 8003276:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003278:	4a4c      	ldr	r2, [pc, #304]	; (80033ac <xTaskIncrementTick+0x150>)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d120      	bne.n	80032c6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003284:	4b4a      	ldr	r3, [pc, #296]	; (80033b0 <xTaskIncrementTick+0x154>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <xTaskIncrementTick+0x48>
        __asm volatile
 800328e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	603b      	str	r3, [r7, #0]
    }
 80032a0:	bf00      	nop
 80032a2:	e7fe      	b.n	80032a2 <xTaskIncrementTick+0x46>
 80032a4:	4b42      	ldr	r3, [pc, #264]	; (80033b0 <xTaskIncrementTick+0x154>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	4b42      	ldr	r3, [pc, #264]	; (80033b4 <xTaskIncrementTick+0x158>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a40      	ldr	r2, [pc, #256]	; (80033b0 <xTaskIncrementTick+0x154>)
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	4a40      	ldr	r2, [pc, #256]	; (80033b4 <xTaskIncrementTick+0x158>)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	4b3f      	ldr	r3, [pc, #252]	; (80033b8 <xTaskIncrementTick+0x15c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	3301      	adds	r3, #1
 80032be:	4a3e      	ldr	r2, [pc, #248]	; (80033b8 <xTaskIncrementTick+0x15c>)
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	f000 fac7 	bl	8003854 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80032c6:	4b3d      	ldr	r3, [pc, #244]	; (80033bc <xTaskIncrementTick+0x160>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d34c      	bcc.n	800336a <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032d0:	4b37      	ldr	r3, [pc, #220]	; (80033b0 <xTaskIncrementTick+0x154>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d104      	bne.n	80032e4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032da:	4b38      	ldr	r3, [pc, #224]	; (80033bc <xTaskIncrementTick+0x160>)
 80032dc:	f04f 32ff 	mov.w	r2, #4294967295
 80032e0:	601a      	str	r2, [r3, #0]
                    break;
 80032e2:	e042      	b.n	800336a <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032e4:	4b32      	ldr	r3, [pc, #200]	; (80033b0 <xTaskIncrementTick+0x154>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d203      	bcs.n	8003304 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80032fc:	4a2f      	ldr	r2, [pc, #188]	; (80033bc <xTaskIncrementTick+0x160>)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003302:	e032      	b.n	800336a <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	3304      	adds	r3, #4
 8003308:	4618      	mov	r0, r3
 800330a:	f7fe ff8d 	bl	8002228 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	2b00      	cmp	r3, #0
 8003314:	d004      	beq.n	8003320 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	3318      	adds	r3, #24
 800331a:	4618      	mov	r0, r3
 800331c:	f7fe ff84 	bl	8002228 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4618      	mov	r0, r3
 8003324:	f002 ff7e 	bl	8006224 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	2201      	movs	r2, #1
 800332e:	409a      	lsls	r2, r3
 8003330:	4b23      	ldr	r3, [pc, #140]	; (80033c0 <xTaskIncrementTick+0x164>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4313      	orrs	r3, r2
 8003336:	4a22      	ldr	r2, [pc, #136]	; (80033c0 <xTaskIncrementTick+0x164>)
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4a1f      	ldr	r2, [pc, #124]	; (80033c4 <xTaskIncrementTick+0x168>)
 8003348:	441a      	add	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	3304      	adds	r3, #4
 800334e:	4619      	mov	r1, r3
 8003350:	4610      	mov	r0, r2
 8003352:	f7fe ff0c 	bl	800216e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335a:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <xTaskIncrementTick+0x16c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	429a      	cmp	r2, r3
 8003362:	d3b5      	bcc.n	80032d0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003364:	2301      	movs	r3, #1
 8003366:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003368:	e7b2      	b.n	80032d0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800336a:	4b17      	ldr	r3, [pc, #92]	; (80033c8 <xTaskIncrementTick+0x16c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003370:	4914      	ldr	r1, [pc, #80]	; (80033c4 <xTaskIncrementTick+0x168>)
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d901      	bls.n	8003386 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8003382:	2301      	movs	r3, #1
 8003384:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003386:	4b11      	ldr	r3, [pc, #68]	; (80033cc <xTaskIncrementTick+0x170>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d007      	beq.n	800339e <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 800338e:	2301      	movs	r3, #1
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	e004      	b.n	800339e <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003394:	4b0e      	ldr	r3, [pc, #56]	; (80033d0 <xTaskIncrementTick+0x174>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3301      	adds	r3, #1
 800339a:	4a0d      	ldr	r2, [pc, #52]	; (80033d0 <xTaskIncrementTick+0x174>)
 800339c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800339e:	697b      	ldr	r3, [r7, #20]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20000220 	.word	0x20000220
 80033ac:	200001fc 	.word	0x200001fc
 80033b0:	200001b0 	.word	0x200001b0
 80033b4:	200001b4 	.word	0x200001b4
 80033b8:	20000210 	.word	0x20000210
 80033bc:	20000218 	.word	0x20000218
 80033c0:	20000200 	.word	0x20000200
 80033c4:	20000124 	.word	0x20000124
 80033c8:	20000120 	.word	0x20000120
 80033cc:	2000020c 	.word	0x2000020c
 80033d0:	20000208 	.word	0x20000208

080033d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033da:	4b2d      	ldr	r3, [pc, #180]	; (8003490 <vTaskSwitchContext+0xbc>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80033e2:	4b2c      	ldr	r3, [pc, #176]	; (8003494 <vTaskSwitchContext+0xc0>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80033e8:	e04d      	b.n	8003486 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80033ea:	4b2a      	ldr	r3, [pc, #168]	; (8003494 <vTaskSwitchContext+0xc0>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033f0:	4b29      	ldr	r3, [pc, #164]	; (8003498 <vTaskSwitchContext+0xc4>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	fab3 f383 	clz	r3, r3
 80033fc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80033fe:	7afb      	ldrb	r3, [r7, #11]
 8003400:	f1c3 031f 	rsb	r3, r3, #31
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	4925      	ldr	r1, [pc, #148]	; (800349c <vTaskSwitchContext+0xc8>)
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	440b      	add	r3, r1
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10a      	bne.n	8003430 <vTaskSwitchContext+0x5c>
        __asm volatile
 800341a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341e:	f383 8811 	msr	BASEPRI, r3
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	607b      	str	r3, [r7, #4]
    }
 800342c:	bf00      	nop
 800342e:	e7fe      	b.n	800342e <vTaskSwitchContext+0x5a>
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4a18      	ldr	r2, [pc, #96]	; (800349c <vTaskSwitchContext+0xc8>)
 800343c:	4413      	add	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	3308      	adds	r3, #8
 8003452:	429a      	cmp	r2, r3
 8003454:	d104      	bne.n	8003460 <vTaskSwitchContext+0x8c>
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	605a      	str	r2, [r3, #4]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	4a0e      	ldr	r2, [pc, #56]	; (80034a0 <vTaskSwitchContext+0xcc>)
 8003468:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800346a:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <vTaskSwitchContext+0xcc>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <vTaskSwitchContext+0xd0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d102      	bne.n	800347c <vTaskSwitchContext+0xa8>
 8003476:	f002 fe35 	bl	80060e4 <SEGGER_SYSVIEW_OnIdle>
}
 800347a:	e004      	b.n	8003486 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800347c:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <vTaskSwitchContext+0xcc>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f002 fe8d 	bl	80061a0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003486:	bf00      	nop
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000220 	.word	0x20000220
 8003494:	2000020c 	.word	0x2000020c
 8003498:	20000200 	.word	0x20000200
 800349c:	20000124 	.word	0x20000124
 80034a0:	20000120 	.word	0x20000120
 80034a4:	2000021c 	.word	0x2000021c

080034a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10a      	bne.n	80034ce <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80034b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034bc:	f383 8811 	msr	BASEPRI, r3
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	60fb      	str	r3, [r7, #12]
    }
 80034ca:	bf00      	nop
 80034cc:	e7fe      	b.n	80034cc <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034ce:	4b07      	ldr	r3, [pc, #28]	; (80034ec <vTaskPlaceOnEventList+0x44>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3318      	adds	r3, #24
 80034d4:	4619      	mov	r1, r3
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fe fe6d 	bl	80021b6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034dc:	2101      	movs	r1, #1
 80034de:	6838      	ldr	r0, [r7, #0]
 80034e0:	f000 fa76 	bl	80039d0 <prvAddCurrentTaskToDelayedList>
}
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20000120 	.word	0x20000120

080034f0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10a      	bne.n	8003518 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	617b      	str	r3, [r7, #20]
    }
 8003514:	bf00      	nop
 8003516:	e7fe      	b.n	8003516 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003518:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <vTaskPlaceOnEventListRestricted+0x58>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3318      	adds	r3, #24
 800351e:	4619      	mov	r1, r3
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f7fe fe24 	bl	800216e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 800352c:	f04f 33ff 	mov.w	r3, #4294967295
 8003530:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003532:	2024      	movs	r0, #36	; 0x24
 8003534:	f002 f952 	bl	80057dc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	68b8      	ldr	r0, [r7, #8]
 800353c:	f000 fa48 	bl	80039d0 <prvAddCurrentTaskToDelayedList>
    }
 8003540:	bf00      	nop
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000120 	.word	0x20000120

0800354c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10a      	bne.n	8003578 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003566:	f383 8811 	msr	BASEPRI, r3
 800356a:	f3bf 8f6f 	isb	sy
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	60fb      	str	r3, [r7, #12]
    }
 8003574:	bf00      	nop
 8003576:	e7fe      	b.n	8003576 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	3318      	adds	r3, #24
 800357c:	4618      	mov	r0, r3
 800357e:	f7fe fe53 	bl	8002228 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003582:	4b1f      	ldr	r3, [pc, #124]	; (8003600 <xTaskRemoveFromEventList+0xb4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d120      	bne.n	80035cc <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	3304      	adds	r3, #4
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe fe4a 	bl	8002228 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4618      	mov	r0, r3
 8003598:	f002 fe44 	bl	8006224 <SEGGER_SYSVIEW_OnTaskStartReady>
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	2201      	movs	r2, #1
 80035a2:	409a      	lsls	r2, r3
 80035a4:	4b17      	ldr	r3, [pc, #92]	; (8003604 <xTaskRemoveFromEventList+0xb8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	4a16      	ldr	r2, [pc, #88]	; (8003604 <xTaskRemoveFromEventList+0xb8>)
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4a13      	ldr	r2, [pc, #76]	; (8003608 <xTaskRemoveFromEventList+0xbc>)
 80035bc:	441a      	add	r2, r3
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	3304      	adds	r3, #4
 80035c2:	4619      	mov	r1, r3
 80035c4:	4610      	mov	r0, r2
 80035c6:	f7fe fdd2 	bl	800216e <vListInsertEnd>
 80035ca:	e005      	b.n	80035d8 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	3318      	adds	r3, #24
 80035d0:	4619      	mov	r1, r3
 80035d2:	480e      	ldr	r0, [pc, #56]	; (800360c <xTaskRemoveFromEventList+0xc0>)
 80035d4:	f7fe fdcb 	bl	800216e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035dc:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <xTaskRemoveFromEventList+0xc4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d905      	bls.n	80035f2 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80035e6:	2301      	movs	r3, #1
 80035e8:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80035ea:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <xTaskRemoveFromEventList+0xc8>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	e001      	b.n	80035f6 <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80035f6:	697b      	ldr	r3, [r7, #20]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	20000220 	.word	0x20000220
 8003604:	20000200 	.word	0x20000200
 8003608:	20000124 	.word	0x20000124
 800360c:	200001b8 	.word	0x200001b8
 8003610:	20000120 	.word	0x20000120
 8003614:	2000020c 	.word	0x2000020c

08003618 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <vTaskInternalSetTimeOutState+0x24>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003628:	4b05      	ldr	r3, [pc, #20]	; (8003640 <vTaskInternalSetTimeOutState+0x28>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	605a      	str	r2, [r3, #4]
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	20000210 	.word	0x20000210
 8003640:	200001fc 	.word	0x200001fc

08003644 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10a      	bne.n	800366a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
 8003664:	613b      	str	r3, [r7, #16]
    }
 8003666:	bf00      	nop
 8003668:	e7fe      	b.n	8003668 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	60fb      	str	r3, [r7, #12]
    }
 8003682:	bf00      	nop
 8003684:	e7fe      	b.n	8003684 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003686:	f000 fec5 	bl	8004414 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800368a:	4b1f      	ldr	r3, [pc, #124]	; (8003708 <xTaskCheckForTimeOut+0xc4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a2:	d102      	bne.n	80036aa <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61fb      	str	r3, [r7, #28]
 80036a8:	e026      	b.n	80036f8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4b17      	ldr	r3, [pc, #92]	; (800370c <xTaskCheckForTimeOut+0xc8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d00a      	beq.n	80036cc <xTaskCheckForTimeOut+0x88>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d305      	bcc.n	80036cc <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80036c0:	2301      	movs	r3, #1
 80036c2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	e015      	b.n	80036f8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d20b      	bcs.n	80036ee <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	1ad2      	subs	r2, r2, r3
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff ff98 	bl	8003618 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61fb      	str	r3, [r7, #28]
 80036ec:	e004      	b.n	80036f8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80036f4:	2301      	movs	r3, #1
 80036f6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80036f8:	f000 febc 	bl	8004474 <vPortExitCritical>

    return xReturn;
 80036fc:	69fb      	ldr	r3, [r7, #28]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3720      	adds	r7, #32
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	200001fc 	.word	0x200001fc
 800370c:	20000210 	.word	0x20000210

08003710 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003714:	4b03      	ldr	r3, [pc, #12]	; (8003724 <vTaskMissedYield+0x14>)
 8003716:	2201      	movs	r2, #1
 8003718:	601a      	str	r2, [r3, #0]
}
 800371a:	bf00      	nop
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	2000020c 	.word	0x2000020c

08003728 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003730:	f000 f852 	bl	80037d8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <prvIdleTask+0x28>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d9f9      	bls.n	8003730 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <prvIdleTask+0x2c>)
 800373e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800374c:	e7f0      	b.n	8003730 <prvIdleTask+0x8>
 800374e:	bf00      	nop
 8003750:	20000124 	.word	0x20000124
 8003754:	e000ed04 	.word	0xe000ed04

08003758 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800375e:	2300      	movs	r3, #0
 8003760:	607b      	str	r3, [r7, #4]
 8003762:	e00c      	b.n	800377e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4a12      	ldr	r2, [pc, #72]	; (80037b8 <prvInitialiseTaskLists+0x60>)
 8003770:	4413      	add	r3, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe fcce 	bl	8002114 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3301      	adds	r3, #1
 800377c:	607b      	str	r3, [r7, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b04      	cmp	r3, #4
 8003782:	d9ef      	bls.n	8003764 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003784:	480d      	ldr	r0, [pc, #52]	; (80037bc <prvInitialiseTaskLists+0x64>)
 8003786:	f7fe fcc5 	bl	8002114 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800378a:	480d      	ldr	r0, [pc, #52]	; (80037c0 <prvInitialiseTaskLists+0x68>)
 800378c:	f7fe fcc2 	bl	8002114 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003790:	480c      	ldr	r0, [pc, #48]	; (80037c4 <prvInitialiseTaskLists+0x6c>)
 8003792:	f7fe fcbf 	bl	8002114 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003796:	480c      	ldr	r0, [pc, #48]	; (80037c8 <prvInitialiseTaskLists+0x70>)
 8003798:	f7fe fcbc 	bl	8002114 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800379c:	480b      	ldr	r0, [pc, #44]	; (80037cc <prvInitialiseTaskLists+0x74>)
 800379e:	f7fe fcb9 	bl	8002114 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80037a2:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <prvInitialiseTaskLists+0x78>)
 80037a4:	4a05      	ldr	r2, [pc, #20]	; (80037bc <prvInitialiseTaskLists+0x64>)
 80037a6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037a8:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <prvInitialiseTaskLists+0x7c>)
 80037aa:	4a05      	ldr	r2, [pc, #20]	; (80037c0 <prvInitialiseTaskLists+0x68>)
 80037ac:	601a      	str	r2, [r3, #0]
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000124 	.word	0x20000124
 80037bc:	20000188 	.word	0x20000188
 80037c0:	2000019c 	.word	0x2000019c
 80037c4:	200001b8 	.word	0x200001b8
 80037c8:	200001cc 	.word	0x200001cc
 80037cc:	200001e4 	.word	0x200001e4
 80037d0:	200001b0 	.word	0x200001b0
 80037d4:	200001b4 	.word	0x200001b4

080037d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037de:	e019      	b.n	8003814 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80037e0:	f000 fe18 	bl	8004414 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037e4:	4b10      	ldr	r3, [pc, #64]	; (8003828 <prvCheckTasksWaitingTermination+0x50>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fe fd19 	bl	8002228 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <prvCheckTasksWaitingTermination+0x54>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	4a0b      	ldr	r2, [pc, #44]	; (800382c <prvCheckTasksWaitingTermination+0x54>)
 80037fe:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <prvCheckTasksWaitingTermination+0x58>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3b01      	subs	r3, #1
 8003806:	4a0a      	ldr	r2, [pc, #40]	; (8003830 <prvCheckTasksWaitingTermination+0x58>)
 8003808:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800380a:	f000 fe33 	bl	8004474 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f810 	bl	8003834 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003814:	4b06      	ldr	r3, [pc, #24]	; (8003830 <prvCheckTasksWaitingTermination+0x58>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1e1      	bne.n	80037e0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800381c:	bf00      	nop
 800381e:	bf00      	nop
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	200001cc 	.word	0x200001cc
 800382c:	200001f8 	.word	0x200001f8
 8003830:	200001e0 	.word	0x200001e0

08003834 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	4618      	mov	r0, r3
 8003842:	f000 ffeb 	bl	800481c <vPortFree>
                vPortFree( pxTCB );
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 ffe8 	bl	800481c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800384c:	bf00      	nop
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003858:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <prvResetNextTaskUnblockTime+0x30>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d104      	bne.n	800386c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003862:	4b09      	ldr	r3, [pc, #36]	; (8003888 <prvResetNextTaskUnblockTime+0x34>)
 8003864:	f04f 32ff 	mov.w	r2, #4294967295
 8003868:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800386a:	e005      	b.n	8003878 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <prvResetNextTaskUnblockTime+0x30>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a04      	ldr	r2, [pc, #16]	; (8003888 <prvResetNextTaskUnblockTime+0x34>)
 8003876:	6013      	str	r3, [r2, #0]
}
 8003878:	bf00      	nop
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	200001b0 	.word	0x200001b0
 8003888:	20000218 	.word	0x20000218

0800388c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003892:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <xTaskGetSchedulerState+0x34>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d102      	bne.n	80038a0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800389a:	2301      	movs	r3, #1
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	e008      	b.n	80038b2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038a0:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <xTaskGetSchedulerState+0x38>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d102      	bne.n	80038ae <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80038a8:	2302      	movs	r3, #2
 80038aa:	607b      	str	r3, [r7, #4]
 80038ac:	e001      	b.n	80038b2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80038ae:	2300      	movs	r3, #0
 80038b0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80038b2:	687b      	ldr	r3, [r7, #4]
    }
 80038b4:	4618      	mov	r0, r3
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	20000204 	.word	0x20000204
 80038c4:	20000220 	.word	0x20000220

080038c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80038d4:	2300      	movs	r3, #0
 80038d6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d06c      	beq.n	80039b8 <xTaskPriorityDisinherit+0xf0>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80038de:	4b39      	ldr	r3, [pc, #228]	; (80039c4 <xTaskPriorityDisinherit+0xfc>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d00a      	beq.n	80038fe <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80038e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ec:	f383 8811 	msr	BASEPRI, r3
 80038f0:	f3bf 8f6f 	isb	sy
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	60fb      	str	r3, [r7, #12]
    }
 80038fa:	bf00      	nop
 80038fc:	e7fe      	b.n	80038fc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10a      	bne.n	800391c <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390a:	f383 8811 	msr	BASEPRI, r3
 800390e:	f3bf 8f6f 	isb	sy
 8003912:	f3bf 8f4f 	dsb	sy
 8003916:	60bb      	str	r3, [r7, #8]
    }
 8003918:	bf00      	nop
 800391a:	e7fe      	b.n	800391a <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003920:	1e5a      	subs	r2, r3, #1
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800392e:	429a      	cmp	r2, r3
 8003930:	d042      	beq.n	80039b8 <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003936:	2b00      	cmp	r3, #0
 8003938:	d13e      	bne.n	80039b8 <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	3304      	adds	r3, #4
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe fc72 	bl	8002228 <uxListRemove>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10a      	bne.n	8003960 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394e:	2201      	movs	r2, #1
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	43da      	mvns	r2, r3
 8003956:	4b1c      	ldr	r3, [pc, #112]	; (80039c8 <xTaskPriorityDisinherit+0x100>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4013      	ands	r3, r2
 800395c:	4a1a      	ldr	r2, [pc, #104]	; (80039c8 <xTaskPriorityDisinherit+0x100>)
 800395e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4619      	mov	r1, r3
 8003964:	204a      	movs	r0, #74	; 0x4a
 8003966:	f001 ff57 	bl	8005818 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003976:	f1c3 0205 	rsb	r2, r3, #5
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4618      	mov	r0, r3
 8003982:	f002 fc4f 	bl	8006224 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398a:	2201      	movs	r2, #1
 800398c:	409a      	lsls	r2, r3
 800398e:	4b0e      	ldr	r3, [pc, #56]	; (80039c8 <xTaskPriorityDisinherit+0x100>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4313      	orrs	r3, r2
 8003994:	4a0c      	ldr	r2, [pc, #48]	; (80039c8 <xTaskPriorityDisinherit+0x100>)
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4a09      	ldr	r2, [pc, #36]	; (80039cc <xTaskPriorityDisinherit+0x104>)
 80039a6:	441a      	add	r2, r3
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	3304      	adds	r3, #4
 80039ac:	4619      	mov	r1, r3
 80039ae:	4610      	mov	r0, r2
 80039b0:	f7fe fbdd 	bl	800216e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80039b4:	2301      	movs	r3, #1
 80039b6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80039b8:	697b      	ldr	r3, [r7, #20]
    }
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20000120 	.word	0x20000120
 80039c8:	20000200 	.word	0x20000200
 80039cc:	20000124 	.word	0x20000124

080039d0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80039da:	4b29      	ldr	r3, [pc, #164]	; (8003a80 <prvAddCurrentTaskToDelayedList+0xb0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039e0:	4b28      	ldr	r3, [pc, #160]	; (8003a84 <prvAddCurrentTaskToDelayedList+0xb4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3304      	adds	r3, #4
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fe fc1e 	bl	8002228 <uxListRemove>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10b      	bne.n	8003a0a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80039f2:	4b24      	ldr	r3, [pc, #144]	; (8003a84 <prvAddCurrentTaskToDelayedList+0xb4>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	2201      	movs	r2, #1
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43da      	mvns	r2, r3
 8003a00:	4b21      	ldr	r3, [pc, #132]	; (8003a88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4013      	ands	r3, r2
 8003a06:	4a20      	ldr	r2, [pc, #128]	; (8003a88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a08:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a10:	d10a      	bne.n	8003a28 <prvAddCurrentTaskToDelayedList+0x58>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a18:	4b1a      	ldr	r3, [pc, #104]	; (8003a84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	4619      	mov	r1, r3
 8003a20:	481a      	ldr	r0, [pc, #104]	; (8003a8c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003a22:	f7fe fba4 	bl	800216e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003a26:	e026      	b.n	8003a76 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a30:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d209      	bcs.n	8003a54 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a40:	4b13      	ldr	r3, [pc, #76]	; (8003a90 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3304      	adds	r3, #4
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	f7fe fbb2 	bl	80021b6 <vListInsert>
}
 8003a52:	e010      	b.n	8003a76 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a54:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4610      	mov	r0, r2
 8003a62:	f7fe fba8 	bl	80021b6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003a66:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d202      	bcs.n	8003a76 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8003a70:	4a09      	ldr	r2, [pc, #36]	; (8003a98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	6013      	str	r3, [r2, #0]
}
 8003a76:	bf00      	nop
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	200001fc 	.word	0x200001fc
 8003a84:	20000120 	.word	0x20000120
 8003a88:	20000200 	.word	0x20000200
 8003a8c:	200001e4 	.word	0x200001e4
 8003a90:	200001b4 	.word	0x200001b4
 8003a94:	200001b0 	.word	0x200001b0
 8003a98:	20000218 	.word	0x20000218

08003a9c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003aa6:	f000 fad5 	bl	8004054 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003aaa:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <xTimerCreateTimerTask+0x54>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00b      	beq.n	8003aca <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003ab2:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <xTimerCreateTimerTask+0x58>)
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	2300      	movs	r3, #0
 8003abc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ac0:	490d      	ldr	r1, [pc, #52]	; (8003af8 <xTimerCreateTimerTask+0x5c>)
 8003ac2:	480e      	ldr	r0, [pc, #56]	; (8003afc <xTimerCreateTimerTask+0x60>)
 8003ac4:	f7ff f934 	bl	8002d30 <xTaskCreate>
 8003ac8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10a      	bne.n	8003ae6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad4:	f383 8811 	msr	BASEPRI, r3
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	603b      	str	r3, [r7, #0]
    }
 8003ae2:	bf00      	nop
 8003ae4:	e7fe      	b.n	8003ae4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003ae6:	687b      	ldr	r3, [r7, #4]
    }
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	20000254 	.word	0x20000254
 8003af4:	20000258 	.word	0x20000258
 8003af8:	0800702c 	.word	0x0800702c
 8003afc:	08003c35 	.word	0x08003c35

08003b00 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b08a      	sub	sp, #40	; 0x28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10a      	bne.n	8003b2e <xTimerGenericCommand+0x2e>
        __asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	623b      	str	r3, [r7, #32]
    }
 8003b2a:	bf00      	nop
 8003b2c:	e7fe      	b.n	8003b2c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003b2e:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <xTimerGenericCommand+0x98>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d02a      	beq.n	8003b8c <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b05      	cmp	r3, #5
 8003b46:	dc18      	bgt.n	8003b7a <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b48:	f7ff fea0 	bl	800388c <xTaskGetSchedulerState>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d109      	bne.n	8003b66 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b52:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <xTimerGenericCommand+0x98>)
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	f107 0114 	add.w	r1, r7, #20
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b5e:	f7fe fc7d 	bl	800245c <xQueueGenericSend>
 8003b62:	6278      	str	r0, [r7, #36]	; 0x24
 8003b64:	e012      	b.n	8003b8c <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b66:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <xTimerGenericCommand+0x98>)
 8003b68:	6818      	ldr	r0, [r3, #0]
 8003b6a:	f107 0114 	add.w	r1, r7, #20
 8003b6e:	2300      	movs	r3, #0
 8003b70:	2200      	movs	r2, #0
 8003b72:	f7fe fc73 	bl	800245c <xQueueGenericSend>
 8003b76:	6278      	str	r0, [r7, #36]	; 0x24
 8003b78:	e008      	b.n	8003b8c <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b7a:	4b07      	ldr	r3, [pc, #28]	; (8003b98 <xTimerGenericCommand+0x98>)
 8003b7c:	6818      	ldr	r0, [r3, #0]
 8003b7e:	f107 0114 	add.w	r1, r7, #20
 8003b82:	2300      	movs	r3, #0
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	f7fe fd8f 	bl	80026a8 <xQueueGenericSendFromISR>
 8003b8a:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3728      	adds	r7, #40	; 0x28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000254 	.word	0x20000254

08003b9c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af02      	add	r7, sp, #8
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ba6:	4b22      	ldr	r3, [pc, #136]	; (8003c30 <prvProcessExpiredTimer+0x94>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fe fb37 	bl	8002228 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d022      	beq.n	8003c0e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	699a      	ldr	r2, [r3, #24]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	18d1      	adds	r1, r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	6978      	ldr	r0, [r7, #20]
 8003bd6:	f000 f8d1 	bl	8003d7c <prvInsertTimerInActiveList>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d01f      	beq.n	8003c20 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003be0:	2300      	movs	r3, #0
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	2300      	movs	r3, #0
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	2100      	movs	r1, #0
 8003bea:	6978      	ldr	r0, [r7, #20]
 8003bec:	f7ff ff88 	bl	8003b00 <xTimerGenericCommand>
 8003bf0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d113      	bne.n	8003c20 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	60fb      	str	r3, [r7, #12]
    }
 8003c0a:	bf00      	nop
 8003c0c:	e7fe      	b.n	8003c0c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c14:	f023 0301 	bic.w	r3, r3, #1
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	6978      	ldr	r0, [r7, #20]
 8003c26:	4798      	blx	r3
    }
 8003c28:	bf00      	nop
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	2000024c 	.word	0x2000024c

08003c34 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c3c:	f107 0308 	add.w	r3, r7, #8
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 f857 	bl	8003cf4 <prvGetNextExpireTime>
 8003c46:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 f803 	bl	8003c58 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003c52:	f000 f8d5 	bl	8003e00 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c56:	e7f1      	b.n	8003c3c <prvTimerTask+0x8>

08003c58 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003c62:	f7ff fa2b 	bl	80030bc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c66:	f107 0308 	add.w	r3, r7, #8
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 f866 	bl	8003d3c <prvSampleTimeNow>
 8003c70:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d130      	bne.n	8003cda <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10a      	bne.n	8003c94 <prvProcessTimerOrBlockTask+0x3c>
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d806      	bhi.n	8003c94 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003c86:	f7ff fa27 	bl	80030d8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c8a:	68f9      	ldr	r1, [r7, #12]
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff ff85 	bl	8003b9c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003c92:	e024      	b.n	8003cde <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d008      	beq.n	8003cac <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c9a:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <prvProcessTimerOrBlockTask+0x90>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <prvProcessTimerOrBlockTask+0x50>
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e000      	b.n	8003caa <prvProcessTimerOrBlockTask+0x52>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003cac:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <prvProcessTimerOrBlockTask+0x94>)
 8003cae:	6818      	ldr	r0, [r3, #0]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	4619      	mov	r1, r3
 8003cba:	f7ff f805 	bl	8002cc8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003cbe:	f7ff fa0b 	bl	80030d8 <xTaskResumeAll>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10a      	bne.n	8003cde <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003cc8:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <prvProcessTimerOrBlockTask+0x98>)
 8003cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	f3bf 8f6f 	isb	sy
    }
 8003cd8:	e001      	b.n	8003cde <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003cda:	f7ff f9fd 	bl	80030d8 <xTaskResumeAll>
    }
 8003cde:	bf00      	nop
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	20000250 	.word	0x20000250
 8003cec:	20000254 	.word	0x20000254
 8003cf0:	e000ed04 	.word	0xe000ed04

08003cf4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003cfc:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <prvGetNextExpireTime+0x44>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <prvGetNextExpireTime+0x16>
 8003d06:	2201      	movs	r2, #1
 8003d08:	e000      	b.n	8003d0c <prvGetNextExpireTime+0x18>
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d105      	bne.n	8003d24 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d18:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <prvGetNextExpireTime+0x44>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	e001      	b.n	8003d28 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003d28:	68fb      	ldr	r3, [r7, #12]
    }
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	2000024c 	.word	0x2000024c

08003d3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003d44:	f7ff fa68 	bl	8003218 <xTaskGetTickCount>
 8003d48:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <prvSampleTimeNow+0x3c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d205      	bcs.n	8003d60 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003d54:	f000 f91a 	bl	8003f8c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	e002      	b.n	8003d66 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003d66:	4a04      	ldr	r2, [pc, #16]	; (8003d78 <prvSampleTimeNow+0x3c>)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
    }
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	2000025c 	.word	0x2000025c

08003d7c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003d9a:	68ba      	ldr	r2, [r7, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d812      	bhi.n	8003dc8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	1ad2      	subs	r2, r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d302      	bcc.n	8003db6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003db0:	2301      	movs	r3, #1
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	e01b      	b.n	8003dee <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003db6:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <prvInsertTimerInActiveList+0x7c>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	f7fe f9f8 	bl	80021b6 <vListInsert>
 8003dc6:	e012      	b.n	8003dee <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d206      	bcs.n	8003dde <prvInsertTimerInActiveList+0x62>
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d302      	bcc.n	8003dde <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	e007      	b.n	8003dee <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003dde:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <prvInsertTimerInActiveList+0x80>)
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	3304      	adds	r3, #4
 8003de6:	4619      	mov	r1, r3
 8003de8:	4610      	mov	r0, r2
 8003dea:	f7fe f9e4 	bl	80021b6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003dee:	697b      	ldr	r3, [r7, #20]
    }
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	20000250 	.word	0x20000250
 8003dfc:	2000024c 	.word	0x2000024c

08003e00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08c      	sub	sp, #48	; 0x30
 8003e04:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e06:	e0ae      	b.n	8003f66 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f2c0 80aa 	blt.w	8003f64 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d004      	beq.n	8003e26 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	3304      	adds	r3, #4
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fe fa01 	bl	8002228 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e26:	1d3b      	adds	r3, r7, #4
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff ff87 	bl	8003d3c <prvSampleTimeNow>
 8003e2e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b09      	cmp	r3, #9
 8003e34:	f200 8097 	bhi.w	8003f66 <prvProcessReceivedCommands+0x166>
 8003e38:	a201      	add	r2, pc, #4	; (adr r2, 8003e40 <prvProcessReceivedCommands+0x40>)
 8003e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3e:	bf00      	nop
 8003e40:	08003e69 	.word	0x08003e69
 8003e44:	08003e69 	.word	0x08003e69
 8003e48:	08003e69 	.word	0x08003e69
 8003e4c:	08003edd 	.word	0x08003edd
 8003e50:	08003ef1 	.word	0x08003ef1
 8003e54:	08003f3b 	.word	0x08003f3b
 8003e58:	08003e69 	.word	0x08003e69
 8003e5c:	08003e69 	.word	0x08003e69
 8003e60:	08003edd 	.word	0x08003edd
 8003e64:	08003ef1 	.word	0x08003ef1
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	18d1      	adds	r1, r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a3a      	ldr	r2, [r7, #32]
 8003e86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e88:	f7ff ff78 	bl	8003d7c <prvInsertTimerInActiveList>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d069      	beq.n	8003f66 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e98:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d05e      	beq.n	8003f66 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	441a      	add	r2, r3
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003eba:	f7ff fe21 	bl	8003b00 <xTimerGenericCommand>
 8003ebe:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d14f      	bne.n	8003f66 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
 8003ed6:	61bb      	str	r3, [r7, #24]
    }
 8003ed8:	bf00      	nop
 8003eda:	e7fe      	b.n	8003eda <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ee2:	f023 0301 	bic.w	r3, r3, #1
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003eee:	e03a      	b.n	8003f66 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10a      	bne.n	8003f26 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	617b      	str	r3, [r7, #20]
    }
 8003f22:	bf00      	nop
 8003f24:	e7fe      	b.n	8003f24 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	699a      	ldr	r2, [r3, #24]
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	18d1      	adds	r1, r2, r3
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	6a3a      	ldr	r2, [r7, #32]
 8003f32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f34:	f7ff ff22 	bl	8003d7c <prvInsertTimerInActiveList>
                        break;
 8003f38:	e015      	b.n	8003f66 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d103      	bne.n	8003f50 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003f48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f4a:	f000 fc67 	bl	800481c <vPortFree>
 8003f4e:	e00a      	b.n	8003f66 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f56:	f023 0301 	bic.w	r3, r3, #1
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003f62:	e000      	b.n	8003f66 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003f64:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f66:	4b08      	ldr	r3, [pc, #32]	; (8003f88 <prvProcessReceivedCommands+0x188>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f107 0108 	add.w	r1, r7, #8
 8003f6e:	2200      	movs	r2, #0
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fe fc57 	bl	8002824 <xQueueReceive>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f47f af45 	bne.w	8003e08 <prvProcessReceivedCommands+0x8>
        }
    }
 8003f7e:	bf00      	nop
 8003f80:	bf00      	nop
 8003f82:	3728      	adds	r7, #40	; 0x28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	20000254 	.word	0x20000254

08003f8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f92:	e048      	b.n	8004026 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f94:	4b2d      	ldr	r3, [pc, #180]	; (800404c <prvSwitchTimerLists+0xc0>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f9e:	4b2b      	ldr	r3, [pc, #172]	; (800404c <prvSwitchTimerLists+0xc0>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	3304      	adds	r3, #4
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fe f93b 	bl	8002228 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d02e      	beq.n	8004026 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4413      	add	r3, r2
 8003fd0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d90e      	bls.n	8003ff8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fe6:	4b19      	ldr	r3, [pc, #100]	; (800404c <prvSwitchTimerLists+0xc0>)
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	3304      	adds	r3, #4
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	f7fe f8e0 	bl	80021b6 <vListInsert>
 8003ff6:	e016      	b.n	8004026 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	2100      	movs	r1, #0
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f7ff fd7c 	bl	8003b00 <xTimerGenericCommand>
 8004008:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10a      	bne.n	8004026 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	603b      	str	r3, [r7, #0]
    }
 8004022:	bf00      	nop
 8004024:	e7fe      	b.n	8004024 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004026:	4b09      	ldr	r3, [pc, #36]	; (800404c <prvSwitchTimerLists+0xc0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1b1      	bne.n	8003f94 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004030:	4b06      	ldr	r3, [pc, #24]	; (800404c <prvSwitchTimerLists+0xc0>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004036:	4b06      	ldr	r3, [pc, #24]	; (8004050 <prvSwitchTimerLists+0xc4>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a04      	ldr	r2, [pc, #16]	; (800404c <prvSwitchTimerLists+0xc0>)
 800403c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800403e:	4a04      	ldr	r2, [pc, #16]	; (8004050 <prvSwitchTimerLists+0xc4>)
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	6013      	str	r3, [r2, #0]
    }
 8004044:	bf00      	nop
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	2000024c 	.word	0x2000024c
 8004050:	20000250 	.word	0x20000250

08004054 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004058:	f000 f9dc 	bl	8004414 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800405c:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <prvCheckForValidListAndQueue+0x54>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d11d      	bne.n	80040a0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004064:	4811      	ldr	r0, [pc, #68]	; (80040ac <prvCheckForValidListAndQueue+0x58>)
 8004066:	f7fe f855 	bl	8002114 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800406a:	4811      	ldr	r0, [pc, #68]	; (80040b0 <prvCheckForValidListAndQueue+0x5c>)
 800406c:	f7fe f852 	bl	8002114 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004070:	4b10      	ldr	r3, [pc, #64]	; (80040b4 <prvCheckForValidListAndQueue+0x60>)
 8004072:	4a0e      	ldr	r2, [pc, #56]	; (80040ac <prvCheckForValidListAndQueue+0x58>)
 8004074:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004076:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <prvCheckForValidListAndQueue+0x64>)
 8004078:	4a0d      	ldr	r2, [pc, #52]	; (80040b0 <prvCheckForValidListAndQueue+0x5c>)
 800407a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800407c:	2200      	movs	r2, #0
 800407e:	210c      	movs	r1, #12
 8004080:	200a      	movs	r0, #10
 8004082:	f7fe f963 	bl	800234c <xQueueGenericCreate>
 8004086:	4603      	mov	r3, r0
 8004088:	4a07      	ldr	r2, [pc, #28]	; (80040a8 <prvCheckForValidListAndQueue+0x54>)
 800408a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800408c:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <prvCheckForValidListAndQueue+0x54>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004094:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <prvCheckForValidListAndQueue+0x54>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4908      	ldr	r1, [pc, #32]	; (80040bc <prvCheckForValidListAndQueue+0x68>)
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe fde2 	bl	8002c64 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80040a0:	f000 f9e8 	bl	8004474 <vPortExitCritical>
    }
 80040a4:	bf00      	nop
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20000254 	.word	0x20000254
 80040ac:	20000224 	.word	0x20000224
 80040b0:	20000238 	.word	0x20000238
 80040b4:	2000024c 	.word	0x2000024c
 80040b8:	20000250 	.word	0x20000250
 80040bc:	08007034 	.word	0x08007034

080040c0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3b04      	subs	r3, #4
 80040d0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040d8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	3b04      	subs	r3, #4
 80040de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f023 0201 	bic.w	r2, r3, #1
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3b04      	subs	r3, #4
 80040ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80040f0:	4a0c      	ldr	r2, [pc, #48]	; (8004124 <pxPortInitialiseStack+0x64>)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	3b14      	subs	r3, #20
 80040fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3b04      	subs	r3, #4
 8004106:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f06f 0202 	mvn.w	r2, #2
 800410e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3b20      	subs	r3, #32
 8004114:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004116:	68fb      	ldr	r3, [r7, #12]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	08004129 	.word	0x08004129

08004128 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800412e:	2300      	movs	r3, #0
 8004130:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004132:	4b12      	ldr	r3, [pc, #72]	; (800417c <prvTaskExitError+0x54>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413a:	d00a      	beq.n	8004152 <prvTaskExitError+0x2a>
        __asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	60fb      	str	r3, [r7, #12]
    }
 800414e:	bf00      	nop
 8004150:	e7fe      	b.n	8004150 <prvTaskExitError+0x28>
        __asm volatile
 8004152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	60bb      	str	r3, [r7, #8]
    }
 8004164:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004166:	bf00      	nop
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0fc      	beq.n	8004168 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800416e:	bf00      	nop
 8004170:	bf00      	nop
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	20000010 	.word	0x20000010

08004180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004180:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <pxCurrentTCBConst2>)
 8004182:	6819      	ldr	r1, [r3, #0]
 8004184:	6808      	ldr	r0, [r1, #0]
 8004186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800418a:	f380 8809 	msr	PSP, r0
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f04f 0000 	mov.w	r0, #0
 8004196:	f380 8811 	msr	BASEPRI, r0
 800419a:	4770      	bx	lr
 800419c:	f3af 8000 	nop.w

080041a0 <pxCurrentTCBConst2>:
 80041a0:	20000120 	.word	0x20000120
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop

080041a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80041a8:	4808      	ldr	r0, [pc, #32]	; (80041cc <prvPortStartFirstTask+0x24>)
 80041aa:	6800      	ldr	r0, [r0, #0]
 80041ac:	6800      	ldr	r0, [r0, #0]
 80041ae:	f380 8808 	msr	MSP, r0
 80041b2:	f04f 0000 	mov.w	r0, #0
 80041b6:	f380 8814 	msr	CONTROL, r0
 80041ba:	b662      	cpsie	i
 80041bc:	b661      	cpsie	f
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	df00      	svc	0
 80041c8:	bf00      	nop
 80041ca:	0000      	.short	0x0000
 80041cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80041d0:	bf00      	nop
 80041d2:	bf00      	nop

080041d4 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

/*venkatesh added*/
void vInitPrioGroupValue(void)

{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0

     * the r0p1 parts.  r0p1 parts should use the port from the

     * /source/portable/GCC/ARM_CM7/r0p1 directory. */

   configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80041da:	4b37      	ldr	r3, [pc, #220]	; (80042b8 <vInitPrioGroupValue+0xe4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a37      	ldr	r2, [pc, #220]	; (80042bc <vInitPrioGroupValue+0xe8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d10a      	bne.n	80041fa <vInitPrioGroupValue+0x26>
        __asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	613b      	str	r3, [r7, #16]
    }
 80041f6:	bf00      	nop
 80041f8:	e7fe      	b.n	80041f8 <vInitPrioGroupValue+0x24>

    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80041fa:	4b2f      	ldr	r3, [pc, #188]	; (80042b8 <vInitPrioGroupValue+0xe4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a30      	ldr	r2, [pc, #192]	; (80042c0 <vInitPrioGroupValue+0xec>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d10a      	bne.n	800421a <vInitPrioGroupValue+0x46>
        __asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	60fb      	str	r3, [r7, #12]
    }
 8004216:	bf00      	nop
 8004218:	e7fe      	b.n	8004218 <vInitPrioGroupValue+0x44>

        {

            volatile uint32_t ulOriginalPriority;

           volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800421a:	4b2a      	ldr	r3, [pc, #168]	; (80042c4 <vInitPrioGroupValue+0xf0>)
 800421c:	617b      	str	r3, [r7, #20]

             *

             * Save the interrupt priority value that is about to be clobbered. */

            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all

             * possible bits. */

            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	22ff      	movs	r2, #255	; 0xff
 800422a:	701a      	strb	r2, [r3, #0]



            /* Read the value back to see how many bits stuck. */

            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	70fb      	strb	r3, [r7, #3]



            /* Use the same mask on the maximum system call priority. */

            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004234:	78fb      	ldrb	r3, [r7, #3]
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800423c:	b2da      	uxtb	r2, r3
 800423e:	4b22      	ldr	r3, [pc, #136]	; (80042c8 <vInitPrioGroupValue+0xf4>)
 8004240:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number

             * of bits read back. */

            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004242:	4b22      	ldr	r3, [pc, #136]	; (80042cc <vInitPrioGroupValue+0xf8>)
 8004244:	2207      	movs	r2, #7
 8004246:	601a      	str	r2, [r3, #0]



            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004248:	e009      	b.n	800425e <vInitPrioGroupValue+0x8a>

            {

                ulMaxPRIGROUPValue--;
 800424a:	4b20      	ldr	r3, [pc, #128]	; (80042cc <vInitPrioGroupValue+0xf8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3b01      	subs	r3, #1
 8004250:	4a1e      	ldr	r2, [pc, #120]	; (80042cc <vInitPrioGroupValue+0xf8>)
 8004252:	6013      	str	r3, [r2, #0]

                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	b2db      	uxtb	r3, r3
 800425c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800425e:	78fb      	ldrb	r3, [r7, #3]
 8004260:	b2db      	uxtb	r3, r3
 8004262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004266:	2b80      	cmp	r3, #128	; 0x80
 8004268:	d0ef      	beq.n	800424a <vInitPrioGroupValue+0x76>

                     * priority bits matches the number of priority bits actually queried

                     * from the hardware. */

                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800426a:	4b18      	ldr	r3, [pc, #96]	; (80042cc <vInitPrioGroupValue+0xf8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f1c3 0307 	rsb	r3, r3, #7
 8004272:	2b04      	cmp	r3, #4
 8004274:	d00a      	beq.n	800428c <vInitPrioGroupValue+0xb8>
        __asm volatile
 8004276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	60bb      	str	r3, [r7, #8]
    }
 8004288:	bf00      	nop
 800428a:	e7fe      	b.n	800428a <vInitPrioGroupValue+0xb6>

            /* Shift the priority group value back to its position within the AIRCR

             * register. */

            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800428c:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <vInitPrioGroupValue+0xf8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	4a0e      	ldr	r2, [pc, #56]	; (80042cc <vInitPrioGroupValue+0xf8>)
 8004294:	6013      	str	r3, [r2, #0]

            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004296:	4b0d      	ldr	r3, [pc, #52]	; (80042cc <vInitPrioGroupValue+0xf8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800429e:	4a0b      	ldr	r2, [pc, #44]	; (80042cc <vInitPrioGroupValue+0xf8>)
 80042a0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original

             * value. */

            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	701a      	strb	r2, [r3, #0]

        }

    #endif /* conifgASSERT_DEFINED */

}
 80042aa:	bf00      	nop
 80042ac:	371c      	adds	r7, #28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	e000ed00 	.word	0xe000ed00
 80042bc:	410fc271 	.word	0x410fc271
 80042c0:	410fc270 	.word	0x410fc270
 80042c4:	e000e400 	.word	0xe000e400
 80042c8:	20000260 	.word	0x20000260
 80042cc:	20000264 	.word	0x20000264

080042d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042d6:	4b46      	ldr	r3, [pc, #280]	; (80043f0 <xPortStartScheduler+0x120>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a46      	ldr	r2, [pc, #280]	; (80043f4 <xPortStartScheduler+0x124>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d10a      	bne.n	80042f6 <xPortStartScheduler+0x26>
        __asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	613b      	str	r3, [r7, #16]
    }
 80042f2:	bf00      	nop
 80042f4:	e7fe      	b.n	80042f4 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042f6:	4b3e      	ldr	r3, [pc, #248]	; (80043f0 <xPortStartScheduler+0x120>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a3f      	ldr	r2, [pc, #252]	; (80043f8 <xPortStartScheduler+0x128>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d10a      	bne.n	8004316 <xPortStartScheduler+0x46>
        __asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	60fb      	str	r3, [r7, #12]
    }
 8004312:	bf00      	nop
 8004314:	e7fe      	b.n	8004314 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004316:	4b39      	ldr	r3, [pc, #228]	; (80043fc <xPortStartScheduler+0x12c>)
 8004318:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	22ff      	movs	r2, #255	; 0xff
 8004326:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	b2db      	uxtb	r3, r3
 800432e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	b2db      	uxtb	r3, r3
 8004334:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004338:	b2da      	uxtb	r2, r3
 800433a:	4b31      	ldr	r3, [pc, #196]	; (8004400 <xPortStartScheduler+0x130>)
 800433c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800433e:	4b31      	ldr	r3, [pc, #196]	; (8004404 <xPortStartScheduler+0x134>)
 8004340:	2207      	movs	r2, #7
 8004342:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004344:	e009      	b.n	800435a <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004346:	4b2f      	ldr	r3, [pc, #188]	; (8004404 <xPortStartScheduler+0x134>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3b01      	subs	r3, #1
 800434c:	4a2d      	ldr	r2, [pc, #180]	; (8004404 <xPortStartScheduler+0x134>)
 800434e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	b2db      	uxtb	r3, r3
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	b2db      	uxtb	r3, r3
 8004358:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	b2db      	uxtb	r3, r3
 800435e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004362:	2b80      	cmp	r3, #128	; 0x80
 8004364:	d0ef      	beq.n	8004346 <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004366:	4b27      	ldr	r3, [pc, #156]	; (8004404 <xPortStartScheduler+0x134>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f1c3 0307 	rsb	r3, r3, #7
 800436e:	2b04      	cmp	r3, #4
 8004370:	d00a      	beq.n	8004388 <xPortStartScheduler+0xb8>
        __asm volatile
 8004372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	60bb      	str	r3, [r7, #8]
    }
 8004384:	bf00      	nop
 8004386:	e7fe      	b.n	8004386 <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004388:	4b1e      	ldr	r3, [pc, #120]	; (8004404 <xPortStartScheduler+0x134>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	021b      	lsls	r3, r3, #8
 800438e:	4a1d      	ldr	r2, [pc, #116]	; (8004404 <xPortStartScheduler+0x134>)
 8004390:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004392:	4b1c      	ldr	r3, [pc, #112]	; (8004404 <xPortStartScheduler+0x134>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800439a:	4a1a      	ldr	r2, [pc, #104]	; (8004404 <xPortStartScheduler+0x134>)
 800439c:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80043a6:	4b18      	ldr	r3, [pc, #96]	; (8004408 <xPortStartScheduler+0x138>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a17      	ldr	r2, [pc, #92]	; (8004408 <xPortStartScheduler+0x138>)
 80043ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043b0:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80043b2:	4b15      	ldr	r3, [pc, #84]	; (8004408 <xPortStartScheduler+0x138>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a14      	ldr	r2, [pc, #80]	; (8004408 <xPortStartScheduler+0x138>)
 80043b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043bc:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80043be:	f000 f8dd 	bl	800457c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80043c2:	4b12      	ldr	r3, [pc, #72]	; (800440c <xPortStartScheduler+0x13c>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80043c8:	f000 f8fc 	bl	80045c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043cc:	4b10      	ldr	r3, [pc, #64]	; (8004410 <xPortStartScheduler+0x140>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a0f      	ldr	r2, [pc, #60]	; (8004410 <xPortStartScheduler+0x140>)
 80043d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80043d6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80043d8:	f7ff fee6 	bl	80041a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80043dc:	f7fe fffa 	bl	80033d4 <vTaskSwitchContext>
    prvTaskExitError();
 80043e0:	f7ff fea2 	bl	8004128 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	e000ed00 	.word	0xe000ed00
 80043f4:	410fc271 	.word	0x410fc271
 80043f8:	410fc270 	.word	0x410fc270
 80043fc:	e000e400 	.word	0xe000e400
 8004400:	20000260 	.word	0x20000260
 8004404:	20000264 	.word	0x20000264
 8004408:	e000ed20 	.word	0xe000ed20
 800440c:	20000010 	.word	0x20000010
 8004410:	e000ef34 	.word	0xe000ef34

08004414 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
        __asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	607b      	str	r3, [r7, #4]
    }
 800442c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800442e:	4b0f      	ldr	r3, [pc, #60]	; (800446c <vPortEnterCritical+0x58>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3301      	adds	r3, #1
 8004434:	4a0d      	ldr	r2, [pc, #52]	; (800446c <vPortEnterCritical+0x58>)
 8004436:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004438:	4b0c      	ldr	r3, [pc, #48]	; (800446c <vPortEnterCritical+0x58>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d10f      	bne.n	8004460 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004440:	4b0b      	ldr	r3, [pc, #44]	; (8004470 <vPortEnterCritical+0x5c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <vPortEnterCritical+0x4c>
        __asm volatile
 800444a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800444e:	f383 8811 	msr	BASEPRI, r3
 8004452:	f3bf 8f6f 	isb	sy
 8004456:	f3bf 8f4f 	dsb	sy
 800445a:	603b      	str	r3, [r7, #0]
    }
 800445c:	bf00      	nop
 800445e:	e7fe      	b.n	800445e <vPortEnterCritical+0x4a>
    }
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	20000010 	.word	0x20000010
 8004470:	e000ed04 	.word	0xe000ed04

08004474 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800447a:	4b12      	ldr	r3, [pc, #72]	; (80044c4 <vPortExitCritical+0x50>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10a      	bne.n	8004498 <vPortExitCritical+0x24>
        __asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	607b      	str	r3, [r7, #4]
    }
 8004494:	bf00      	nop
 8004496:	e7fe      	b.n	8004496 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004498:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <vPortExitCritical+0x50>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3b01      	subs	r3, #1
 800449e:	4a09      	ldr	r2, [pc, #36]	; (80044c4 <vPortExitCritical+0x50>)
 80044a0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80044a2:	4b08      	ldr	r3, [pc, #32]	; (80044c4 <vPortExitCritical+0x50>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d105      	bne.n	80044b6 <vPortExitCritical+0x42>
 80044aa:	2300      	movs	r3, #0
 80044ac:	603b      	str	r3, [r7, #0]
        __asm volatile
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	f383 8811 	msr	BASEPRI, r3
    }
 80044b4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	20000010 	.word	0x20000010
	...

080044d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80044d0:	f3ef 8009 	mrs	r0, PSP
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	4b15      	ldr	r3, [pc, #84]	; (8004530 <pxCurrentTCBConst>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	f01e 0f10 	tst.w	lr, #16
 80044e0:	bf08      	it	eq
 80044e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ea:	6010      	str	r0, [r2, #0]
 80044ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044f4:	f380 8811 	msr	BASEPRI, r0
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f7fe ff68 	bl	80033d4 <vTaskSwitchContext>
 8004504:	f04f 0000 	mov.w	r0, #0
 8004508:	f380 8811 	msr	BASEPRI, r0
 800450c:	bc09      	pop	{r0, r3}
 800450e:	6819      	ldr	r1, [r3, #0]
 8004510:	6808      	ldr	r0, [r1, #0]
 8004512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004516:	f01e 0f10 	tst.w	lr, #16
 800451a:	bf08      	it	eq
 800451c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004520:	f380 8809 	msr	PSP, r0
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	f3af 8000 	nop.w

08004530 <pxCurrentTCBConst>:
 8004530:	20000120 	.word	0x20000120
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004534:	bf00      	nop
 8004536:	bf00      	nop

08004538 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
        __asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	607b      	str	r3, [r7, #4]
    }
 8004550:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004552:	f7fe fe83 	bl	800325c <xTaskIncrementTick>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800455c:	4b06      	ldr	r3, [pc, #24]	; (8004578 <SysTick_Handler+0x40>)
 800455e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	2300      	movs	r3, #0
 8004566:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	f383 8811 	msr	BASEPRI, r3
    }
 800456e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004570:	bf00      	nop
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	e000ed04 	.word	0xe000ed04

0800457c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004580:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <vPortSetupTimerInterrupt+0x34>)
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004586:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <vPortSetupTimerInterrupt+0x38>)
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800458c:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <vPortSetupTimerInterrupt+0x3c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a0a      	ldr	r2, [pc, #40]	; (80045bc <vPortSetupTimerInterrupt+0x40>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	099b      	lsrs	r3, r3, #6
 8004598:	4a09      	ldr	r2, [pc, #36]	; (80045c0 <vPortSetupTimerInterrupt+0x44>)
 800459a:	3b01      	subs	r3, #1
 800459c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800459e:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <vPortSetupTimerInterrupt+0x34>)
 80045a0:	2207      	movs	r2, #7
 80045a2:	601a      	str	r2, [r3, #0]
}
 80045a4:	bf00      	nop
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	e000e010 	.word	0xe000e010
 80045b4:	e000e018 	.word	0xe000e018
 80045b8:	20000000 	.word	0x20000000
 80045bc:	10624dd3 	.word	0x10624dd3
 80045c0:	e000e014 	.word	0xe000e014

080045c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80045c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80045d4 <vPortEnableVFP+0x10>
 80045c8:	6801      	ldr	r1, [r0, #0]
 80045ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80045ce:	6001      	str	r1, [r0, #0]
 80045d0:	4770      	bx	lr
 80045d2:	0000      	.short	0x0000
 80045d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80045d8:	bf00      	nop
 80045da:	bf00      	nop

080045dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80045e2:	f3ef 8305 	mrs	r3, IPSR
 80045e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b0f      	cmp	r3, #15
 80045ec:	d914      	bls.n	8004618 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045ee:	4a17      	ldr	r2, [pc, #92]	; (800464c <vPortValidateInterruptPriority+0x70>)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80045f8:	4b15      	ldr	r3, [pc, #84]	; (8004650 <vPortValidateInterruptPriority+0x74>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	7afa      	ldrb	r2, [r7, #11]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d20a      	bcs.n	8004618 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	607b      	str	r3, [r7, #4]
    }
 8004614:	bf00      	nop
 8004616:	e7fe      	b.n	8004616 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004618:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <vPortValidateInterruptPriority+0x78>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004620:	4b0d      	ldr	r3, [pc, #52]	; (8004658 <vPortValidateInterruptPriority+0x7c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d90a      	bls.n	800463e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	603b      	str	r3, [r7, #0]
    }
 800463a:	bf00      	nop
 800463c:	e7fe      	b.n	800463c <vPortValidateInterruptPriority+0x60>
    }
 800463e:	bf00      	nop
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	e000e3f0 	.word	0xe000e3f0
 8004650:	20000260 	.word	0x20000260
 8004654:	e000ed0c 	.word	0xe000ed0c
 8004658:	20000264 	.word	0x20000264

0800465c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08a      	sub	sp, #40	; 0x28
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004664:	2300      	movs	r3, #0
 8004666:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004668:	f7fe fd28 	bl	80030bc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800466c:	4b65      	ldr	r3, [pc, #404]	; (8004804 <pvPortMalloc+0x1a8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004674:	f000 f934 	bl	80048e0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004678:	4b63      	ldr	r3, [pc, #396]	; (8004808 <pvPortMalloc+0x1ac>)
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4013      	ands	r3, r2
 8004680:	2b00      	cmp	r3, #0
 8004682:	f040 80a7 	bne.w	80047d4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d02d      	beq.n	80046e8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800468c:	2208      	movs	r2, #8
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	429a      	cmp	r2, r3
 8004696:	d227      	bcs.n	80046e8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004698:	2208      	movs	r2, #8
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4413      	add	r3, r2
 800469e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d021      	beq.n	80046ee <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f023 0307 	bic.w	r3, r3, #7
 80046b0:	3308      	adds	r3, #8
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d214      	bcs.n	80046e2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f023 0307 	bic.w	r3, r3, #7
 80046be:	3308      	adds	r3, #8
 80046c0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d010      	beq.n	80046ee <pvPortMalloc+0x92>
        __asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	617b      	str	r3, [r7, #20]
    }
 80046de:	bf00      	nop
 80046e0:	e7fe      	b.n	80046e0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046e6:	e002      	b.n	80046ee <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80046e8:	2300      	movs	r3, #0
 80046ea:	607b      	str	r3, [r7, #4]
 80046ec:	e000      	b.n	80046f0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046ee:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d06e      	beq.n	80047d4 <pvPortMalloc+0x178>
 80046f6:	4b45      	ldr	r3, [pc, #276]	; (800480c <pvPortMalloc+0x1b0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d869      	bhi.n	80047d4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004700:	4b43      	ldr	r3, [pc, #268]	; (8004810 <pvPortMalloc+0x1b4>)
 8004702:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004704:	4b42      	ldr	r3, [pc, #264]	; (8004810 <pvPortMalloc+0x1b4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800470a:	e004      	b.n	8004716 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	429a      	cmp	r2, r3
 800471e:	d903      	bls.n	8004728 <pvPortMalloc+0xcc>
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f1      	bne.n	800470c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004728:	4b36      	ldr	r3, [pc, #216]	; (8004804 <pvPortMalloc+0x1a8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800472e:	429a      	cmp	r2, r3
 8004730:	d050      	beq.n	80047d4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2208      	movs	r2, #8
 8004738:	4413      	add	r3, r2
 800473a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	1ad2      	subs	r2, r2, r3
 800474c:	2308      	movs	r3, #8
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	429a      	cmp	r2, r3
 8004752:	d91f      	bls.n	8004794 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4413      	add	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <pvPortMalloc+0x120>
        __asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	613b      	str	r3, [r7, #16]
    }
 8004778:	bf00      	nop
 800477a:	e7fe      	b.n	800477a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	1ad2      	subs	r2, r2, r3
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800478e:	69b8      	ldr	r0, [r7, #24]
 8004790:	f000 f908 	bl	80049a4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004794:	4b1d      	ldr	r3, [pc, #116]	; (800480c <pvPortMalloc+0x1b0>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	4a1b      	ldr	r2, [pc, #108]	; (800480c <pvPortMalloc+0x1b0>)
 80047a0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047a2:	4b1a      	ldr	r3, [pc, #104]	; (800480c <pvPortMalloc+0x1b0>)
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	4b1b      	ldr	r3, [pc, #108]	; (8004814 <pvPortMalloc+0x1b8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d203      	bcs.n	80047b6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047ae:	4b17      	ldr	r3, [pc, #92]	; (800480c <pvPortMalloc+0x1b0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a18      	ldr	r2, [pc, #96]	; (8004814 <pvPortMalloc+0x1b8>)
 80047b4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	4b13      	ldr	r3, [pc, #76]	; (8004808 <pvPortMalloc+0x1ac>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	431a      	orrs	r2, r3
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80047ca:	4b13      	ldr	r3, [pc, #76]	; (8004818 <pvPortMalloc+0x1bc>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3301      	adds	r3, #1
 80047d0:	4a11      	ldr	r2, [pc, #68]	; (8004818 <pvPortMalloc+0x1bc>)
 80047d2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80047d4:	f7fe fc80 	bl	80030d8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <pvPortMalloc+0x19c>
        __asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	60fb      	str	r3, [r7, #12]
    }
 80047f4:	bf00      	nop
 80047f6:	e7fe      	b.n	80047f6 <pvPortMalloc+0x19a>
    return pvReturn;
 80047f8:	69fb      	ldr	r3, [r7, #28]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3728      	adds	r7, #40	; 0x28
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20012e70 	.word	0x20012e70
 8004808:	20012e84 	.word	0x20012e84
 800480c:	20012e74 	.word	0x20012e74
 8004810:	20012e68 	.word	0x20012e68
 8004814:	20012e78 	.word	0x20012e78
 8004818:	20012e7c 	.word	0x20012e7c

0800481c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d04d      	beq.n	80048ca <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800482e:	2308      	movs	r3, #8
 8004830:	425b      	negs	r3, r3
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4413      	add	r3, r2
 8004836:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	4b24      	ldr	r3, [pc, #144]	; (80048d4 <vPortFree+0xb8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4013      	ands	r3, r2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10a      	bne.n	8004860 <vPortFree+0x44>
        __asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	60fb      	str	r3, [r7, #12]
    }
 800485c:	bf00      	nop
 800485e:	e7fe      	b.n	800485e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <vPortFree+0x62>
        __asm volatile
 8004868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	60bb      	str	r3, [r7, #8]
    }
 800487a:	bf00      	nop
 800487c:	e7fe      	b.n	800487c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	4b14      	ldr	r3, [pc, #80]	; (80048d4 <vPortFree+0xb8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4013      	ands	r3, r2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01e      	beq.n	80048ca <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d11a      	bne.n	80048ca <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	4b0e      	ldr	r3, [pc, #56]	; (80048d4 <vPortFree+0xb8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	43db      	mvns	r3, r3
 800489e:	401a      	ands	r2, r3
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80048a4:	f7fe fc0a 	bl	80030bc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <vPortFree+0xbc>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4413      	add	r3, r2
 80048b2:	4a09      	ldr	r2, [pc, #36]	; (80048d8 <vPortFree+0xbc>)
 80048b4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048b6:	6938      	ldr	r0, [r7, #16]
 80048b8:	f000 f874 	bl	80049a4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80048bc:	4b07      	ldr	r3, [pc, #28]	; (80048dc <vPortFree+0xc0>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3301      	adds	r3, #1
 80048c2:	4a06      	ldr	r2, [pc, #24]	; (80048dc <vPortFree+0xc0>)
 80048c4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80048c6:	f7fe fc07 	bl	80030d8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80048ca:	bf00      	nop
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	20012e84 	.word	0x20012e84
 80048d8:	20012e74 	.word	0x20012e74
 80048dc:	20012e80 	.word	0x20012e80

080048e0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048e6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80048ea:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80048ec:	4b27      	ldr	r3, [pc, #156]	; (800498c <prvHeapInit+0xac>)
 80048ee:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00c      	beq.n	8004914 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3307      	adds	r3, #7
 80048fe:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0307 	bic.w	r3, r3, #7
 8004906:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	4a1f      	ldr	r2, [pc, #124]	; (800498c <prvHeapInit+0xac>)
 8004910:	4413      	add	r3, r2
 8004912:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004918:	4a1d      	ldr	r2, [pc, #116]	; (8004990 <prvHeapInit+0xb0>)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800491e:	4b1c      	ldr	r3, [pc, #112]	; (8004990 <prvHeapInit+0xb0>)
 8004920:	2200      	movs	r2, #0
 8004922:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	4413      	add	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800492c:	2208      	movs	r2, #8
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	1a9b      	subs	r3, r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0307 	bic.w	r3, r3, #7
 800493a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4a15      	ldr	r2, [pc, #84]	; (8004994 <prvHeapInit+0xb4>)
 8004940:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004942:	4b14      	ldr	r3, [pc, #80]	; (8004994 <prvHeapInit+0xb4>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2200      	movs	r2, #0
 8004948:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800494a:	4b12      	ldr	r3, [pc, #72]	; (8004994 <prvHeapInit+0xb4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	1ad2      	subs	r2, r2, r3
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004960:	4b0c      	ldr	r3, [pc, #48]	; (8004994 <prvHeapInit+0xb4>)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	4a0a      	ldr	r2, [pc, #40]	; (8004998 <prvHeapInit+0xb8>)
 800496e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4a09      	ldr	r2, [pc, #36]	; (800499c <prvHeapInit+0xbc>)
 8004976:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004978:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <prvHeapInit+0xc0>)
 800497a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800497e:	601a      	str	r2, [r3, #0]
}
 8004980:	bf00      	nop
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	20000268 	.word	0x20000268
 8004990:	20012e68 	.word	0x20012e68
 8004994:	20012e70 	.word	0x20012e70
 8004998:	20012e78 	.word	0x20012e78
 800499c:	20012e74 	.word	0x20012e74
 80049a0:	20012e84 	.word	0x20012e84

080049a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049ac:	4b28      	ldr	r3, [pc, #160]	; (8004a50 <prvInsertBlockIntoFreeList+0xac>)
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	e002      	b.n	80049b8 <prvInsertBlockIntoFreeList+0x14>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d8f7      	bhi.n	80049b2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	4413      	add	r3, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d108      	bne.n	80049e6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	441a      	add	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	441a      	add	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d118      	bne.n	8004a2c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <prvInsertBlockIntoFreeList+0xb0>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d00d      	beq.n	8004a22 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	441a      	add	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	e008      	b.n	8004a34 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a22:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <prvInsertBlockIntoFreeList+0xb0>)
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	e003      	b.n	8004a34 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d002      	beq.n	8004a42 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004a42:	bf00      	nop
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20012e68 	.word	0x20012e68
 8004a54:	20012e70 	.word	0x20012e70

08004a58 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004a5c:	4803      	ldr	r0, [pc, #12]	; (8004a6c <_cbSendSystemDesc+0x14>)
 8004a5e:	f001 faeb 	bl	8006038 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004a62:	4803      	ldr	r0, [pc, #12]	; (8004a70 <_cbSendSystemDesc+0x18>)
 8004a64:	f001 fae8 	bl	8006038 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004a68:	bf00      	nop
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	0800703c 	.word	0x0800703c
 8004a70:	08007084 	.word	0x08007084

08004a74 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004a78:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a7a:	6818      	ldr	r0, [r3, #0]
 8004a7c:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <SEGGER_SYSVIEW_Conf+0x20>)
 8004a7e:	6819      	ldr	r1, [r3, #0]
 8004a80:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <SEGGER_SYSVIEW_Conf+0x24>)
 8004a82:	4a06      	ldr	r2, [pc, #24]	; (8004a9c <SEGGER_SYSVIEW_Conf+0x28>)
 8004a84:	f000 fe56 	bl	8005734 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004a88:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004a8c:	f000 fe96 	bl	80057bc <SEGGER_SYSVIEW_SetRAMBase>
}
 8004a90:	bf00      	nop
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	20000000 	.word	0x20000000
 8004a98:	08004a59 	.word	0x08004a59
 8004a9c:	08007124 	.word	0x08007124

08004aa0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	607b      	str	r3, [r7, #4]
 8004aaa:	e033      	b.n	8004b14 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004aac:	491e      	ldr	r1, [pc, #120]	; (8004b28 <_cbSendTaskList+0x88>)
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	6818      	ldr	r0, [r3, #0]
 8004abc:	491a      	ldr	r1, [pc, #104]	; (8004b28 <_cbSendTaskList+0x88>)
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	3304      	adds	r3, #4
 8004acc:	6819      	ldr	r1, [r3, #0]
 8004ace:	4c16      	ldr	r4, [pc, #88]	; (8004b28 <_cbSendTaskList+0x88>)
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4423      	add	r3, r4
 8004adc:	3308      	adds	r3, #8
 8004ade:	681c      	ldr	r4, [r3, #0]
 8004ae0:	4d11      	ldr	r5, [pc, #68]	; (8004b28 <_cbSendTaskList+0x88>)
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	442b      	add	r3, r5
 8004aee:	330c      	adds	r3, #12
 8004af0:	681d      	ldr	r5, [r3, #0]
 8004af2:	4e0d      	ldr	r6, [pc, #52]	; (8004b28 <_cbSendTaskList+0x88>)
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4433      	add	r3, r6
 8004b00:	3310      	adds	r3, #16
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	462b      	mov	r3, r5
 8004b08:	4622      	mov	r2, r4
 8004b0a:	f000 f8bd 	bl	8004c88 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3301      	adds	r3, #1
 8004b12:	607b      	str	r3, [r7, #4]
 8004b14:	4b05      	ldr	r3, [pc, #20]	; (8004b2c <_cbSendTaskList+0x8c>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d3c6      	bcc.n	8004aac <_cbSendTaskList+0xc>
  }
}
 8004b1e:	bf00      	nop
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b28:	20012e88 	.word	0x20012e88
 8004b2c:	20012f28 	.word	0x20012f28

08004b30 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b34:	b082      	sub	sp, #8
 8004b36:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004b38:	f7fe fb7e 	bl	8003238 <xTaskGetTickCountFromISR>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2200      	movs	r2, #0
 8004b40:	469a      	mov	sl, r3
 8004b42:	4693      	mov	fp, r2
 8004b44:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004b48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	f04f 0a00 	mov.w	sl, #0
 8004b54:	f04f 0b00 	mov.w	fp, #0
 8004b58:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004b5c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004b60:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004b64:	4652      	mov	r2, sl
 8004b66:	465b      	mov	r3, fp
 8004b68:	1a14      	subs	r4, r2, r0
 8004b6a:	eb63 0501 	sbc.w	r5, r3, r1
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	00ab      	lsls	r3, r5, #2
 8004b78:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004b7c:	00a2      	lsls	r2, r4, #2
 8004b7e:	4614      	mov	r4, r2
 8004b80:	461d      	mov	r5, r3
 8004b82:	eb14 0800 	adds.w	r8, r4, r0
 8004b86:	eb45 0901 	adc.w	r9, r5, r1
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b9e:	4690      	mov	r8, r2
 8004ba0:	4699      	mov	r9, r3
 8004ba2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004ba6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004baa:	4610      	mov	r0, r2
 8004bac:	4619      	mov	r1, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004bb8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af02      	add	r7, sp, #8
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004bc6:	2205      	movs	r2, #5
 8004bc8:	492b      	ldr	r1, [pc, #172]	; (8004c78 <SYSVIEW_AddTask+0xc0>)
 8004bca:	68b8      	ldr	r0, [r7, #8]
 8004bcc:	f001 fcea 	bl	80065a4 <memcmp>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d04b      	beq.n	8004c6e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004bd6:	4b29      	ldr	r3, [pc, #164]	; (8004c7c <SYSVIEW_AddTask+0xc4>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b07      	cmp	r3, #7
 8004bdc:	d903      	bls.n	8004be6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004bde:	4828      	ldr	r0, [pc, #160]	; (8004c80 <SYSVIEW_AddTask+0xc8>)
 8004be0:	f001 fc4e 	bl	8006480 <SEGGER_SYSVIEW_Warn>
    return;
 8004be4:	e044      	b.n	8004c70 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004be6:	4b25      	ldr	r3, [pc, #148]	; (8004c7c <SYSVIEW_AddTask+0xc4>)
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	4926      	ldr	r1, [pc, #152]	; (8004c84 <SYSVIEW_AddTask+0xcc>)
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004bfa:	4b20      	ldr	r3, [pc, #128]	; (8004c7c <SYSVIEW_AddTask+0xc4>)
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4921      	ldr	r1, [pc, #132]	; (8004c84 <SYSVIEW_AddTask+0xcc>)
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004c10:	4b1a      	ldr	r3, [pc, #104]	; (8004c7c <SYSVIEW_AddTask+0xc4>)
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	491b      	ldr	r1, [pc, #108]	; (8004c84 <SYSVIEW_AddTask+0xcc>)
 8004c16:	4613      	mov	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	440b      	add	r3, r1
 8004c20:	3308      	adds	r3, #8
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004c26:	4b15      	ldr	r3, [pc, #84]	; (8004c7c <SYSVIEW_AddTask+0xc4>)
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	4916      	ldr	r1, [pc, #88]	; (8004c84 <SYSVIEW_AddTask+0xcc>)
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	330c      	adds	r3, #12
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004c3c:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <SYSVIEW_AddTask+0xc4>)
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	4910      	ldr	r1, [pc, #64]	; (8004c84 <SYSVIEW_AddTask+0xcc>)
 8004c42:	4613      	mov	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	3310      	adds	r3, #16
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004c52:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <SYSVIEW_AddTask+0xc4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	3301      	adds	r3, #1
 8004c58:	4a08      	ldr	r2, [pc, #32]	; (8004c7c <SYSVIEW_AddTask+0xc4>)
 8004c5a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	9300      	str	r3, [sp, #0]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 f80e 	bl	8004c88 <SYSVIEW_SendTaskInfo>
 8004c6c:	e000      	b.n	8004c70 <SYSVIEW_AddTask+0xb8>
    return;
 8004c6e:	bf00      	nop

}
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	08007094 	.word	0x08007094
 8004c7c:	20012f28 	.word	0x20012f28
 8004c80:	0800709c 	.word	0x0800709c
 8004c84:	20012e88 	.word	0x20012e88

08004c88 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08a      	sub	sp, #40	; 0x28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004c96:	f107 0314 	add.w	r3, r7, #20
 8004c9a:	2214      	movs	r2, #20
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f001 fc9e 	bl	80065e0 <memset>
  TaskInfo.TaskID     = TaskID;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004cb8:	f107 0314 	add.w	r3, r7, #20
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f001 f8c3 	bl	8005e48 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004cc2:	bf00      	nop
 8004cc4:	3728      	adds	r7, #40	; 0x28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004cd2:	4b24      	ldr	r3, [pc, #144]	; (8004d64 <_DoInit+0x98>)
 8004cd4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2203      	movs	r2, #3
 8004cda:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2203      	movs	r2, #3
 8004ce0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a20      	ldr	r2, [pc, #128]	; (8004d68 <_DoInit+0x9c>)
 8004ce6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a20      	ldr	r2, [pc, #128]	; (8004d6c <_DoInit+0xa0>)
 8004cec:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cf4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a17      	ldr	r2, [pc, #92]	; (8004d68 <_DoInit+0x9c>)
 8004d0c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a17      	ldr	r2, [pc, #92]	; (8004d70 <_DoInit+0xa4>)
 8004d12:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2210      	movs	r2, #16
 8004d18:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3307      	adds	r3, #7
 8004d30:	4a10      	ldr	r2, [pc, #64]	; (8004d74 <_DoInit+0xa8>)
 8004d32:	6810      	ldr	r0, [r2, #0]
 8004d34:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004d36:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a0e      	ldr	r2, [pc, #56]	; (8004d78 <_DoInit+0xac>)
 8004d3e:	6810      	ldr	r0, [r2, #0]
 8004d40:	6018      	str	r0, [r3, #0]
 8004d42:	8891      	ldrh	r1, [r2, #4]
 8004d44:	7992      	ldrb	r2, [r2, #6]
 8004d46:	8099      	strh	r1, [r3, #4]
 8004d48:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004d4a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2220      	movs	r2, #32
 8004d52:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004d54:	f3bf 8f5f 	dmb	sy
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	20012f2c 	.word	0x20012f2c
 8004d68:	080070ec 	.word	0x080070ec
 8004d6c:	20012fd4 	.word	0x20012fd4
 8004d70:	200133d4 	.word	0x200133d4
 8004d74:	080070f8 	.word	0x080070f8
 8004d78:	080070fc 	.word	0x080070fc

08004d7c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08a      	sub	sp, #40	; 0x28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d905      	bls.n	8004dac <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	3b01      	subs	r3, #1
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24
 8004daa:	e007      	b.n	8004dbc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	69b9      	ldr	r1, [r7, #24]
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	1acb      	subs	r3, r1, r3
 8004db6:	4413      	add	r3, r2
 8004db8:	3b01      	subs	r3, #1
 8004dba:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	bf28      	it	cs
 8004dca:	4613      	movcs	r3, r2
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	bf28      	it	cs
 8004dd6:	4613      	movcs	r3, r2
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	4413      	add	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	6978      	ldr	r0, [r7, #20]
 8004dea:	f001 fbeb 	bl	80065c4 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004dee:	6a3a      	ldr	r2, [r7, #32]
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	4413      	add	r3, r2
 8004df4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	4413      	add	r3, r2
 8004dfc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	4413      	add	r3, r2
 8004e0c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d101      	bne.n	8004e1c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e1c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	69fa      	ldr	r2, [r7, #28]
 8004e24:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1b2      	bne.n	8004d92 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3728      	adds	r7, #40	; 0x28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b088      	sub	sp, #32
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d911      	bls.n	8004e7e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	4413      	add	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	68b9      	ldr	r1, [r7, #8]
 8004e68:	6938      	ldr	r0, [r7, #16]
 8004e6a:	f001 fbab 	bl	80065c4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e6e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004e72:	69fa      	ldr	r2, [r7, #28]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	441a      	add	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004e7c:	e01f      	b.n	8004ebe <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	4413      	add	r3, r2
 8004e8a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	68b9      	ldr	r1, [r7, #8]
 8004e90:	6938      	ldr	r0, [r7, #16]
 8004e92:	f001 fb97 	bl	80065c4 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	4619      	mov	r1, r3
 8004eae:	6938      	ldr	r0, [r7, #16]
 8004eb0:	f001 fb88 	bl	80065c4 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004eb4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	60da      	str	r2, [r3, #12]
}
 8004ebe:	bf00      	nop
 8004ec0:	3720      	adds	r7, #32
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004ec6:	b480      	push	{r7}
 8004ec8:	b087      	sub	sp, #28
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d808      	bhi.n	8004ef4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	1ad2      	subs	r2, r2, r3
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	4413      	add	r3, r2
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	617b      	str	r3, [r7, #20]
 8004ef2:	e004      	b.n	8004efe <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	3b01      	subs	r3, #1
 8004efc:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004efe:	697b      	ldr	r3, [r7, #20]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08c      	sub	sp, #48	; 0x30
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004f18:	4b3e      	ldr	r3, [pc, #248]	; (8005014 <SEGGER_RTT_ReadNoLock+0x108>)
 8004f1a:	623b      	str	r3, [r7, #32]
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <SEGGER_RTT_ReadNoLock+0x1e>
 8004f26:	f7ff fed1 	bl	8004ccc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	4413      	add	r3, r2
 8004f32:	00db      	lsls	r3, r3, #3
 8004f34:	3360      	adds	r3, #96	; 0x60
 8004f36:	4a37      	ldr	r2, [pc, #220]	; (8005014 <SEGGER_RTT_ReadNoLock+0x108>)
 8004f38:	4413      	add	r3, r2
 8004f3a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004f50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d92b      	bls.n	8004fb0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4293      	cmp	r3, r2
 8004f68:	bf28      	it	cs
 8004f6a:	4613      	movcs	r3, r2
 8004f6c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f74:	4413      	add	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	6939      	ldr	r1, [r7, #16]
 8004f7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f7e:	f001 fb21 	bl	80065c4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	4413      	add	r3, r2
 8004f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	4413      	add	r3, r2
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d101      	bne.n	8004fb0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004fac:	2300      	movs	r3, #0
 8004fae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	bf28      	it	cs
 8004fc0:	4613      	movcs	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d019      	beq.n	8004ffe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd0:	4413      	add	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	6939      	ldr	r1, [r7, #16]
 8004fd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fda:	f001 faf3 	bl	80065c4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	4413      	add	r3, r2
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005008:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800500a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800500c:	4618      	mov	r0, r3
 800500e:	3730      	adds	r7, #48	; 0x30
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	20012f2c 	.word	0x20012f2c

08005018 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005018:	b580      	push	{r7, lr}
 800501a:	b088      	sub	sp, #32
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	4613      	mov	r3, r2
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	4413      	add	r3, r2
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	4a1f      	ldr	r2, [pc, #124]	; (80050b4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005036:	4413      	add	r3, r2
 8005038:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	2b02      	cmp	r3, #2
 8005040:	d029      	beq.n	8005096 <SEGGER_RTT_WriteNoLock+0x7e>
 8005042:	2b02      	cmp	r3, #2
 8005044:	d82e      	bhi.n	80050a4 <SEGGER_RTT_WriteNoLock+0x8c>
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <SEGGER_RTT_WriteNoLock+0x38>
 800504a:	2b01      	cmp	r3, #1
 800504c:	d013      	beq.n	8005076 <SEGGER_RTT_WriteNoLock+0x5e>
 800504e:	e029      	b.n	80050a4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005050:	6978      	ldr	r0, [r7, #20]
 8005052:	f7ff ff38 	bl	8004ec6 <_GetAvailWriteSpace>
 8005056:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	429a      	cmp	r2, r3
 800505e:	d202      	bcs.n	8005066 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005060:	2300      	movs	r3, #0
 8005062:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005064:	e021      	b.n	80050aa <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	69b9      	ldr	r1, [r7, #24]
 800506e:	6978      	ldr	r0, [r7, #20]
 8005070:	f7ff fee1 	bl	8004e36 <_WriteNoCheck>
    break;
 8005074:	e019      	b.n	80050aa <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005076:	6978      	ldr	r0, [r7, #20]
 8005078:	f7ff ff25 	bl	8004ec6 <_GetAvailWriteSpace>
 800507c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	4293      	cmp	r3, r2
 8005084:	bf28      	it	cs
 8005086:	4613      	movcs	r3, r2
 8005088:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800508a:	69fa      	ldr	r2, [r7, #28]
 800508c:	69b9      	ldr	r1, [r7, #24]
 800508e:	6978      	ldr	r0, [r7, #20]
 8005090:	f7ff fed1 	bl	8004e36 <_WriteNoCheck>
    break;
 8005094:	e009      	b.n	80050aa <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	69b9      	ldr	r1, [r7, #24]
 800509a:	6978      	ldr	r0, [r7, #20]
 800509c:	f7ff fe6e 	bl	8004d7c <_WriteBlocking>
 80050a0:	61f8      	str	r0, [r7, #28]
    break;
 80050a2:	e002      	b.n	80050aa <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80050a4:	2300      	movs	r3, #0
 80050a6:	61fb      	str	r3, [r7, #28]
    break;
 80050a8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80050aa:	69fb      	ldr	r3, [r7, #28]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3720      	adds	r7, #32
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	20012f2c 	.word	0x20012f2c

080050b8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80050c4:	4b0e      	ldr	r3, [pc, #56]	; (8005100 <SEGGER_RTT_Write+0x48>)
 80050c6:	61fb      	str	r3, [r7, #28]
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <SEGGER_RTT_Write+0x1e>
 80050d2:	f7ff fdfb 	bl	8004ccc <_DoInit>
  SEGGER_RTT_LOCK();
 80050d6:	f3ef 8311 	mrs	r3, BASEPRI
 80050da:	f04f 0120 	mov.w	r1, #32
 80050de:	f381 8811 	msr	BASEPRI, r1
 80050e2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7ff ff95 	bl	8005018 <SEGGER_RTT_WriteNoLock>
 80050ee:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80050f6:	697b      	ldr	r3, [r7, #20]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3720      	adds	r7, #32
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	20012f2c 	.word	0x20012f2c

08005104 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
 8005110:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005112:	4b3d      	ldr	r3, [pc, #244]	; (8005208 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005114:	61bb      	str	r3, [r7, #24]
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005120:	f7ff fdd4 	bl	8004ccc <_DoInit>
  SEGGER_RTT_LOCK();
 8005124:	f3ef 8311 	mrs	r3, BASEPRI
 8005128:	f04f 0120 	mov.w	r1, #32
 800512c:	f381 8811 	msr	BASEPRI, r1
 8005130:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005132:	4b35      	ldr	r3, [pc, #212]	; (8005208 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005134:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800513a:	6939      	ldr	r1, [r7, #16]
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	4613      	mov	r3, r2
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	4413      	add	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	440b      	add	r3, r1
 800514a:	3304      	adds	r3, #4
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d008      	beq.n	8005164 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	3301      	adds	r3, #1
 8005156:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	429a      	cmp	r2, r3
 8005160:	dbeb      	blt.n	800513a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005162:	e000      	b.n	8005166 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005164:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	69fa      	ldr	r2, [r7, #28]
 800516c:	429a      	cmp	r2, r3
 800516e:	da3f      	bge.n	80051f0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005170:	6939      	ldr	r1, [r7, #16]
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	4613      	mov	r3, r2
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	4413      	add	r3, r2
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	440b      	add	r3, r1
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005184:	6939      	ldr	r1, [r7, #16]
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	4613      	mov	r3, r2
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	4413      	add	r3, r2
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	440b      	add	r3, r1
 8005194:	3304      	adds	r3, #4
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800519a:	6939      	ldr	r1, [r7, #16]
 800519c:	69fa      	ldr	r2, [r7, #28]
 800519e:	4613      	mov	r3, r2
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	4413      	add	r3, r2
 80051a4:	00db      	lsls	r3, r3, #3
 80051a6:	440b      	add	r3, r1
 80051a8:	3320      	adds	r3, #32
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80051ae:	6939      	ldr	r1, [r7, #16]
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	4613      	mov	r3, r2
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	4413      	add	r3, r2
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	440b      	add	r3, r1
 80051bc:	3328      	adds	r3, #40	; 0x28
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80051c2:	6939      	ldr	r1, [r7, #16]
 80051c4:	69fa      	ldr	r2, [r7, #28]
 80051c6:	4613      	mov	r3, r2
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	4413      	add	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	440b      	add	r3, r1
 80051d0:	3324      	adds	r3, #36	; 0x24
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80051d6:	6939      	ldr	r1, [r7, #16]
 80051d8:	69fa      	ldr	r2, [r7, #28]
 80051da:	4613      	mov	r3, r2
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	4413      	add	r3, r2
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	440b      	add	r3, r1
 80051e4:	332c      	adds	r3, #44	; 0x2c
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80051ea:	f3bf 8f5f 	dmb	sy
 80051ee:	e002      	b.n	80051f6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80051f0:	f04f 33ff 	mov.w	r3, #4294967295
 80051f4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80051fc:	69fb      	ldr	r3, [r7, #28]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3720      	adds	r7, #32
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20012f2c 	.word	0x20012f2c

0800520c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800520c:	b580      	push	{r7, lr}
 800520e:	b088      	sub	sp, #32
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800521a:	4b33      	ldr	r3, [pc, #204]	; (80052e8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800521c:	61bb      	str	r3, [r7, #24]
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005228:	f7ff fd50 	bl	8004ccc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800522c:	4b2e      	ldr	r3, [pc, #184]	; (80052e8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800522e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	461a      	mov	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4293      	cmp	r3, r2
 800523a:	d24d      	bcs.n	80052d8 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800523c:	f3ef 8311 	mrs	r3, BASEPRI
 8005240:	f04f 0120 	mov.w	r1, #32
 8005244:	f381 8811 	msr	BASEPRI, r1
 8005248:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d031      	beq.n	80052b4 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005250:	6979      	ldr	r1, [r7, #20]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4613      	mov	r3, r2
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	4413      	add	r3, r2
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	440b      	add	r3, r1
 800525e:	3360      	adds	r3, #96	; 0x60
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005264:	6979      	ldr	r1, [r7, #20]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	4613      	mov	r3, r2
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	4413      	add	r3, r2
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	440b      	add	r3, r1
 8005272:	3364      	adds	r3, #100	; 0x64
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005278:	6979      	ldr	r1, [r7, #20]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4613      	mov	r3, r2
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	4413      	add	r3, r2
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	440b      	add	r3, r1
 8005286:	3368      	adds	r3, #104	; 0x68
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800528c:	6979      	ldr	r1, [r7, #20]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	4613      	mov	r3, r2
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	4413      	add	r3, r2
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	440b      	add	r3, r1
 800529a:	3370      	adds	r3, #112	; 0x70
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80052a0:	6979      	ldr	r1, [r7, #20]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4613      	mov	r3, r2
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	4413      	add	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	440b      	add	r3, r1
 80052ae:	336c      	adds	r3, #108	; 0x6c
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80052b4:	6979      	ldr	r1, [r7, #20]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4613      	mov	r3, r2
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	4413      	add	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	440b      	add	r3, r1
 80052c2:	3374      	adds	r3, #116	; 0x74
 80052c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052c6:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052c8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	61fb      	str	r3, [r7, #28]
 80052d6:	e002      	b.n	80052de <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80052d8:	f04f 33ff 	mov.w	r3, #4294967295
 80052dc:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80052de:	69fb      	ldr	r3, [r7, #28]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3720      	adds	r7, #32
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20012f2c 	.word	0x20012f2c

080052ec <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80052fc:	e002      	b.n	8005304 <_EncodeStr+0x18>
    Len++;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	3301      	adds	r3, #1
 8005302:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	4413      	add	r3, r2
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1f6      	bne.n	80052fe <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005310:	693a      	ldr	r2, [r7, #16]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	429a      	cmp	r2, r3
 8005316:	d901      	bls.n	800531c <_EncodeStr+0x30>
    Len = Limit;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	2bfe      	cmp	r3, #254	; 0xfe
 8005320:	d806      	bhi.n	8005330 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	60fa      	str	r2, [r7, #12]
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	e011      	b.n	8005354 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	60fa      	str	r2, [r7, #12]
 8005336:	22ff      	movs	r2, #255	; 0xff
 8005338:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	1c5a      	adds	r2, r3, #1
 800533e:	60fa      	str	r2, [r7, #12]
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	0a19      	lsrs	r1, r3, #8
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	60fa      	str	r2, [r7, #12]
 8005350:	b2ca      	uxtb	r2, r1
 8005352:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005354:	2300      	movs	r3, #0
 8005356:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005358:	e00a      	b.n	8005370 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	1c53      	adds	r3, r2, #1
 800535e:	60bb      	str	r3, [r7, #8]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	1c59      	adds	r1, r3, #1
 8005364:	60f9      	str	r1, [r7, #12]
 8005366:	7812      	ldrb	r2, [r2, #0]
 8005368:	701a      	strb	r2, [r3, #0]
    n++;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	3301      	adds	r3, #1
 800536e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	429a      	cmp	r2, r3
 8005376:	d3f0      	bcc.n	800535a <_EncodeStr+0x6e>
  }
  return pPayload;
 8005378:	68fb      	ldr	r3, [r7, #12]
}
 800537a:	4618      	mov	r0, r3
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	3304      	adds	r3, #4
}
 8005392:	4618      	mov	r0, r3
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
	...

080053a0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053a6:	4b36      	ldr	r3, [pc, #216]	; (8005480 <_HandleIncomingPacket+0xe0>)
 80053a8:	7e1b      	ldrb	r3, [r3, #24]
 80053aa:	4618      	mov	r0, r3
 80053ac:	1cfb      	adds	r3, r7, #3
 80053ae:	2201      	movs	r2, #1
 80053b0:	4619      	mov	r1, r3
 80053b2:	f7ff fdab 	bl	8004f0c <SEGGER_RTT_ReadNoLock>
 80053b6:	4603      	mov	r3, r0
 80053b8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	dd54      	ble.n	800546a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80053c0:	78fb      	ldrb	r3, [r7, #3]
 80053c2:	2b80      	cmp	r3, #128	; 0x80
 80053c4:	d032      	beq.n	800542c <_HandleIncomingPacket+0x8c>
 80053c6:	2b80      	cmp	r3, #128	; 0x80
 80053c8:	dc42      	bgt.n	8005450 <_HandleIncomingPacket+0xb0>
 80053ca:	2b07      	cmp	r3, #7
 80053cc:	dc16      	bgt.n	80053fc <_HandleIncomingPacket+0x5c>
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	dd3e      	ble.n	8005450 <_HandleIncomingPacket+0xb0>
 80053d2:	3b01      	subs	r3, #1
 80053d4:	2b06      	cmp	r3, #6
 80053d6:	d83b      	bhi.n	8005450 <_HandleIncomingPacket+0xb0>
 80053d8:	a201      	add	r2, pc, #4	; (adr r2, 80053e0 <_HandleIncomingPacket+0x40>)
 80053da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053de:	bf00      	nop
 80053e0:	08005403 	.word	0x08005403
 80053e4:	08005409 	.word	0x08005409
 80053e8:	0800540f 	.word	0x0800540f
 80053ec:	08005415 	.word	0x08005415
 80053f0:	0800541b 	.word	0x0800541b
 80053f4:	08005421 	.word	0x08005421
 80053f8:	08005427 	.word	0x08005427
 80053fc:	2b7f      	cmp	r3, #127	; 0x7f
 80053fe:	d036      	beq.n	800546e <_HandleIncomingPacket+0xce>
 8005400:	e026      	b.n	8005450 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005402:	f000 fba7 	bl	8005b54 <SEGGER_SYSVIEW_Start>
      break;
 8005406:	e037      	b.n	8005478 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005408:	f000 fc5e 	bl	8005cc8 <SEGGER_SYSVIEW_Stop>
      break;
 800540c:	e034      	b.n	8005478 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800540e:	f000 fe37 	bl	8006080 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005412:	e031      	b.n	8005478 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005414:	f000 fdfc 	bl	8006010 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005418:	e02e      	b.n	8005478 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800541a:	f000 fc7b 	bl	8005d14 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800541e:	e02b      	b.n	8005478 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005420:	f000 fff0 	bl	8006404 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005424:	e028      	b.n	8005478 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005426:	f000 ffcf 	bl	80063c8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800542a:	e025      	b.n	8005478 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800542c:	4b14      	ldr	r3, [pc, #80]	; (8005480 <_HandleIncomingPacket+0xe0>)
 800542e:	7e1b      	ldrb	r3, [r3, #24]
 8005430:	4618      	mov	r0, r3
 8005432:	1cfb      	adds	r3, r7, #3
 8005434:	2201      	movs	r2, #1
 8005436:	4619      	mov	r1, r3
 8005438:	f7ff fd68 	bl	8004f0c <SEGGER_RTT_ReadNoLock>
 800543c:	4603      	mov	r3, r0
 800543e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	dd15      	ble.n	8005472 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005446:	78fb      	ldrb	r3, [r7, #3]
 8005448:	4618      	mov	r0, r3
 800544a:	f000 ff3d 	bl	80062c8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800544e:	e010      	b.n	8005472 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	b25b      	sxtb	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	da0e      	bge.n	8005476 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005458:	4b09      	ldr	r3, [pc, #36]	; (8005480 <_HandleIncomingPacket+0xe0>)
 800545a:	7e1b      	ldrb	r3, [r3, #24]
 800545c:	4618      	mov	r0, r3
 800545e:	1cfb      	adds	r3, r7, #3
 8005460:	2201      	movs	r2, #1
 8005462:	4619      	mov	r1, r3
 8005464:	f7ff fd52 	bl	8004f0c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005468:	e005      	b.n	8005476 <_HandleIncomingPacket+0xd6>
    }
  }
 800546a:	bf00      	nop
 800546c:	e004      	b.n	8005478 <_HandleIncomingPacket+0xd8>
      break;
 800546e:	bf00      	nop
 8005470:	e002      	b.n	8005478 <_HandleIncomingPacket+0xd8>
      break;
 8005472:	bf00      	nop
 8005474:	e000      	b.n	8005478 <_HandleIncomingPacket+0xd8>
      break;
 8005476:	bf00      	nop
}
 8005478:	bf00      	nop
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	200143ec 	.word	0x200143ec

08005484 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005484:	b580      	push	{r7, lr}
 8005486:	b08c      	sub	sp, #48	; 0x30
 8005488:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800548a:	2301      	movs	r3, #1
 800548c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800548e:	1d3b      	adds	r3, r7, #4
 8005490:	3301      	adds	r3, #1
 8005492:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005498:	4b31      	ldr	r3, [pc, #196]	; (8005560 <_TrySendOverflowPacket+0xdc>)
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	62bb      	str	r3, [r7, #40]	; 0x28
 800549e:	e00b      	b.n	80054b8 <_TrySendOverflowPacket+0x34>
 80054a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a6:	1c59      	adds	r1, r3, #1
 80054a8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80054aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	701a      	strb	r2, [r3, #0]
 80054b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b4:	09db      	lsrs	r3, r3, #7
 80054b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	2b7f      	cmp	r3, #127	; 0x7f
 80054bc:	d8f0      	bhi.n	80054a0 <_TrySendOverflowPacket+0x1c>
 80054be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054cc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80054ce:	4b25      	ldr	r3, [pc, #148]	; (8005564 <_TrySendOverflowPacket+0xe0>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80054d4:	4b22      	ldr	r3, [pc, #136]	; (8005560 <_TrySendOverflowPacket+0xdc>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	623b      	str	r3, [r7, #32]
 80054e6:	e00b      	b.n	8005500 <_TrySendOverflowPacket+0x7c>
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	1c59      	adds	r1, r3, #1
 80054f0:	6279      	str	r1, [r7, #36]	; 0x24
 80054f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	09db      	lsrs	r3, r3, #7
 80054fe:	623b      	str	r3, [r7, #32]
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	2b7f      	cmp	r3, #127	; 0x7f
 8005504:	d8f0      	bhi.n	80054e8 <_TrySendOverflowPacket+0x64>
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	627a      	str	r2, [r7, #36]	; 0x24
 800550c:	6a3a      	ldr	r2, [r7, #32]
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005516:	4b12      	ldr	r3, [pc, #72]	; (8005560 <_TrySendOverflowPacket+0xdc>)
 8005518:	785b      	ldrb	r3, [r3, #1]
 800551a:	4618      	mov	r0, r3
 800551c:	1d3b      	adds	r3, r7, #4
 800551e:	69fa      	ldr	r2, [r7, #28]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	461a      	mov	r2, r3
 8005524:	1d3b      	adds	r3, r7, #4
 8005526:	4619      	mov	r1, r3
 8005528:	f7fa fe52 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800552c:	4603      	mov	r3, r0
 800552e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d009      	beq.n	800554a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005536:	4a0a      	ldr	r2, [pc, #40]	; (8005560 <_TrySendOverflowPacket+0xdc>)
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800553c:	4b08      	ldr	r3, [pc, #32]	; (8005560 <_TrySendOverflowPacket+0xdc>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	3b01      	subs	r3, #1
 8005542:	b2da      	uxtb	r2, r3
 8005544:	4b06      	ldr	r3, [pc, #24]	; (8005560 <_TrySendOverflowPacket+0xdc>)
 8005546:	701a      	strb	r2, [r3, #0]
 8005548:	e004      	b.n	8005554 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800554a:	4b05      	ldr	r3, [pc, #20]	; (8005560 <_TrySendOverflowPacket+0xdc>)
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	3301      	adds	r3, #1
 8005550:	4a03      	ldr	r2, [pc, #12]	; (8005560 <_TrySendOverflowPacket+0xdc>)
 8005552:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005554:	693b      	ldr	r3, [r7, #16]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3730      	adds	r7, #48	; 0x30
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	200143ec 	.word	0x200143ec
 8005564:	e0001004 	.word	0xe0001004

08005568 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005568:	b580      	push	{r7, lr}
 800556a:	b08a      	sub	sp, #40	; 0x28
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005574:	4b6c      	ldr	r3, [pc, #432]	; (8005728 <_SendPacket+0x1c0>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d010      	beq.n	800559e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800557c:	4b6a      	ldr	r3, [pc, #424]	; (8005728 <_SendPacket+0x1c0>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 80a3 	beq.w	80056cc <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005586:	4b68      	ldr	r3, [pc, #416]	; (8005728 <_SendPacket+0x1c0>)
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b02      	cmp	r3, #2
 800558c:	d109      	bne.n	80055a2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800558e:	f7ff ff79 	bl	8005484 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005592:	4b65      	ldr	r3, [pc, #404]	; (8005728 <_SendPacket+0x1c0>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b01      	cmp	r3, #1
 8005598:	f040 809a 	bne.w	80056d0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800559c:	e001      	b.n	80055a2 <_SendPacket+0x3a>
    goto Send;
 800559e:	bf00      	nop
 80055a0:	e000      	b.n	80055a4 <_SendPacket+0x3c>
Send:
 80055a2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b1f      	cmp	r3, #31
 80055a8:	d809      	bhi.n	80055be <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80055aa:	4b5f      	ldr	r3, [pc, #380]	; (8005728 <_SendPacket+0x1c0>)
 80055ac:	69da      	ldr	r2, [r3, #28]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	fa22 f303 	lsr.w	r3, r2, r3
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f040 808b 	bne.w	80056d4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b17      	cmp	r3, #23
 80055c2:	d807      	bhi.n	80055d4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	3b01      	subs	r3, #1
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	701a      	strb	r2, [r3, #0]
 80055d2:	e03d      	b.n	8005650 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	2b7f      	cmp	r3, #127	; 0x7f
 80055e0:	d912      	bls.n	8005608 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	09da      	lsrs	r2, r3, #7
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	3b01      	subs	r3, #1
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	3a01      	subs	r2, #1
 80055fa:	60fa      	str	r2, [r7, #12]
 80055fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005600:	b2da      	uxtb	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	701a      	strb	r2, [r3, #0]
 8005606:	e006      	b.n	8005616 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	3b01      	subs	r3, #1
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	b2da      	uxtb	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b7f      	cmp	r3, #127	; 0x7f
 800561a:	d912      	bls.n	8005642 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	09da      	lsrs	r2, r3, #7
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3b01      	subs	r3, #1
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	b2db      	uxtb	r3, r3
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	3a01      	subs	r2, #1
 8005634:	60fa      	str	r2, [r7, #12]
 8005636:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800563a:	b2da      	uxtb	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	701a      	strb	r2, [r3, #0]
 8005640:	e006      	b.n	8005650 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3b01      	subs	r3, #1
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	b2da      	uxtb	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005650:	4b36      	ldr	r3, [pc, #216]	; (800572c <_SendPacket+0x1c4>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005656:	4b34      	ldr	r3, [pc, #208]	; (8005728 <_SendPacket+0x1c0>)
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	627b      	str	r3, [r7, #36]	; 0x24
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	623b      	str	r3, [r7, #32]
 8005668:	e00b      	b.n	8005682 <_SendPacket+0x11a>
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	b2da      	uxtb	r2, r3
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	1c59      	adds	r1, r3, #1
 8005672:	6279      	str	r1, [r7, #36]	; 0x24
 8005674:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	701a      	strb	r2, [r3, #0]
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	09db      	lsrs	r3, r3, #7
 8005680:	623b      	str	r3, [r7, #32]
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	2b7f      	cmp	r3, #127	; 0x7f
 8005686:	d8f0      	bhi.n	800566a <_SendPacket+0x102>
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	627a      	str	r2, [r7, #36]	; 0x24
 800568e:	6a3a      	ldr	r2, [r7, #32]
 8005690:	b2d2      	uxtb	r2, r2
 8005692:	701a      	strb	r2, [r3, #0]
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005698:	4b23      	ldr	r3, [pc, #140]	; (8005728 <_SendPacket+0x1c0>)
 800569a:	785b      	ldrb	r3, [r3, #1]
 800569c:	4618      	mov	r0, r3
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	68f9      	ldr	r1, [r7, #12]
 80056a8:	f7fa fd92 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80056ac:	4603      	mov	r3, r0
 80056ae:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80056b6:	4a1c      	ldr	r2, [pc, #112]	; (8005728 <_SendPacket+0x1c0>)
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	60d3      	str	r3, [r2, #12]
 80056bc:	e00b      	b.n	80056d6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80056be:	4b1a      	ldr	r3, [pc, #104]	; (8005728 <_SendPacket+0x1c0>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	3301      	adds	r3, #1
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	4b18      	ldr	r3, [pc, #96]	; (8005728 <_SendPacket+0x1c0>)
 80056c8:	701a      	strb	r2, [r3, #0]
 80056ca:	e004      	b.n	80056d6 <_SendPacket+0x16e>
    goto SendDone;
 80056cc:	bf00      	nop
 80056ce:	e002      	b.n	80056d6 <_SendPacket+0x16e>
      goto SendDone;
 80056d0:	bf00      	nop
 80056d2:	e000      	b.n	80056d6 <_SendPacket+0x16e>
      goto SendDone;
 80056d4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80056d6:	4b14      	ldr	r3, [pc, #80]	; (8005728 <_SendPacket+0x1c0>)
 80056d8:	7e1b      	ldrb	r3, [r3, #24]
 80056da:	4619      	mov	r1, r3
 80056dc:	4a14      	ldr	r2, [pc, #80]	; (8005730 <_SendPacket+0x1c8>)
 80056de:	460b      	mov	r3, r1
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	440b      	add	r3, r1
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	4413      	add	r3, r2
 80056e8:	336c      	adds	r3, #108	; 0x6c
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	4b0e      	ldr	r3, [pc, #56]	; (8005728 <_SendPacket+0x1c0>)
 80056ee:	7e1b      	ldrb	r3, [r3, #24]
 80056f0:	4618      	mov	r0, r3
 80056f2:	490f      	ldr	r1, [pc, #60]	; (8005730 <_SendPacket+0x1c8>)
 80056f4:	4603      	mov	r3, r0
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	4403      	add	r3, r0
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	440b      	add	r3, r1
 80056fe:	3370      	adds	r3, #112	; 0x70
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d00b      	beq.n	800571e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005706:	4b08      	ldr	r3, [pc, #32]	; (8005728 <_SendPacket+0x1c0>)
 8005708:	789b      	ldrb	r3, [r3, #2]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d107      	bne.n	800571e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800570e:	4b06      	ldr	r3, [pc, #24]	; (8005728 <_SendPacket+0x1c0>)
 8005710:	2201      	movs	r2, #1
 8005712:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005714:	f7ff fe44 	bl	80053a0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005718:	4b03      	ldr	r3, [pc, #12]	; (8005728 <_SendPacket+0x1c0>)
 800571a:	2200      	movs	r2, #0
 800571c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800571e:	bf00      	nop
 8005720:	3728      	adds	r7, #40	; 0x28
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	200143ec 	.word	0x200143ec
 800572c:	e0001004 	.word	0xe0001004
 8005730:	20012f2c 	.word	0x20012f2c

08005734 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af02      	add	r7, sp, #8
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
 8005740:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005742:	2300      	movs	r3, #0
 8005744:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005748:	4917      	ldr	r1, [pc, #92]	; (80057a8 <SEGGER_SYSVIEW_Init+0x74>)
 800574a:	4818      	ldr	r0, [pc, #96]	; (80057ac <SEGGER_SYSVIEW_Init+0x78>)
 800574c:	f7ff fcda 	bl	8005104 <SEGGER_RTT_AllocUpBuffer>
 8005750:	4603      	mov	r3, r0
 8005752:	b2da      	uxtb	r2, r3
 8005754:	4b16      	ldr	r3, [pc, #88]	; (80057b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005756:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005758:	4b15      	ldr	r3, [pc, #84]	; (80057b0 <SEGGER_SYSVIEW_Init+0x7c>)
 800575a:	785a      	ldrb	r2, [r3, #1]
 800575c:	4b14      	ldr	r3, [pc, #80]	; (80057b0 <SEGGER_SYSVIEW_Init+0x7c>)
 800575e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005760:	4b13      	ldr	r3, [pc, #76]	; (80057b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005762:	7e1b      	ldrb	r3, [r3, #24]
 8005764:	4618      	mov	r0, r3
 8005766:	2300      	movs	r3, #0
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	2308      	movs	r3, #8
 800576c:	4a11      	ldr	r2, [pc, #68]	; (80057b4 <SEGGER_SYSVIEW_Init+0x80>)
 800576e:	490f      	ldr	r1, [pc, #60]	; (80057ac <SEGGER_SYSVIEW_Init+0x78>)
 8005770:	f7ff fd4c 	bl	800520c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005774:	4b0e      	ldr	r3, [pc, #56]	; (80057b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005776:	2200      	movs	r2, #0
 8005778:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800577a:	4b0f      	ldr	r3, [pc, #60]	; (80057b8 <SEGGER_SYSVIEW_Init+0x84>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a0c      	ldr	r2, [pc, #48]	; (80057b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005780:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005782:	4a0b      	ldr	r2, [pc, #44]	; (80057b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005788:	4a09      	ldr	r2, [pc, #36]	; (80057b0 <SEGGER_SYSVIEW_Init+0x7c>)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800578e:	4a08      	ldr	r2, [pc, #32]	; (80057b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005794:	4a06      	ldr	r2, [pc, #24]	; (80057b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800579a:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <SEGGER_SYSVIEW_Init+0x7c>)
 800579c:	2200      	movs	r2, #0
 800579e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80057a0:	bf00      	nop
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	200133e4 	.word	0x200133e4
 80057ac:	08007104 	.word	0x08007104
 80057b0:	200143ec 	.word	0x200143ec
 80057b4:	200143e4 	.word	0x200143e4
 80057b8:	e0001004 	.word	0xe0001004

080057bc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80057c4:	4a04      	ldr	r2, [pc, #16]	; (80057d8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6113      	str	r3, [r2, #16]
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	200143ec 	.word	0x200143ec

080057dc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80057e4:	f3ef 8311 	mrs	r3, BASEPRI
 80057e8:	f04f 0120 	mov.w	r1, #32
 80057ec:	f381 8811 	msr	BASEPRI, r1
 80057f0:	60fb      	str	r3, [r7, #12]
 80057f2:	4808      	ldr	r0, [pc, #32]	; (8005814 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80057f4:	f7ff fdc7 	bl	8005386 <_PreparePacket>
 80057f8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	68b9      	ldr	r1, [r7, #8]
 80057fe:	68b8      	ldr	r0, [r7, #8]
 8005800:	f7ff feb2 	bl	8005568 <_SendPacket>
  RECORD_END();
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f383 8811 	msr	BASEPRI, r3
}
 800580a:	bf00      	nop
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	2001441c 	.word	0x2001441c

08005818 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005818:	b580      	push	{r7, lr}
 800581a:	b088      	sub	sp, #32
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005822:	f3ef 8311 	mrs	r3, BASEPRI
 8005826:	f04f 0120 	mov.w	r1, #32
 800582a:	f381 8811 	msr	BASEPRI, r1
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	4816      	ldr	r0, [pc, #88]	; (800588c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005832:	f7ff fda8 	bl	8005386 <_PreparePacket>
 8005836:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	61fb      	str	r3, [r7, #28]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	61bb      	str	r3, [r7, #24]
 8005844:	e00b      	b.n	800585e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	b2da      	uxtb	r2, r3
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	1c59      	adds	r1, r3, #1
 800584e:	61f9      	str	r1, [r7, #28]
 8005850:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	701a      	strb	r2, [r3, #0]
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	09db      	lsrs	r3, r3, #7
 800585c:	61bb      	str	r3, [r7, #24]
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	2b7f      	cmp	r3, #127	; 0x7f
 8005862:	d8f0      	bhi.n	8005846 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	61fa      	str	r2, [r7, #28]
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	68f9      	ldr	r1, [r7, #12]
 8005878:	6938      	ldr	r0, [r7, #16]
 800587a:	f7ff fe75 	bl	8005568 <_SendPacket>
  RECORD_END();
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f383 8811 	msr	BASEPRI, r3
}
 8005884:	bf00      	nop
 8005886:	3720      	adds	r7, #32
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	2001441c 	.word	0x2001441c

08005890 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005890:	b580      	push	{r7, lr}
 8005892:	b08c      	sub	sp, #48	; 0x30
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800589c:	f3ef 8311 	mrs	r3, BASEPRI
 80058a0:	f04f 0120 	mov.w	r1, #32
 80058a4:	f381 8811 	msr	BASEPRI, r1
 80058a8:	61fb      	str	r3, [r7, #28]
 80058aa:	4825      	ldr	r0, [pc, #148]	; (8005940 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80058ac:	f7ff fd6b 	bl	8005386 <_PreparePacket>
 80058b0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80058be:	e00b      	b.n	80058d8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80058c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c6:	1c59      	adds	r1, r3, #1
 80058c8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80058ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	701a      	strb	r2, [r3, #0]
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	09db      	lsrs	r3, r3, #7
 80058d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80058d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058da:	2b7f      	cmp	r3, #127	; 0x7f
 80058dc:	d8f0      	bhi.n	80058c0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80058de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	701a      	strb	r2, [r3, #0]
 80058ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	627b      	str	r3, [r7, #36]	; 0x24
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	623b      	str	r3, [r7, #32]
 80058f6:	e00b      	b.n	8005910 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80058f8:	6a3b      	ldr	r3, [r7, #32]
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	1c59      	adds	r1, r3, #1
 8005900:	6279      	str	r1, [r7, #36]	; 0x24
 8005902:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	701a      	strb	r2, [r3, #0]
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	09db      	lsrs	r3, r3, #7
 800590e:	623b      	str	r3, [r7, #32]
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	2b7f      	cmp	r3, #127	; 0x7f
 8005914:	d8f0      	bhi.n	80058f8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	627a      	str	r2, [r7, #36]	; 0x24
 800591c:	6a3a      	ldr	r2, [r7, #32]
 800591e:	b2d2      	uxtb	r2, r2
 8005920:	701a      	strb	r2, [r3, #0]
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	6979      	ldr	r1, [r7, #20]
 800592a:	69b8      	ldr	r0, [r7, #24]
 800592c:	f7ff fe1c 	bl	8005568 <_SendPacket>
  RECORD_END();
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	f383 8811 	msr	BASEPRI, r3
}
 8005936:	bf00      	nop
 8005938:	3730      	adds	r7, #48	; 0x30
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	2001441c 	.word	0x2001441c

08005944 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005944:	b580      	push	{r7, lr}
 8005946:	b08e      	sub	sp, #56	; 0x38
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
 8005950:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005952:	f3ef 8311 	mrs	r3, BASEPRI
 8005956:	f04f 0120 	mov.w	r1, #32
 800595a:	f381 8811 	msr	BASEPRI, r1
 800595e:	61fb      	str	r3, [r7, #28]
 8005960:	4832      	ldr	r0, [pc, #200]	; (8005a2c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005962:	f7ff fd10 	bl	8005386 <_PreparePacket>
 8005966:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	637b      	str	r3, [r7, #52]	; 0x34
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	633b      	str	r3, [r7, #48]	; 0x30
 8005974:	e00b      	b.n	800598e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	b2da      	uxtb	r2, r3
 800597a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597c:	1c59      	adds	r1, r3, #1
 800597e:	6379      	str	r1, [r7, #52]	; 0x34
 8005980:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	701a      	strb	r2, [r3, #0]
 8005988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598a:	09db      	lsrs	r3, r3, #7
 800598c:	633b      	str	r3, [r7, #48]	; 0x30
 800598e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005990:	2b7f      	cmp	r3, #127	; 0x7f
 8005992:	d8f0      	bhi.n	8005976 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	637a      	str	r2, [r7, #52]	; 0x34
 800599a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800599c:	b2d2      	uxtb	r2, r2
 800599e:	701a      	strb	r2, [r3, #0]
 80059a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80059ac:	e00b      	b.n	80059c6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b4:	1c59      	adds	r1, r3, #1
 80059b6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80059b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c2:	09db      	lsrs	r3, r3, #7
 80059c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c8:	2b7f      	cmp	r3, #127	; 0x7f
 80059ca:	d8f0      	bhi.n	80059ae <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80059cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	701a      	strb	r2, [r3, #0]
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	627b      	str	r3, [r7, #36]	; 0x24
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	623b      	str	r3, [r7, #32]
 80059e4:	e00b      	b.n	80059fe <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	1c59      	adds	r1, r3, #1
 80059ee:	6279      	str	r1, [r7, #36]	; 0x24
 80059f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	701a      	strb	r2, [r3, #0]
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	09db      	lsrs	r3, r3, #7
 80059fc:	623b      	str	r3, [r7, #32]
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	2b7f      	cmp	r3, #127	; 0x7f
 8005a02:	d8f0      	bhi.n	80059e6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	627a      	str	r2, [r7, #36]	; 0x24
 8005a0a:	6a3a      	ldr	r2, [r7, #32]
 8005a0c:	b2d2      	uxtb	r2, r2
 8005a0e:	701a      	strb	r2, [r3, #0]
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	6979      	ldr	r1, [r7, #20]
 8005a18:	69b8      	ldr	r0, [r7, #24]
 8005a1a:	f7ff fda5 	bl	8005568 <_SendPacket>
  RECORD_END();
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	f383 8811 	msr	BASEPRI, r3
}
 8005a24:	bf00      	nop
 8005a26:	3738      	adds	r7, #56	; 0x38
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	2001441c 	.word	0x2001441c

08005a30 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b090      	sub	sp, #64	; 0x40
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a3e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a42:	f04f 0120 	mov.w	r1, #32
 8005a46:	f381 8811 	msr	BASEPRI, r1
 8005a4a:	61fb      	str	r3, [r7, #28]
 8005a4c:	4840      	ldr	r0, [pc, #256]	; (8005b50 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005a4e:	f7ff fc9a 	bl	8005386 <_PreparePacket>
 8005a52:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a60:	e00b      	b.n	8005a7a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a68:	1c59      	adds	r1, r3, #1
 8005a6a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005a6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	701a      	strb	r2, [r3, #0]
 8005a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a76:	09db      	lsrs	r3, r3, #7
 8005a78:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a7e:	d8f0      	bhi.n	8005a62 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a88:	b2d2      	uxtb	r2, r2
 8005a8a:	701a      	strb	r2, [r3, #0]
 8005a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	637b      	str	r3, [r7, #52]	; 0x34
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	633b      	str	r3, [r7, #48]	; 0x30
 8005a98:	e00b      	b.n	8005ab2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa0:	1c59      	adds	r1, r3, #1
 8005aa2:	6379      	str	r1, [r7, #52]	; 0x34
 8005aa4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aae:	09db      	lsrs	r3, r3, #7
 8005ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ab6:	d8f0      	bhi.n	8005a9a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	637a      	str	r2, [r7, #52]	; 0x34
 8005abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac0:	b2d2      	uxtb	r2, r2
 8005ac2:	701a      	strb	r2, [r3, #0]
 8005ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad0:	e00b      	b.n	8005aea <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad8:	1c59      	adds	r1, r3, #1
 8005ada:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005adc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	701a      	strb	r2, [r3, #0]
 8005ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae6:	09db      	lsrs	r3, r3, #7
 8005ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aec:	2b7f      	cmp	r3, #127	; 0x7f
 8005aee:	d8f0      	bhi.n	8005ad2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005af8:	b2d2      	uxtb	r2, r2
 8005afa:	701a      	strb	r2, [r3, #0]
 8005afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24
 8005b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b06:	623b      	str	r3, [r7, #32]
 8005b08:	e00b      	b.n	8005b22 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	1c59      	adds	r1, r3, #1
 8005b12:	6279      	str	r1, [r7, #36]	; 0x24
 8005b14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	6a3b      	ldr	r3, [r7, #32]
 8005b1e:	09db      	lsrs	r3, r3, #7
 8005b20:	623b      	str	r3, [r7, #32]
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	2b7f      	cmp	r3, #127	; 0x7f
 8005b26:	d8f0      	bhi.n	8005b0a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	627a      	str	r2, [r7, #36]	; 0x24
 8005b2e:	6a3a      	ldr	r2, [r7, #32]
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	6979      	ldr	r1, [r7, #20]
 8005b3c:	69b8      	ldr	r0, [r7, #24]
 8005b3e:	f7ff fd13 	bl	8005568 <_SendPacket>
  RECORD_END();
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	f383 8811 	msr	BASEPRI, r3
}
 8005b48:	bf00      	nop
 8005b4a:	3740      	adds	r7, #64	; 0x40
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	2001441c 	.word	0x2001441c

08005b54 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b08c      	sub	sp, #48	; 0x30
 8005b58:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005b5a:	4b58      	ldr	r3, [pc, #352]	; (8005cbc <SEGGER_SYSVIEW_Start+0x168>)
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005b60:	f3ef 8311 	mrs	r3, BASEPRI
 8005b64:	f04f 0120 	mov.w	r1, #32
 8005b68:	f381 8811 	msr	BASEPRI, r1
 8005b6c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005b6e:	4b53      	ldr	r3, [pc, #332]	; (8005cbc <SEGGER_SYSVIEW_Start+0x168>)
 8005b70:	785b      	ldrb	r3, [r3, #1]
 8005b72:	220a      	movs	r2, #10
 8005b74:	4952      	ldr	r1, [pc, #328]	; (8005cc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7fa fb2a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005b82:	200a      	movs	r0, #10
 8005b84:	f7ff fe2a 	bl	80057dc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b88:	f3ef 8311 	mrs	r3, BASEPRI
 8005b8c:	f04f 0120 	mov.w	r1, #32
 8005b90:	f381 8811 	msr	BASEPRI, r1
 8005b94:	60bb      	str	r3, [r7, #8]
 8005b96:	484b      	ldr	r0, [pc, #300]	; (8005cc4 <SEGGER_SYSVIEW_Start+0x170>)
 8005b98:	f7ff fbf5 	bl	8005386 <_PreparePacket>
 8005b9c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ba6:	4b45      	ldr	r3, [pc, #276]	; (8005cbc <SEGGER_SYSVIEW_Start+0x168>)
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bac:	e00b      	b.n	8005bc6 <SEGGER_SYSVIEW_Start+0x72>
 8005bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb4:	1c59      	adds	r1, r3, #1
 8005bb6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005bb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	701a      	strb	r2, [r3, #0]
 8005bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc2:	09db      	lsrs	r3, r3, #7
 8005bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	2b7f      	cmp	r3, #127	; 0x7f
 8005bca:	d8f0      	bhi.n	8005bae <SEGGER_SYSVIEW_Start+0x5a>
 8005bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bce:	1c5a      	adds	r2, r3, #1
 8005bd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	701a      	strb	r2, [r3, #0]
 8005bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bda:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
 8005be0:	4b36      	ldr	r3, [pc, #216]	; (8005cbc <SEGGER_SYSVIEW_Start+0x168>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	623b      	str	r3, [r7, #32]
 8005be6:	e00b      	b.n	8005c00 <SEGGER_SYSVIEW_Start+0xac>
 8005be8:	6a3b      	ldr	r3, [r7, #32]
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	1c59      	adds	r1, r3, #1
 8005bf0:	6279      	str	r1, [r7, #36]	; 0x24
 8005bf2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bf6:	b2d2      	uxtb	r2, r2
 8005bf8:	701a      	strb	r2, [r3, #0]
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	09db      	lsrs	r3, r3, #7
 8005bfe:	623b      	str	r3, [r7, #32]
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	2b7f      	cmp	r3, #127	; 0x7f
 8005c04:	d8f0      	bhi.n	8005be8 <SEGGER_SYSVIEW_Start+0x94>
 8005c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c08:	1c5a      	adds	r2, r3, #1
 8005c0a:	627a      	str	r2, [r7, #36]	; 0x24
 8005c0c:	6a3a      	ldr	r2, [r7, #32]
 8005c0e:	b2d2      	uxtb	r2, r2
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	61fb      	str	r3, [r7, #28]
 8005c1a:	4b28      	ldr	r3, [pc, #160]	; (8005cbc <SEGGER_SYSVIEW_Start+0x168>)
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	61bb      	str	r3, [r7, #24]
 8005c20:	e00b      	b.n	8005c3a <SEGGER_SYSVIEW_Start+0xe6>
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	1c59      	adds	r1, r3, #1
 8005c2a:	61f9      	str	r1, [r7, #28]
 8005c2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c30:	b2d2      	uxtb	r2, r2
 8005c32:	701a      	strb	r2, [r3, #0]
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	09db      	lsrs	r3, r3, #7
 8005c38:	61bb      	str	r3, [r7, #24]
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c3e:	d8f0      	bhi.n	8005c22 <SEGGER_SYSVIEW_Start+0xce>
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	61fa      	str	r2, [r7, #28]
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	701a      	strb	r2, [r3, #0]
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	2300      	movs	r3, #0
 8005c56:	613b      	str	r3, [r7, #16]
 8005c58:	e00b      	b.n	8005c72 <SEGGER_SYSVIEW_Start+0x11e>
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	b2da      	uxtb	r2, r3
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	1c59      	adds	r1, r3, #1
 8005c62:	6179      	str	r1, [r7, #20]
 8005c64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c68:	b2d2      	uxtb	r2, r2
 8005c6a:	701a      	strb	r2, [r3, #0]
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	09db      	lsrs	r3, r3, #7
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	2b7f      	cmp	r3, #127	; 0x7f
 8005c76:	d8f0      	bhi.n	8005c5a <SEGGER_SYSVIEW_Start+0x106>
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	617a      	str	r2, [r7, #20]
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	b2d2      	uxtb	r2, r2
 8005c82:	701a      	strb	r2, [r3, #0]
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005c88:	2218      	movs	r2, #24
 8005c8a:	6839      	ldr	r1, [r7, #0]
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7ff fc6b 	bl	8005568 <_SendPacket>
      RECORD_END();
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005c98:	4b08      	ldr	r3, [pc, #32]	; (8005cbc <SEGGER_SYSVIEW_Start+0x168>)
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005ca0:	4b06      	ldr	r3, [pc, #24]	; (8005cbc <SEGGER_SYSVIEW_Start+0x168>)
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005ca6:	f000 f9eb 	bl	8006080 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005caa:	f000 f9b1 	bl	8006010 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005cae:	f000 fba9 	bl	8006404 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005cb2:	bf00      	nop
 8005cb4:	3730      	adds	r7, #48	; 0x30
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	200143ec 	.word	0x200143ec
 8005cc0:	0800712c 	.word	0x0800712c
 8005cc4:	2001441c 	.word	0x2001441c

08005cc8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005cce:	f3ef 8311 	mrs	r3, BASEPRI
 8005cd2:	f04f 0120 	mov.w	r1, #32
 8005cd6:	f381 8811 	msr	BASEPRI, r1
 8005cda:	607b      	str	r3, [r7, #4]
 8005cdc:	480b      	ldr	r0, [pc, #44]	; (8005d0c <SEGGER_SYSVIEW_Stop+0x44>)
 8005cde:	f7ff fb52 	bl	8005386 <_PreparePacket>
 8005ce2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005ce4:	4b0a      	ldr	r3, [pc, #40]	; (8005d10 <SEGGER_SYSVIEW_Stop+0x48>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d007      	beq.n	8005cfc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005cec:	220b      	movs	r2, #11
 8005cee:	6839      	ldr	r1, [r7, #0]
 8005cf0:	6838      	ldr	r0, [r7, #0]
 8005cf2:	f7ff fc39 	bl	8005568 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005cf6:	4b06      	ldr	r3, [pc, #24]	; (8005d10 <SEGGER_SYSVIEW_Stop+0x48>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f383 8811 	msr	BASEPRI, r3
}
 8005d02:	bf00      	nop
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	2001441c 	.word	0x2001441c
 8005d10:	200143ec 	.word	0x200143ec

08005d14 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08c      	sub	sp, #48	; 0x30
 8005d18:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d1a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d1e:	f04f 0120 	mov.w	r1, #32
 8005d22:	f381 8811 	msr	BASEPRI, r1
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	4845      	ldr	r0, [pc, #276]	; (8005e40 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005d2a:	f7ff fb2c 	bl	8005386 <_PreparePacket>
 8005d2e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d38:	4b42      	ldr	r3, [pc, #264]	; (8005e44 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d3e:	e00b      	b.n	8005d58 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d46:	1c59      	adds	r1, r3, #1
 8005d48:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d54:	09db      	lsrs	r3, r3, #7
 8005d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d5c:	d8f0      	bhi.n	8005d40 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	627b      	str	r3, [r7, #36]	; 0x24
 8005d72:	4b34      	ldr	r3, [pc, #208]	; (8005e44 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	623b      	str	r3, [r7, #32]
 8005d78:	e00b      	b.n	8005d92 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	1c59      	adds	r1, r3, #1
 8005d82:	6279      	str	r1, [r7, #36]	; 0x24
 8005d84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	701a      	strb	r2, [r3, #0]
 8005d8c:	6a3b      	ldr	r3, [r7, #32]
 8005d8e:	09db      	lsrs	r3, r3, #7
 8005d90:	623b      	str	r3, [r7, #32]
 8005d92:	6a3b      	ldr	r3, [r7, #32]
 8005d94:	2b7f      	cmp	r3, #127	; 0x7f
 8005d96:	d8f0      	bhi.n	8005d7a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	1c5a      	adds	r2, r3, #1
 8005d9c:	627a      	str	r2, [r7, #36]	; 0x24
 8005d9e:	6a3a      	ldr	r2, [r7, #32]
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	701a      	strb	r2, [r3, #0]
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	61fb      	str	r3, [r7, #28]
 8005dac:	4b25      	ldr	r3, [pc, #148]	; (8005e44 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	61bb      	str	r3, [r7, #24]
 8005db2:	e00b      	b.n	8005dcc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	1c59      	adds	r1, r3, #1
 8005dbc:	61f9      	str	r1, [r7, #28]
 8005dbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	09db      	lsrs	r3, r3, #7
 8005dca:	61bb      	str	r3, [r7, #24]
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	2b7f      	cmp	r3, #127	; 0x7f
 8005dd0:	d8f0      	bhi.n	8005db4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	1c5a      	adds	r2, r3, #1
 8005dd6:	61fa      	str	r2, [r7, #28]
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	b2d2      	uxtb	r2, r2
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	617b      	str	r3, [r7, #20]
 8005de6:	2300      	movs	r3, #0
 8005de8:	613b      	str	r3, [r7, #16]
 8005dea:	e00b      	b.n	8005e04 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	1c59      	adds	r1, r3, #1
 8005df4:	6179      	str	r1, [r7, #20]
 8005df6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dfa:	b2d2      	uxtb	r2, r2
 8005dfc:	701a      	strb	r2, [r3, #0]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	09db      	lsrs	r3, r3, #7
 8005e02:	613b      	str	r3, [r7, #16]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	2b7f      	cmp	r3, #127	; 0x7f
 8005e08:	d8f0      	bhi.n	8005dec <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	1c5a      	adds	r2, r3, #1
 8005e0e:	617a      	str	r2, [r7, #20]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	b2d2      	uxtb	r2, r2
 8005e14:	701a      	strb	r2, [r3, #0]
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005e1a:	2218      	movs	r2, #24
 8005e1c:	6879      	ldr	r1, [r7, #4]
 8005e1e:	68b8      	ldr	r0, [r7, #8]
 8005e20:	f7ff fba2 	bl	8005568 <_SendPacket>
  RECORD_END();
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005e2a:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d002      	beq.n	8005e38 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005e32:	4b04      	ldr	r3, [pc, #16]	; (8005e44 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	4798      	blx	r3
  }
}
 8005e38:	bf00      	nop
 8005e3a:	3730      	adds	r7, #48	; 0x30
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	2001441c 	.word	0x2001441c
 8005e44:	200143ec 	.word	0x200143ec

08005e48 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b092      	sub	sp, #72	; 0x48
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005e50:	f3ef 8311 	mrs	r3, BASEPRI
 8005e54:	f04f 0120 	mov.w	r1, #32
 8005e58:	f381 8811 	msr	BASEPRI, r1
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	486a      	ldr	r0, [pc, #424]	; (8006008 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005e60:	f7ff fa91 	bl	8005386 <_PreparePacket>
 8005e64:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	4b66      	ldr	r3, [pc, #408]	; (800600c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	643b      	str	r3, [r7, #64]	; 0x40
 8005e7a:	e00b      	b.n	8005e94 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e82:	1c59      	adds	r1, r3, #1
 8005e84:	6479      	str	r1, [r7, #68]	; 0x44
 8005e86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e90:	09db      	lsrs	r3, r3, #7
 8005e92:	643b      	str	r3, [r7, #64]	; 0x40
 8005e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e96:	2b7f      	cmp	r3, #127	; 0x7f
 8005e98:	d8f0      	bhi.n	8005e7c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	647a      	str	r2, [r7, #68]	; 0x44
 8005ea0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005eb4:	e00b      	b.n	8005ece <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ebc:	1c59      	adds	r1, r3, #1
 8005ebe:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005ec0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ec4:	b2d2      	uxtb	r2, r2
 8005ec6:	701a      	strb	r2, [r3, #0]
 8005ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eca:	09db      	lsrs	r3, r3, #7
 8005ecc:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ed2:	d8f0      	bhi.n	8005eb6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005eda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005edc:	b2d2      	uxtb	r2, r2
 8005ede:	701a      	strb	r2, [r3, #0]
 8005ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	4619      	mov	r1, r3
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f7ff f9fd 	bl	80052ec <_EncodeStr>
 8005ef2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005ef4:	2209      	movs	r2, #9
 8005ef6:	68f9      	ldr	r1, [r7, #12]
 8005ef8:	6938      	ldr	r0, [r7, #16]
 8005efa:	f7ff fb35 	bl	8005568 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	637b      	str	r3, [r7, #52]	; 0x34
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	4b40      	ldr	r3, [pc, #256]	; (800600c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	633b      	str	r3, [r7, #48]	; 0x30
 8005f12:	e00b      	b.n	8005f2c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1a:	1c59      	adds	r1, r3, #1
 8005f1c:	6379      	str	r1, [r7, #52]	; 0x34
 8005f1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	701a      	strb	r2, [r3, #0]
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	09db      	lsrs	r3, r3, #7
 8005f2a:	633b      	str	r3, [r7, #48]	; 0x30
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f30:	d8f0      	bhi.n	8005f14 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	637a      	str	r2, [r7, #52]	; 0x34
 8005f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	701a      	strb	r2, [r3, #0]
 8005f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f4c:	e00b      	b.n	8005f66 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f54:	1c59      	adds	r1, r3, #1
 8005f56:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f5c:	b2d2      	uxtb	r2, r2
 8005f5e:	701a      	strb	r2, [r3, #0]
 8005f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f62:	09db      	lsrs	r3, r3, #7
 8005f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f68:	2b7f      	cmp	r3, #127	; 0x7f
 8005f6a:	d8f0      	bhi.n	8005f4e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f74:	b2d2      	uxtb	r2, r2
 8005f76:	701a      	strb	r2, [r3, #0]
 8005f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	623b      	str	r3, [r7, #32]
 8005f86:	e00b      	b.n	8005fa0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005f88:	6a3b      	ldr	r3, [r7, #32]
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	1c59      	adds	r1, r3, #1
 8005f90:	6279      	str	r1, [r7, #36]	; 0x24
 8005f92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f96:	b2d2      	uxtb	r2, r2
 8005f98:	701a      	strb	r2, [r3, #0]
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	09db      	lsrs	r3, r3, #7
 8005f9e:	623b      	str	r3, [r7, #32]
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	2b7f      	cmp	r3, #127	; 0x7f
 8005fa4:	d8f0      	bhi.n	8005f88 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	1c5a      	adds	r2, r3, #1
 8005faa:	627a      	str	r2, [r7, #36]	; 0x24
 8005fac:	6a3a      	ldr	r2, [r7, #32]
 8005fae:	b2d2      	uxtb	r2, r2
 8005fb0:	701a      	strb	r2, [r3, #0]
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	61fb      	str	r3, [r7, #28]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	61bb      	str	r3, [r7, #24]
 8005fbe:	e00b      	b.n	8005fd8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	1c59      	adds	r1, r3, #1
 8005fc8:	61f9      	str	r1, [r7, #28]
 8005fca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	09db      	lsrs	r3, r3, #7
 8005fd6:	61bb      	str	r3, [r7, #24]
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	2b7f      	cmp	r3, #127	; 0x7f
 8005fdc:	d8f0      	bhi.n	8005fc0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	61fa      	str	r2, [r7, #28]
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	701a      	strb	r2, [r3, #0]
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005fee:	2215      	movs	r2, #21
 8005ff0:	68f9      	ldr	r1, [r7, #12]
 8005ff2:	6938      	ldr	r0, [r7, #16]
 8005ff4:	f7ff fab8 	bl	8005568 <_SendPacket>
  RECORD_END();
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f383 8811 	msr	BASEPRI, r3
}
 8005ffe:	bf00      	nop
 8006000:	3748      	adds	r7, #72	; 0x48
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	2001441c 	.word	0x2001441c
 800600c:	200143ec 	.word	0x200143ec

08006010 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006010:	b580      	push	{r7, lr}
 8006012:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006014:	4b07      	ldr	r3, [pc, #28]	; (8006034 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d008      	beq.n	800602e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800601c:	4b05      	ldr	r3, [pc, #20]	; (8006034 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006026:	4b03      	ldr	r3, [pc, #12]	; (8006034 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	4798      	blx	r3
  }
}
 800602e:	bf00      	nop
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	200143ec 	.word	0x200143ec

08006038 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006038:	b580      	push	{r7, lr}
 800603a:	b086      	sub	sp, #24
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006040:	f3ef 8311 	mrs	r3, BASEPRI
 8006044:	f04f 0120 	mov.w	r1, #32
 8006048:	f381 8811 	msr	BASEPRI, r1
 800604c:	617b      	str	r3, [r7, #20]
 800604e:	480b      	ldr	r0, [pc, #44]	; (800607c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006050:	f7ff f999 	bl	8005386 <_PreparePacket>
 8006054:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006056:	2280      	movs	r2, #128	; 0x80
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	6938      	ldr	r0, [r7, #16]
 800605c:	f7ff f946 	bl	80052ec <_EncodeStr>
 8006060:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006062:	220e      	movs	r2, #14
 8006064:	68f9      	ldr	r1, [r7, #12]
 8006066:	6938      	ldr	r0, [r7, #16]
 8006068:	f7ff fa7e 	bl	8005568 <_SendPacket>
  RECORD_END();
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f383 8811 	msr	BASEPRI, r3
}
 8006072:	bf00      	nop
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	2001441c 	.word	0x2001441c

08006080 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006080:	b590      	push	{r4, r7, lr}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006086:	4b15      	ldr	r3, [pc, #84]	; (80060dc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d01a      	beq.n	80060c4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800608e:	4b13      	ldr	r3, [pc, #76]	; (80060dc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d015      	beq.n	80060c4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006098:	4b10      	ldr	r3, [pc, #64]	; (80060dc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4798      	blx	r3
 80060a0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80060a4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80060a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060aa:	f04f 0200 	mov.w	r2, #0
 80060ae:	f04f 0300 	mov.w	r3, #0
 80060b2:	000a      	movs	r2, r1
 80060b4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80060b6:	4613      	mov	r3, r2
 80060b8:	461a      	mov	r2, r3
 80060ba:	4621      	mov	r1, r4
 80060bc:	200d      	movs	r0, #13
 80060be:	f7ff fbe7 	bl	8005890 <SEGGER_SYSVIEW_RecordU32x2>
 80060c2:	e006      	b.n	80060d2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80060c4:	4b06      	ldr	r3, [pc, #24]	; (80060e0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4619      	mov	r1, r3
 80060ca:	200c      	movs	r0, #12
 80060cc:	f7ff fba4 	bl	8005818 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80060d0:	bf00      	nop
 80060d2:	bf00      	nop
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd90      	pop	{r4, r7, pc}
 80060da:	bf00      	nop
 80060dc:	200143ec 	.word	0x200143ec
 80060e0:	e0001004 	.word	0xe0001004

080060e4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060ea:	f3ef 8311 	mrs	r3, BASEPRI
 80060ee:	f04f 0120 	mov.w	r1, #32
 80060f2:	f381 8811 	msr	BASEPRI, r1
 80060f6:	607b      	str	r3, [r7, #4]
 80060f8:	4807      	ldr	r0, [pc, #28]	; (8006118 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80060fa:	f7ff f944 	bl	8005386 <_PreparePacket>
 80060fe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006100:	2211      	movs	r2, #17
 8006102:	6839      	ldr	r1, [r7, #0]
 8006104:	6838      	ldr	r0, [r7, #0]
 8006106:	f7ff fa2f 	bl	8005568 <_SendPacket>
  RECORD_END();
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f383 8811 	msr	BASEPRI, r3
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	2001441c 	.word	0x2001441c

0800611c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800611c:	b580      	push	{r7, lr}
 800611e:	b088      	sub	sp, #32
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006124:	f3ef 8311 	mrs	r3, BASEPRI
 8006128:	f04f 0120 	mov.w	r1, #32
 800612c:	f381 8811 	msr	BASEPRI, r1
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	4819      	ldr	r0, [pc, #100]	; (8006198 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006134:	f7ff f927 	bl	8005386 <_PreparePacket>
 8006138:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800613e:	4b17      	ldr	r3, [pc, #92]	; (800619c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	61fb      	str	r3, [r7, #28]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	61bb      	str	r3, [r7, #24]
 8006150:	e00b      	b.n	800616a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	b2da      	uxtb	r2, r3
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	1c59      	adds	r1, r3, #1
 800615a:	61f9      	str	r1, [r7, #28]
 800615c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006160:	b2d2      	uxtb	r2, r2
 8006162:	701a      	strb	r2, [r3, #0]
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	09db      	lsrs	r3, r3, #7
 8006168:	61bb      	str	r3, [r7, #24]
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	2b7f      	cmp	r3, #127	; 0x7f
 800616e:	d8f0      	bhi.n	8006152 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	61fa      	str	r2, [r7, #28]
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006180:	2208      	movs	r2, #8
 8006182:	68f9      	ldr	r1, [r7, #12]
 8006184:	6938      	ldr	r0, [r7, #16]
 8006186:	f7ff f9ef 	bl	8005568 <_SendPacket>
  RECORD_END();
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f383 8811 	msr	BASEPRI, r3
}
 8006190:	bf00      	nop
 8006192:	3720      	adds	r7, #32
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	2001441c 	.word	0x2001441c
 800619c:	200143ec 	.word	0x200143ec

080061a0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b088      	sub	sp, #32
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061a8:	f3ef 8311 	mrs	r3, BASEPRI
 80061ac:	f04f 0120 	mov.w	r1, #32
 80061b0:	f381 8811 	msr	BASEPRI, r1
 80061b4:	617b      	str	r3, [r7, #20]
 80061b6:	4819      	ldr	r0, [pc, #100]	; (800621c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80061b8:	f7ff f8e5 	bl	8005386 <_PreparePacket>
 80061bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80061c2:	4b17      	ldr	r3, [pc, #92]	; (8006220 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	61fb      	str	r3, [r7, #28]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	61bb      	str	r3, [r7, #24]
 80061d4:	e00b      	b.n	80061ee <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	1c59      	adds	r1, r3, #1
 80061de:	61f9      	str	r1, [r7, #28]
 80061e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061e4:	b2d2      	uxtb	r2, r2
 80061e6:	701a      	strb	r2, [r3, #0]
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	09db      	lsrs	r3, r3, #7
 80061ec:	61bb      	str	r3, [r7, #24]
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	2b7f      	cmp	r3, #127	; 0x7f
 80061f2:	d8f0      	bhi.n	80061d6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	61fa      	str	r2, [r7, #28]
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	b2d2      	uxtb	r2, r2
 80061fe:	701a      	strb	r2, [r3, #0]
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006204:	2204      	movs	r2, #4
 8006206:	68f9      	ldr	r1, [r7, #12]
 8006208:	6938      	ldr	r0, [r7, #16]
 800620a:	f7ff f9ad 	bl	8005568 <_SendPacket>
  RECORD_END();
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	f383 8811 	msr	BASEPRI, r3
}
 8006214:	bf00      	nop
 8006216:	3720      	adds	r7, #32
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	2001441c 	.word	0x2001441c
 8006220:	200143ec 	.word	0x200143ec

08006224 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006224:	b580      	push	{r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800622c:	f3ef 8311 	mrs	r3, BASEPRI
 8006230:	f04f 0120 	mov.w	r1, #32
 8006234:	f381 8811 	msr	BASEPRI, r1
 8006238:	617b      	str	r3, [r7, #20]
 800623a:	4819      	ldr	r0, [pc, #100]	; (80062a0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800623c:	f7ff f8a3 	bl	8005386 <_PreparePacket>
 8006240:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006246:	4b17      	ldr	r3, [pc, #92]	; (80062a4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	61fb      	str	r3, [r7, #28]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	61bb      	str	r3, [r7, #24]
 8006258:	e00b      	b.n	8006272 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	b2da      	uxtb	r2, r3
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	1c59      	adds	r1, r3, #1
 8006262:	61f9      	str	r1, [r7, #28]
 8006264:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006268:	b2d2      	uxtb	r2, r2
 800626a:	701a      	strb	r2, [r3, #0]
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	09db      	lsrs	r3, r3, #7
 8006270:	61bb      	str	r3, [r7, #24]
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	2b7f      	cmp	r3, #127	; 0x7f
 8006276:	d8f0      	bhi.n	800625a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	1c5a      	adds	r2, r3, #1
 800627c:	61fa      	str	r2, [r7, #28]
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	b2d2      	uxtb	r2, r2
 8006282:	701a      	strb	r2, [r3, #0]
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006288:	2206      	movs	r2, #6
 800628a:	68f9      	ldr	r1, [r7, #12]
 800628c:	6938      	ldr	r0, [r7, #16]
 800628e:	f7ff f96b 	bl	8005568 <_SendPacket>
  RECORD_END();
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f383 8811 	msr	BASEPRI, r3
}
 8006298:	bf00      	nop
 800629a:	3720      	adds	r7, #32
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	2001441c 	.word	0x2001441c
 80062a4:	200143ec 	.word	0x200143ec

080062a8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80062b0:	4b04      	ldr	r3, [pc, #16]	; (80062c4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	1ad3      	subs	r3, r2, r3
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr
 80062c4:	200143ec 	.word	0x200143ec

080062c8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08c      	sub	sp, #48	; 0x30
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	4603      	mov	r3, r0
 80062d0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80062d2:	4b3b      	ldr	r3, [pc, #236]	; (80063c0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d06d      	beq.n	80063b6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80062da:	4b39      	ldr	r3, [pc, #228]	; (80063c0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80062e0:	2300      	movs	r3, #0
 80062e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80062e4:	e008      	b.n	80062f8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80062ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d007      	beq.n	8006302 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80062f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f4:	3301      	adds	r3, #1
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80062f8:	79fb      	ldrb	r3, [r7, #7]
 80062fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d3f2      	bcc.n	80062e6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006300:	e000      	b.n	8006304 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006302:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006306:	2b00      	cmp	r3, #0
 8006308:	d055      	beq.n	80063b6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800630a:	f3ef 8311 	mrs	r3, BASEPRI
 800630e:	f04f 0120 	mov.w	r1, #32
 8006312:	f381 8811 	msr	BASEPRI, r1
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	482a      	ldr	r0, [pc, #168]	; (80063c4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800631a:	f7ff f834 	bl	8005386 <_PreparePacket>
 800631e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
 8006328:	79fb      	ldrb	r3, [r7, #7]
 800632a:	623b      	str	r3, [r7, #32]
 800632c:	e00b      	b.n	8006346 <SEGGER_SYSVIEW_SendModule+0x7e>
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	b2da      	uxtb	r2, r3
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	1c59      	adds	r1, r3, #1
 8006336:	6279      	str	r1, [r7, #36]	; 0x24
 8006338:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	701a      	strb	r2, [r3, #0]
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	09db      	lsrs	r3, r3, #7
 8006344:	623b      	str	r3, [r7, #32]
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	2b7f      	cmp	r3, #127	; 0x7f
 800634a:	d8f0      	bhi.n	800632e <SEGGER_SYSVIEW_SendModule+0x66>
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	627a      	str	r2, [r7, #36]	; 0x24
 8006352:	6a3a      	ldr	r2, [r7, #32]
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	701a      	strb	r2, [r3, #0]
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	61fb      	str	r3, [r7, #28]
 8006360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	61bb      	str	r3, [r7, #24]
 8006366:	e00b      	b.n	8006380 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	b2da      	uxtb	r2, r3
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	1c59      	adds	r1, r3, #1
 8006370:	61f9      	str	r1, [r7, #28]
 8006372:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006376:	b2d2      	uxtb	r2, r2
 8006378:	701a      	strb	r2, [r3, #0]
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	09db      	lsrs	r3, r3, #7
 800637e:	61bb      	str	r3, [r7, #24]
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	2b7f      	cmp	r3, #127	; 0x7f
 8006384:	d8f0      	bhi.n	8006368 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	1c5a      	adds	r2, r3, #1
 800638a:	61fa      	str	r2, [r7, #28]
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	b2d2      	uxtb	r2, r2
 8006390:	701a      	strb	r2, [r3, #0]
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2280      	movs	r2, #128	; 0x80
 800639c:	4619      	mov	r1, r3
 800639e:	68f8      	ldr	r0, [r7, #12]
 80063a0:	f7fe ffa4 	bl	80052ec <_EncodeStr>
 80063a4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80063a6:	2216      	movs	r2, #22
 80063a8:	68f9      	ldr	r1, [r7, #12]
 80063aa:	6938      	ldr	r0, [r7, #16]
 80063ac:	f7ff f8dc 	bl	8005568 <_SendPacket>
      RECORD_END();
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80063b6:	bf00      	nop
 80063b8:	3730      	adds	r7, #48	; 0x30
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20014414 	.word	0x20014414
 80063c4:	2001441c 	.word	0x2001441c

080063c8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80063ce:	4b0c      	ldr	r3, [pc, #48]	; (8006400 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00f      	beq.n	80063f6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80063d6:	4b0a      	ldr	r3, [pc, #40]	; (8006400 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1f2      	bne.n	80063dc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80063f6:	bf00      	nop
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	20014414 	.word	0x20014414

08006404 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006404:	b580      	push	{r7, lr}
 8006406:	b086      	sub	sp, #24
 8006408:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800640a:	f3ef 8311 	mrs	r3, BASEPRI
 800640e:	f04f 0120 	mov.w	r1, #32
 8006412:	f381 8811 	msr	BASEPRI, r1
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	4817      	ldr	r0, [pc, #92]	; (8006478 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800641a:	f7fe ffb4 	bl	8005386 <_PreparePacket>
 800641e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	4b14      	ldr	r3, [pc, #80]	; (800647c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	613b      	str	r3, [r7, #16]
 800642e:	e00b      	b.n	8006448 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	b2da      	uxtb	r2, r3
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	1c59      	adds	r1, r3, #1
 8006438:	6179      	str	r1, [r7, #20]
 800643a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	701a      	strb	r2, [r3, #0]
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	09db      	lsrs	r3, r3, #7
 8006446:	613b      	str	r3, [r7, #16]
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	2b7f      	cmp	r3, #127	; 0x7f
 800644c:	d8f0      	bhi.n	8006430 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	617a      	str	r2, [r7, #20]
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	701a      	strb	r2, [r3, #0]
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800645e:	221b      	movs	r2, #27
 8006460:	6879      	ldr	r1, [r7, #4]
 8006462:	68b8      	ldr	r0, [r7, #8]
 8006464:	f7ff f880 	bl	8005568 <_SendPacket>
  RECORD_END();
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f383 8811 	msr	BASEPRI, r3
}
 800646e:	bf00      	nop
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	2001441c 	.word	0x2001441c
 800647c:	20014418 	.word	0x20014418

08006480 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006480:	b580      	push	{r7, lr}
 8006482:	b08a      	sub	sp, #40	; 0x28
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006488:	f3ef 8311 	mrs	r3, BASEPRI
 800648c:	f04f 0120 	mov.w	r1, #32
 8006490:	f381 8811 	msr	BASEPRI, r1
 8006494:	617b      	str	r3, [r7, #20]
 8006496:	4827      	ldr	r0, [pc, #156]	; (8006534 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006498:	f7fe ff75 	bl	8005386 <_PreparePacket>
 800649c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800649e:	2280      	movs	r2, #128	; 0x80
 80064a0:	6879      	ldr	r1, [r7, #4]
 80064a2:	6938      	ldr	r0, [r7, #16]
 80064a4:	f7fe ff22 	bl	80052ec <_EncodeStr>
 80064a8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
 80064ae:	2301      	movs	r3, #1
 80064b0:	623b      	str	r3, [r7, #32]
 80064b2:	e00b      	b.n	80064cc <SEGGER_SYSVIEW_Warn+0x4c>
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	1c59      	adds	r1, r3, #1
 80064bc:	6279      	str	r1, [r7, #36]	; 0x24
 80064be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064c2:	b2d2      	uxtb	r2, r2
 80064c4:	701a      	strb	r2, [r3, #0]
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	09db      	lsrs	r3, r3, #7
 80064ca:	623b      	str	r3, [r7, #32]
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	2b7f      	cmp	r3, #127	; 0x7f
 80064d0:	d8f0      	bhi.n	80064b4 <SEGGER_SYSVIEW_Warn+0x34>
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	1c5a      	adds	r2, r3, #1
 80064d6:	627a      	str	r2, [r7, #36]	; 0x24
 80064d8:	6a3a      	ldr	r2, [r7, #32]
 80064da:	b2d2      	uxtb	r2, r2
 80064dc:	701a      	strb	r2, [r3, #0]
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	61fb      	str	r3, [r7, #28]
 80064e6:	2300      	movs	r3, #0
 80064e8:	61bb      	str	r3, [r7, #24]
 80064ea:	e00b      	b.n	8006504 <SEGGER_SYSVIEW_Warn+0x84>
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	1c59      	adds	r1, r3, #1
 80064f4:	61f9      	str	r1, [r7, #28]
 80064f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064fa:	b2d2      	uxtb	r2, r2
 80064fc:	701a      	strb	r2, [r3, #0]
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	09db      	lsrs	r3, r3, #7
 8006502:	61bb      	str	r3, [r7, #24]
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	2b7f      	cmp	r3, #127	; 0x7f
 8006508:	d8f0      	bhi.n	80064ec <SEGGER_SYSVIEW_Warn+0x6c>
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	61fa      	str	r2, [r7, #28]
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	b2d2      	uxtb	r2, r2
 8006514:	701a      	strb	r2, [r3, #0]
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800651a:	221a      	movs	r2, #26
 800651c:	68f9      	ldr	r1, [r7, #12]
 800651e:	6938      	ldr	r0, [r7, #16]
 8006520:	f7ff f822 	bl	8005568 <_SendPacket>
  RECORD_END();
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f383 8811 	msr	BASEPRI, r3
}
 800652a:	bf00      	nop
 800652c:	3728      	adds	r7, #40	; 0x28
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	2001441c 	.word	0x2001441c

08006538 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
 8006544:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	6879      	ldr	r1, [r7, #4]
 800654a:	2000      	movs	r0, #0
 800654c:	f7fe fdb4 	bl	80050b8 <SEGGER_RTT_Write>
  return len;
 8006550:	683b      	ldr	r3, [r7, #0]
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <__libc_init_array>:
 800655c:	b570      	push	{r4, r5, r6, lr}
 800655e:	4d0d      	ldr	r5, [pc, #52]	; (8006594 <__libc_init_array+0x38>)
 8006560:	4c0d      	ldr	r4, [pc, #52]	; (8006598 <__libc_init_array+0x3c>)
 8006562:	1b64      	subs	r4, r4, r5
 8006564:	10a4      	asrs	r4, r4, #2
 8006566:	2600      	movs	r6, #0
 8006568:	42a6      	cmp	r6, r4
 800656a:	d109      	bne.n	8006580 <__libc_init_array+0x24>
 800656c:	4d0b      	ldr	r5, [pc, #44]	; (800659c <__libc_init_array+0x40>)
 800656e:	4c0c      	ldr	r4, [pc, #48]	; (80065a0 <__libc_init_array+0x44>)
 8006570:	f000 fd38 	bl	8006fe4 <_init>
 8006574:	1b64      	subs	r4, r4, r5
 8006576:	10a4      	asrs	r4, r4, #2
 8006578:	2600      	movs	r6, #0
 800657a:	42a6      	cmp	r6, r4
 800657c:	d105      	bne.n	800658a <__libc_init_array+0x2e>
 800657e:	bd70      	pop	{r4, r5, r6, pc}
 8006580:	f855 3b04 	ldr.w	r3, [r5], #4
 8006584:	4798      	blx	r3
 8006586:	3601      	adds	r6, #1
 8006588:	e7ee      	b.n	8006568 <__libc_init_array+0xc>
 800658a:	f855 3b04 	ldr.w	r3, [r5], #4
 800658e:	4798      	blx	r3
 8006590:	3601      	adds	r6, #1
 8006592:	e7f2      	b.n	800657a <__libc_init_array+0x1e>
 8006594:	080071a4 	.word	0x080071a4
 8006598:	080071a4 	.word	0x080071a4
 800659c:	080071a4 	.word	0x080071a4
 80065a0:	080071a8 	.word	0x080071a8

080065a4 <memcmp>:
 80065a4:	b510      	push	{r4, lr}
 80065a6:	3901      	subs	r1, #1
 80065a8:	4402      	add	r2, r0
 80065aa:	4290      	cmp	r0, r2
 80065ac:	d101      	bne.n	80065b2 <memcmp+0xe>
 80065ae:	2000      	movs	r0, #0
 80065b0:	e005      	b.n	80065be <memcmp+0x1a>
 80065b2:	7803      	ldrb	r3, [r0, #0]
 80065b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80065b8:	42a3      	cmp	r3, r4
 80065ba:	d001      	beq.n	80065c0 <memcmp+0x1c>
 80065bc:	1b18      	subs	r0, r3, r4
 80065be:	bd10      	pop	{r4, pc}
 80065c0:	3001      	adds	r0, #1
 80065c2:	e7f2      	b.n	80065aa <memcmp+0x6>

080065c4 <memcpy>:
 80065c4:	440a      	add	r2, r1
 80065c6:	4291      	cmp	r1, r2
 80065c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80065cc:	d100      	bne.n	80065d0 <memcpy+0xc>
 80065ce:	4770      	bx	lr
 80065d0:	b510      	push	{r4, lr}
 80065d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065da:	4291      	cmp	r1, r2
 80065dc:	d1f9      	bne.n	80065d2 <memcpy+0xe>
 80065de:	bd10      	pop	{r4, pc}

080065e0 <memset>:
 80065e0:	4402      	add	r2, r0
 80065e2:	4603      	mov	r3, r0
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d100      	bne.n	80065ea <memset+0xa>
 80065e8:	4770      	bx	lr
 80065ea:	f803 1b01 	strb.w	r1, [r3], #1
 80065ee:	e7f9      	b.n	80065e4 <memset+0x4>

080065f0 <_puts_r>:
 80065f0:	b570      	push	{r4, r5, r6, lr}
 80065f2:	460e      	mov	r6, r1
 80065f4:	4605      	mov	r5, r0
 80065f6:	b118      	cbz	r0, 8006600 <_puts_r+0x10>
 80065f8:	6983      	ldr	r3, [r0, #24]
 80065fa:	b90b      	cbnz	r3, 8006600 <_puts_r+0x10>
 80065fc:	f000 fa48 	bl	8006a90 <__sinit>
 8006600:	69ab      	ldr	r3, [r5, #24]
 8006602:	68ac      	ldr	r4, [r5, #8]
 8006604:	b913      	cbnz	r3, 800660c <_puts_r+0x1c>
 8006606:	4628      	mov	r0, r5
 8006608:	f000 fa42 	bl	8006a90 <__sinit>
 800660c:	4b2c      	ldr	r3, [pc, #176]	; (80066c0 <_puts_r+0xd0>)
 800660e:	429c      	cmp	r4, r3
 8006610:	d120      	bne.n	8006654 <_puts_r+0x64>
 8006612:	686c      	ldr	r4, [r5, #4]
 8006614:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006616:	07db      	lsls	r3, r3, #31
 8006618:	d405      	bmi.n	8006626 <_puts_r+0x36>
 800661a:	89a3      	ldrh	r3, [r4, #12]
 800661c:	0598      	lsls	r0, r3, #22
 800661e:	d402      	bmi.n	8006626 <_puts_r+0x36>
 8006620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006622:	f000 fad3 	bl	8006bcc <__retarget_lock_acquire_recursive>
 8006626:	89a3      	ldrh	r3, [r4, #12]
 8006628:	0719      	lsls	r1, r3, #28
 800662a:	d51d      	bpl.n	8006668 <_puts_r+0x78>
 800662c:	6923      	ldr	r3, [r4, #16]
 800662e:	b1db      	cbz	r3, 8006668 <_puts_r+0x78>
 8006630:	3e01      	subs	r6, #1
 8006632:	68a3      	ldr	r3, [r4, #8]
 8006634:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006638:	3b01      	subs	r3, #1
 800663a:	60a3      	str	r3, [r4, #8]
 800663c:	bb39      	cbnz	r1, 800668e <_puts_r+0x9e>
 800663e:	2b00      	cmp	r3, #0
 8006640:	da38      	bge.n	80066b4 <_puts_r+0xc4>
 8006642:	4622      	mov	r2, r4
 8006644:	210a      	movs	r1, #10
 8006646:	4628      	mov	r0, r5
 8006648:	f000 f848 	bl	80066dc <__swbuf_r>
 800664c:	3001      	adds	r0, #1
 800664e:	d011      	beq.n	8006674 <_puts_r+0x84>
 8006650:	250a      	movs	r5, #10
 8006652:	e011      	b.n	8006678 <_puts_r+0x88>
 8006654:	4b1b      	ldr	r3, [pc, #108]	; (80066c4 <_puts_r+0xd4>)
 8006656:	429c      	cmp	r4, r3
 8006658:	d101      	bne.n	800665e <_puts_r+0x6e>
 800665a:	68ac      	ldr	r4, [r5, #8]
 800665c:	e7da      	b.n	8006614 <_puts_r+0x24>
 800665e:	4b1a      	ldr	r3, [pc, #104]	; (80066c8 <_puts_r+0xd8>)
 8006660:	429c      	cmp	r4, r3
 8006662:	bf08      	it	eq
 8006664:	68ec      	ldreq	r4, [r5, #12]
 8006666:	e7d5      	b.n	8006614 <_puts_r+0x24>
 8006668:	4621      	mov	r1, r4
 800666a:	4628      	mov	r0, r5
 800666c:	f000 f888 	bl	8006780 <__swsetup_r>
 8006670:	2800      	cmp	r0, #0
 8006672:	d0dd      	beq.n	8006630 <_puts_r+0x40>
 8006674:	f04f 35ff 	mov.w	r5, #4294967295
 8006678:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800667a:	07da      	lsls	r2, r3, #31
 800667c:	d405      	bmi.n	800668a <_puts_r+0x9a>
 800667e:	89a3      	ldrh	r3, [r4, #12]
 8006680:	059b      	lsls	r3, r3, #22
 8006682:	d402      	bmi.n	800668a <_puts_r+0x9a>
 8006684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006686:	f000 faa2 	bl	8006bce <__retarget_lock_release_recursive>
 800668a:	4628      	mov	r0, r5
 800668c:	bd70      	pop	{r4, r5, r6, pc}
 800668e:	2b00      	cmp	r3, #0
 8006690:	da04      	bge.n	800669c <_puts_r+0xac>
 8006692:	69a2      	ldr	r2, [r4, #24]
 8006694:	429a      	cmp	r2, r3
 8006696:	dc06      	bgt.n	80066a6 <_puts_r+0xb6>
 8006698:	290a      	cmp	r1, #10
 800669a:	d004      	beq.n	80066a6 <_puts_r+0xb6>
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	1c5a      	adds	r2, r3, #1
 80066a0:	6022      	str	r2, [r4, #0]
 80066a2:	7019      	strb	r1, [r3, #0]
 80066a4:	e7c5      	b.n	8006632 <_puts_r+0x42>
 80066a6:	4622      	mov	r2, r4
 80066a8:	4628      	mov	r0, r5
 80066aa:	f000 f817 	bl	80066dc <__swbuf_r>
 80066ae:	3001      	adds	r0, #1
 80066b0:	d1bf      	bne.n	8006632 <_puts_r+0x42>
 80066b2:	e7df      	b.n	8006674 <_puts_r+0x84>
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	250a      	movs	r5, #10
 80066b8:	1c5a      	adds	r2, r3, #1
 80066ba:	6022      	str	r2, [r4, #0]
 80066bc:	701d      	strb	r5, [r3, #0]
 80066be:	e7db      	b.n	8006678 <_puts_r+0x88>
 80066c0:	0800715c 	.word	0x0800715c
 80066c4:	0800717c 	.word	0x0800717c
 80066c8:	0800713c 	.word	0x0800713c

080066cc <puts>:
 80066cc:	4b02      	ldr	r3, [pc, #8]	; (80066d8 <puts+0xc>)
 80066ce:	4601      	mov	r1, r0
 80066d0:	6818      	ldr	r0, [r3, #0]
 80066d2:	f7ff bf8d 	b.w	80065f0 <_puts_r>
 80066d6:	bf00      	nop
 80066d8:	20000014 	.word	0x20000014

080066dc <__swbuf_r>:
 80066dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066de:	460e      	mov	r6, r1
 80066e0:	4614      	mov	r4, r2
 80066e2:	4605      	mov	r5, r0
 80066e4:	b118      	cbz	r0, 80066ee <__swbuf_r+0x12>
 80066e6:	6983      	ldr	r3, [r0, #24]
 80066e8:	b90b      	cbnz	r3, 80066ee <__swbuf_r+0x12>
 80066ea:	f000 f9d1 	bl	8006a90 <__sinit>
 80066ee:	4b21      	ldr	r3, [pc, #132]	; (8006774 <__swbuf_r+0x98>)
 80066f0:	429c      	cmp	r4, r3
 80066f2:	d12b      	bne.n	800674c <__swbuf_r+0x70>
 80066f4:	686c      	ldr	r4, [r5, #4]
 80066f6:	69a3      	ldr	r3, [r4, #24]
 80066f8:	60a3      	str	r3, [r4, #8]
 80066fa:	89a3      	ldrh	r3, [r4, #12]
 80066fc:	071a      	lsls	r2, r3, #28
 80066fe:	d52f      	bpl.n	8006760 <__swbuf_r+0x84>
 8006700:	6923      	ldr	r3, [r4, #16]
 8006702:	b36b      	cbz	r3, 8006760 <__swbuf_r+0x84>
 8006704:	6923      	ldr	r3, [r4, #16]
 8006706:	6820      	ldr	r0, [r4, #0]
 8006708:	1ac0      	subs	r0, r0, r3
 800670a:	6963      	ldr	r3, [r4, #20]
 800670c:	b2f6      	uxtb	r6, r6
 800670e:	4283      	cmp	r3, r0
 8006710:	4637      	mov	r7, r6
 8006712:	dc04      	bgt.n	800671e <__swbuf_r+0x42>
 8006714:	4621      	mov	r1, r4
 8006716:	4628      	mov	r0, r5
 8006718:	f000 f926 	bl	8006968 <_fflush_r>
 800671c:	bb30      	cbnz	r0, 800676c <__swbuf_r+0x90>
 800671e:	68a3      	ldr	r3, [r4, #8]
 8006720:	3b01      	subs	r3, #1
 8006722:	60a3      	str	r3, [r4, #8]
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	6022      	str	r2, [r4, #0]
 800672a:	701e      	strb	r6, [r3, #0]
 800672c:	6963      	ldr	r3, [r4, #20]
 800672e:	3001      	adds	r0, #1
 8006730:	4283      	cmp	r3, r0
 8006732:	d004      	beq.n	800673e <__swbuf_r+0x62>
 8006734:	89a3      	ldrh	r3, [r4, #12]
 8006736:	07db      	lsls	r3, r3, #31
 8006738:	d506      	bpl.n	8006748 <__swbuf_r+0x6c>
 800673a:	2e0a      	cmp	r6, #10
 800673c:	d104      	bne.n	8006748 <__swbuf_r+0x6c>
 800673e:	4621      	mov	r1, r4
 8006740:	4628      	mov	r0, r5
 8006742:	f000 f911 	bl	8006968 <_fflush_r>
 8006746:	b988      	cbnz	r0, 800676c <__swbuf_r+0x90>
 8006748:	4638      	mov	r0, r7
 800674a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800674c:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <__swbuf_r+0x9c>)
 800674e:	429c      	cmp	r4, r3
 8006750:	d101      	bne.n	8006756 <__swbuf_r+0x7a>
 8006752:	68ac      	ldr	r4, [r5, #8]
 8006754:	e7cf      	b.n	80066f6 <__swbuf_r+0x1a>
 8006756:	4b09      	ldr	r3, [pc, #36]	; (800677c <__swbuf_r+0xa0>)
 8006758:	429c      	cmp	r4, r3
 800675a:	bf08      	it	eq
 800675c:	68ec      	ldreq	r4, [r5, #12]
 800675e:	e7ca      	b.n	80066f6 <__swbuf_r+0x1a>
 8006760:	4621      	mov	r1, r4
 8006762:	4628      	mov	r0, r5
 8006764:	f000 f80c 	bl	8006780 <__swsetup_r>
 8006768:	2800      	cmp	r0, #0
 800676a:	d0cb      	beq.n	8006704 <__swbuf_r+0x28>
 800676c:	f04f 37ff 	mov.w	r7, #4294967295
 8006770:	e7ea      	b.n	8006748 <__swbuf_r+0x6c>
 8006772:	bf00      	nop
 8006774:	0800715c 	.word	0x0800715c
 8006778:	0800717c 	.word	0x0800717c
 800677c:	0800713c 	.word	0x0800713c

08006780 <__swsetup_r>:
 8006780:	4b32      	ldr	r3, [pc, #200]	; (800684c <__swsetup_r+0xcc>)
 8006782:	b570      	push	{r4, r5, r6, lr}
 8006784:	681d      	ldr	r5, [r3, #0]
 8006786:	4606      	mov	r6, r0
 8006788:	460c      	mov	r4, r1
 800678a:	b125      	cbz	r5, 8006796 <__swsetup_r+0x16>
 800678c:	69ab      	ldr	r3, [r5, #24]
 800678e:	b913      	cbnz	r3, 8006796 <__swsetup_r+0x16>
 8006790:	4628      	mov	r0, r5
 8006792:	f000 f97d 	bl	8006a90 <__sinit>
 8006796:	4b2e      	ldr	r3, [pc, #184]	; (8006850 <__swsetup_r+0xd0>)
 8006798:	429c      	cmp	r4, r3
 800679a:	d10f      	bne.n	80067bc <__swsetup_r+0x3c>
 800679c:	686c      	ldr	r4, [r5, #4]
 800679e:	89a3      	ldrh	r3, [r4, #12]
 80067a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067a4:	0719      	lsls	r1, r3, #28
 80067a6:	d42c      	bmi.n	8006802 <__swsetup_r+0x82>
 80067a8:	06dd      	lsls	r5, r3, #27
 80067aa:	d411      	bmi.n	80067d0 <__swsetup_r+0x50>
 80067ac:	2309      	movs	r3, #9
 80067ae:	6033      	str	r3, [r6, #0]
 80067b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067b4:	81a3      	strh	r3, [r4, #12]
 80067b6:	f04f 30ff 	mov.w	r0, #4294967295
 80067ba:	e03e      	b.n	800683a <__swsetup_r+0xba>
 80067bc:	4b25      	ldr	r3, [pc, #148]	; (8006854 <__swsetup_r+0xd4>)
 80067be:	429c      	cmp	r4, r3
 80067c0:	d101      	bne.n	80067c6 <__swsetup_r+0x46>
 80067c2:	68ac      	ldr	r4, [r5, #8]
 80067c4:	e7eb      	b.n	800679e <__swsetup_r+0x1e>
 80067c6:	4b24      	ldr	r3, [pc, #144]	; (8006858 <__swsetup_r+0xd8>)
 80067c8:	429c      	cmp	r4, r3
 80067ca:	bf08      	it	eq
 80067cc:	68ec      	ldreq	r4, [r5, #12]
 80067ce:	e7e6      	b.n	800679e <__swsetup_r+0x1e>
 80067d0:	0758      	lsls	r0, r3, #29
 80067d2:	d512      	bpl.n	80067fa <__swsetup_r+0x7a>
 80067d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067d6:	b141      	cbz	r1, 80067ea <__swsetup_r+0x6a>
 80067d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067dc:	4299      	cmp	r1, r3
 80067de:	d002      	beq.n	80067e6 <__swsetup_r+0x66>
 80067e0:	4630      	mov	r0, r6
 80067e2:	f000 fa5b 	bl	8006c9c <_free_r>
 80067e6:	2300      	movs	r3, #0
 80067e8:	6363      	str	r3, [r4, #52]	; 0x34
 80067ea:	89a3      	ldrh	r3, [r4, #12]
 80067ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067f0:	81a3      	strh	r3, [r4, #12]
 80067f2:	2300      	movs	r3, #0
 80067f4:	6063      	str	r3, [r4, #4]
 80067f6:	6923      	ldr	r3, [r4, #16]
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	89a3      	ldrh	r3, [r4, #12]
 80067fc:	f043 0308 	orr.w	r3, r3, #8
 8006800:	81a3      	strh	r3, [r4, #12]
 8006802:	6923      	ldr	r3, [r4, #16]
 8006804:	b94b      	cbnz	r3, 800681a <__swsetup_r+0x9a>
 8006806:	89a3      	ldrh	r3, [r4, #12]
 8006808:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800680c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006810:	d003      	beq.n	800681a <__swsetup_r+0x9a>
 8006812:	4621      	mov	r1, r4
 8006814:	4630      	mov	r0, r6
 8006816:	f000 fa01 	bl	8006c1c <__smakebuf_r>
 800681a:	89a0      	ldrh	r0, [r4, #12]
 800681c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006820:	f010 0301 	ands.w	r3, r0, #1
 8006824:	d00a      	beq.n	800683c <__swsetup_r+0xbc>
 8006826:	2300      	movs	r3, #0
 8006828:	60a3      	str	r3, [r4, #8]
 800682a:	6963      	ldr	r3, [r4, #20]
 800682c:	425b      	negs	r3, r3
 800682e:	61a3      	str	r3, [r4, #24]
 8006830:	6923      	ldr	r3, [r4, #16]
 8006832:	b943      	cbnz	r3, 8006846 <__swsetup_r+0xc6>
 8006834:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006838:	d1ba      	bne.n	80067b0 <__swsetup_r+0x30>
 800683a:	bd70      	pop	{r4, r5, r6, pc}
 800683c:	0781      	lsls	r1, r0, #30
 800683e:	bf58      	it	pl
 8006840:	6963      	ldrpl	r3, [r4, #20]
 8006842:	60a3      	str	r3, [r4, #8]
 8006844:	e7f4      	b.n	8006830 <__swsetup_r+0xb0>
 8006846:	2000      	movs	r0, #0
 8006848:	e7f7      	b.n	800683a <__swsetup_r+0xba>
 800684a:	bf00      	nop
 800684c:	20000014 	.word	0x20000014
 8006850:	0800715c 	.word	0x0800715c
 8006854:	0800717c 	.word	0x0800717c
 8006858:	0800713c 	.word	0x0800713c

0800685c <__sflush_r>:
 800685c:	898a      	ldrh	r2, [r1, #12]
 800685e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006862:	4605      	mov	r5, r0
 8006864:	0710      	lsls	r0, r2, #28
 8006866:	460c      	mov	r4, r1
 8006868:	d458      	bmi.n	800691c <__sflush_r+0xc0>
 800686a:	684b      	ldr	r3, [r1, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	dc05      	bgt.n	800687c <__sflush_r+0x20>
 8006870:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006872:	2b00      	cmp	r3, #0
 8006874:	dc02      	bgt.n	800687c <__sflush_r+0x20>
 8006876:	2000      	movs	r0, #0
 8006878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800687c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800687e:	2e00      	cmp	r6, #0
 8006880:	d0f9      	beq.n	8006876 <__sflush_r+0x1a>
 8006882:	2300      	movs	r3, #0
 8006884:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006888:	682f      	ldr	r7, [r5, #0]
 800688a:	602b      	str	r3, [r5, #0]
 800688c:	d032      	beq.n	80068f4 <__sflush_r+0x98>
 800688e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006890:	89a3      	ldrh	r3, [r4, #12]
 8006892:	075a      	lsls	r2, r3, #29
 8006894:	d505      	bpl.n	80068a2 <__sflush_r+0x46>
 8006896:	6863      	ldr	r3, [r4, #4]
 8006898:	1ac0      	subs	r0, r0, r3
 800689a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800689c:	b10b      	cbz	r3, 80068a2 <__sflush_r+0x46>
 800689e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068a0:	1ac0      	subs	r0, r0, r3
 80068a2:	2300      	movs	r3, #0
 80068a4:	4602      	mov	r2, r0
 80068a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068a8:	6a21      	ldr	r1, [r4, #32]
 80068aa:	4628      	mov	r0, r5
 80068ac:	47b0      	blx	r6
 80068ae:	1c43      	adds	r3, r0, #1
 80068b0:	89a3      	ldrh	r3, [r4, #12]
 80068b2:	d106      	bne.n	80068c2 <__sflush_r+0x66>
 80068b4:	6829      	ldr	r1, [r5, #0]
 80068b6:	291d      	cmp	r1, #29
 80068b8:	d82c      	bhi.n	8006914 <__sflush_r+0xb8>
 80068ba:	4a2a      	ldr	r2, [pc, #168]	; (8006964 <__sflush_r+0x108>)
 80068bc:	40ca      	lsrs	r2, r1
 80068be:	07d6      	lsls	r6, r2, #31
 80068c0:	d528      	bpl.n	8006914 <__sflush_r+0xb8>
 80068c2:	2200      	movs	r2, #0
 80068c4:	6062      	str	r2, [r4, #4]
 80068c6:	04d9      	lsls	r1, r3, #19
 80068c8:	6922      	ldr	r2, [r4, #16]
 80068ca:	6022      	str	r2, [r4, #0]
 80068cc:	d504      	bpl.n	80068d8 <__sflush_r+0x7c>
 80068ce:	1c42      	adds	r2, r0, #1
 80068d0:	d101      	bne.n	80068d6 <__sflush_r+0x7a>
 80068d2:	682b      	ldr	r3, [r5, #0]
 80068d4:	b903      	cbnz	r3, 80068d8 <__sflush_r+0x7c>
 80068d6:	6560      	str	r0, [r4, #84]	; 0x54
 80068d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068da:	602f      	str	r7, [r5, #0]
 80068dc:	2900      	cmp	r1, #0
 80068de:	d0ca      	beq.n	8006876 <__sflush_r+0x1a>
 80068e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068e4:	4299      	cmp	r1, r3
 80068e6:	d002      	beq.n	80068ee <__sflush_r+0x92>
 80068e8:	4628      	mov	r0, r5
 80068ea:	f000 f9d7 	bl	8006c9c <_free_r>
 80068ee:	2000      	movs	r0, #0
 80068f0:	6360      	str	r0, [r4, #52]	; 0x34
 80068f2:	e7c1      	b.n	8006878 <__sflush_r+0x1c>
 80068f4:	6a21      	ldr	r1, [r4, #32]
 80068f6:	2301      	movs	r3, #1
 80068f8:	4628      	mov	r0, r5
 80068fa:	47b0      	blx	r6
 80068fc:	1c41      	adds	r1, r0, #1
 80068fe:	d1c7      	bne.n	8006890 <__sflush_r+0x34>
 8006900:	682b      	ldr	r3, [r5, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0c4      	beq.n	8006890 <__sflush_r+0x34>
 8006906:	2b1d      	cmp	r3, #29
 8006908:	d001      	beq.n	800690e <__sflush_r+0xb2>
 800690a:	2b16      	cmp	r3, #22
 800690c:	d101      	bne.n	8006912 <__sflush_r+0xb6>
 800690e:	602f      	str	r7, [r5, #0]
 8006910:	e7b1      	b.n	8006876 <__sflush_r+0x1a>
 8006912:	89a3      	ldrh	r3, [r4, #12]
 8006914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006918:	81a3      	strh	r3, [r4, #12]
 800691a:	e7ad      	b.n	8006878 <__sflush_r+0x1c>
 800691c:	690f      	ldr	r7, [r1, #16]
 800691e:	2f00      	cmp	r7, #0
 8006920:	d0a9      	beq.n	8006876 <__sflush_r+0x1a>
 8006922:	0793      	lsls	r3, r2, #30
 8006924:	680e      	ldr	r6, [r1, #0]
 8006926:	bf08      	it	eq
 8006928:	694b      	ldreq	r3, [r1, #20]
 800692a:	600f      	str	r7, [r1, #0]
 800692c:	bf18      	it	ne
 800692e:	2300      	movne	r3, #0
 8006930:	eba6 0807 	sub.w	r8, r6, r7
 8006934:	608b      	str	r3, [r1, #8]
 8006936:	f1b8 0f00 	cmp.w	r8, #0
 800693a:	dd9c      	ble.n	8006876 <__sflush_r+0x1a>
 800693c:	6a21      	ldr	r1, [r4, #32]
 800693e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006940:	4643      	mov	r3, r8
 8006942:	463a      	mov	r2, r7
 8006944:	4628      	mov	r0, r5
 8006946:	47b0      	blx	r6
 8006948:	2800      	cmp	r0, #0
 800694a:	dc06      	bgt.n	800695a <__sflush_r+0xfe>
 800694c:	89a3      	ldrh	r3, [r4, #12]
 800694e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006952:	81a3      	strh	r3, [r4, #12]
 8006954:	f04f 30ff 	mov.w	r0, #4294967295
 8006958:	e78e      	b.n	8006878 <__sflush_r+0x1c>
 800695a:	4407      	add	r7, r0
 800695c:	eba8 0800 	sub.w	r8, r8, r0
 8006960:	e7e9      	b.n	8006936 <__sflush_r+0xda>
 8006962:	bf00      	nop
 8006964:	20400001 	.word	0x20400001

08006968 <_fflush_r>:
 8006968:	b538      	push	{r3, r4, r5, lr}
 800696a:	690b      	ldr	r3, [r1, #16]
 800696c:	4605      	mov	r5, r0
 800696e:	460c      	mov	r4, r1
 8006970:	b913      	cbnz	r3, 8006978 <_fflush_r+0x10>
 8006972:	2500      	movs	r5, #0
 8006974:	4628      	mov	r0, r5
 8006976:	bd38      	pop	{r3, r4, r5, pc}
 8006978:	b118      	cbz	r0, 8006982 <_fflush_r+0x1a>
 800697a:	6983      	ldr	r3, [r0, #24]
 800697c:	b90b      	cbnz	r3, 8006982 <_fflush_r+0x1a>
 800697e:	f000 f887 	bl	8006a90 <__sinit>
 8006982:	4b14      	ldr	r3, [pc, #80]	; (80069d4 <_fflush_r+0x6c>)
 8006984:	429c      	cmp	r4, r3
 8006986:	d11b      	bne.n	80069c0 <_fflush_r+0x58>
 8006988:	686c      	ldr	r4, [r5, #4]
 800698a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0ef      	beq.n	8006972 <_fflush_r+0xa>
 8006992:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006994:	07d0      	lsls	r0, r2, #31
 8006996:	d404      	bmi.n	80069a2 <_fflush_r+0x3a>
 8006998:	0599      	lsls	r1, r3, #22
 800699a:	d402      	bmi.n	80069a2 <_fflush_r+0x3a>
 800699c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800699e:	f000 f915 	bl	8006bcc <__retarget_lock_acquire_recursive>
 80069a2:	4628      	mov	r0, r5
 80069a4:	4621      	mov	r1, r4
 80069a6:	f7ff ff59 	bl	800685c <__sflush_r>
 80069aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069ac:	07da      	lsls	r2, r3, #31
 80069ae:	4605      	mov	r5, r0
 80069b0:	d4e0      	bmi.n	8006974 <_fflush_r+0xc>
 80069b2:	89a3      	ldrh	r3, [r4, #12]
 80069b4:	059b      	lsls	r3, r3, #22
 80069b6:	d4dd      	bmi.n	8006974 <_fflush_r+0xc>
 80069b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069ba:	f000 f908 	bl	8006bce <__retarget_lock_release_recursive>
 80069be:	e7d9      	b.n	8006974 <_fflush_r+0xc>
 80069c0:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <_fflush_r+0x70>)
 80069c2:	429c      	cmp	r4, r3
 80069c4:	d101      	bne.n	80069ca <_fflush_r+0x62>
 80069c6:	68ac      	ldr	r4, [r5, #8]
 80069c8:	e7df      	b.n	800698a <_fflush_r+0x22>
 80069ca:	4b04      	ldr	r3, [pc, #16]	; (80069dc <_fflush_r+0x74>)
 80069cc:	429c      	cmp	r4, r3
 80069ce:	bf08      	it	eq
 80069d0:	68ec      	ldreq	r4, [r5, #12]
 80069d2:	e7da      	b.n	800698a <_fflush_r+0x22>
 80069d4:	0800715c 	.word	0x0800715c
 80069d8:	0800717c 	.word	0x0800717c
 80069dc:	0800713c 	.word	0x0800713c

080069e0 <std>:
 80069e0:	2300      	movs	r3, #0
 80069e2:	b510      	push	{r4, lr}
 80069e4:	4604      	mov	r4, r0
 80069e6:	e9c0 3300 	strd	r3, r3, [r0]
 80069ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069ee:	6083      	str	r3, [r0, #8]
 80069f0:	8181      	strh	r1, [r0, #12]
 80069f2:	6643      	str	r3, [r0, #100]	; 0x64
 80069f4:	81c2      	strh	r2, [r0, #14]
 80069f6:	6183      	str	r3, [r0, #24]
 80069f8:	4619      	mov	r1, r3
 80069fa:	2208      	movs	r2, #8
 80069fc:	305c      	adds	r0, #92	; 0x5c
 80069fe:	f7ff fdef 	bl	80065e0 <memset>
 8006a02:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <std+0x38>)
 8006a04:	6263      	str	r3, [r4, #36]	; 0x24
 8006a06:	4b05      	ldr	r3, [pc, #20]	; (8006a1c <std+0x3c>)
 8006a08:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a0a:	4b05      	ldr	r3, [pc, #20]	; (8006a20 <std+0x40>)
 8006a0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a0e:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <std+0x44>)
 8006a10:	6224      	str	r4, [r4, #32]
 8006a12:	6323      	str	r3, [r4, #48]	; 0x30
 8006a14:	bd10      	pop	{r4, pc}
 8006a16:	bf00      	nop
 8006a18:	08006e7d 	.word	0x08006e7d
 8006a1c:	08006e9f 	.word	0x08006e9f
 8006a20:	08006ed7 	.word	0x08006ed7
 8006a24:	08006efb 	.word	0x08006efb

08006a28 <_cleanup_r>:
 8006a28:	4901      	ldr	r1, [pc, #4]	; (8006a30 <_cleanup_r+0x8>)
 8006a2a:	f000 b8af 	b.w	8006b8c <_fwalk_reent>
 8006a2e:	bf00      	nop
 8006a30:	08006969 	.word	0x08006969

08006a34 <__sfmoreglue>:
 8006a34:	b570      	push	{r4, r5, r6, lr}
 8006a36:	2268      	movs	r2, #104	; 0x68
 8006a38:	1e4d      	subs	r5, r1, #1
 8006a3a:	4355      	muls	r5, r2
 8006a3c:	460e      	mov	r6, r1
 8006a3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a42:	f000 f997 	bl	8006d74 <_malloc_r>
 8006a46:	4604      	mov	r4, r0
 8006a48:	b140      	cbz	r0, 8006a5c <__sfmoreglue+0x28>
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	e9c0 1600 	strd	r1, r6, [r0]
 8006a50:	300c      	adds	r0, #12
 8006a52:	60a0      	str	r0, [r4, #8]
 8006a54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a58:	f7ff fdc2 	bl	80065e0 <memset>
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	bd70      	pop	{r4, r5, r6, pc}

08006a60 <__sfp_lock_acquire>:
 8006a60:	4801      	ldr	r0, [pc, #4]	; (8006a68 <__sfp_lock_acquire+0x8>)
 8006a62:	f000 b8b3 	b.w	8006bcc <__retarget_lock_acquire_recursive>
 8006a66:	bf00      	nop
 8006a68:	20014500 	.word	0x20014500

08006a6c <__sfp_lock_release>:
 8006a6c:	4801      	ldr	r0, [pc, #4]	; (8006a74 <__sfp_lock_release+0x8>)
 8006a6e:	f000 b8ae 	b.w	8006bce <__retarget_lock_release_recursive>
 8006a72:	bf00      	nop
 8006a74:	20014500 	.word	0x20014500

08006a78 <__sinit_lock_acquire>:
 8006a78:	4801      	ldr	r0, [pc, #4]	; (8006a80 <__sinit_lock_acquire+0x8>)
 8006a7a:	f000 b8a7 	b.w	8006bcc <__retarget_lock_acquire_recursive>
 8006a7e:	bf00      	nop
 8006a80:	20014501 	.word	0x20014501

08006a84 <__sinit_lock_release>:
 8006a84:	4801      	ldr	r0, [pc, #4]	; (8006a8c <__sinit_lock_release+0x8>)
 8006a86:	f000 b8a2 	b.w	8006bce <__retarget_lock_release_recursive>
 8006a8a:	bf00      	nop
 8006a8c:	20014501 	.word	0x20014501

08006a90 <__sinit>:
 8006a90:	b510      	push	{r4, lr}
 8006a92:	4604      	mov	r4, r0
 8006a94:	f7ff fff0 	bl	8006a78 <__sinit_lock_acquire>
 8006a98:	69a3      	ldr	r3, [r4, #24]
 8006a9a:	b11b      	cbz	r3, 8006aa4 <__sinit+0x14>
 8006a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aa0:	f7ff bff0 	b.w	8006a84 <__sinit_lock_release>
 8006aa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006aa8:	6523      	str	r3, [r4, #80]	; 0x50
 8006aaa:	4b13      	ldr	r3, [pc, #76]	; (8006af8 <__sinit+0x68>)
 8006aac:	4a13      	ldr	r2, [pc, #76]	; (8006afc <__sinit+0x6c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ab2:	42a3      	cmp	r3, r4
 8006ab4:	bf04      	itt	eq
 8006ab6:	2301      	moveq	r3, #1
 8006ab8:	61a3      	streq	r3, [r4, #24]
 8006aba:	4620      	mov	r0, r4
 8006abc:	f000 f820 	bl	8006b00 <__sfp>
 8006ac0:	6060      	str	r0, [r4, #4]
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f000 f81c 	bl	8006b00 <__sfp>
 8006ac8:	60a0      	str	r0, [r4, #8]
 8006aca:	4620      	mov	r0, r4
 8006acc:	f000 f818 	bl	8006b00 <__sfp>
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	60e0      	str	r0, [r4, #12]
 8006ad4:	2104      	movs	r1, #4
 8006ad6:	6860      	ldr	r0, [r4, #4]
 8006ad8:	f7ff ff82 	bl	80069e0 <std>
 8006adc:	68a0      	ldr	r0, [r4, #8]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	2109      	movs	r1, #9
 8006ae2:	f7ff ff7d 	bl	80069e0 <std>
 8006ae6:	68e0      	ldr	r0, [r4, #12]
 8006ae8:	2202      	movs	r2, #2
 8006aea:	2112      	movs	r1, #18
 8006aec:	f7ff ff78 	bl	80069e0 <std>
 8006af0:	2301      	movs	r3, #1
 8006af2:	61a3      	str	r3, [r4, #24]
 8006af4:	e7d2      	b.n	8006a9c <__sinit+0xc>
 8006af6:	bf00      	nop
 8006af8:	08007138 	.word	0x08007138
 8006afc:	08006a29 	.word	0x08006a29

08006b00 <__sfp>:
 8006b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b02:	4607      	mov	r7, r0
 8006b04:	f7ff ffac 	bl	8006a60 <__sfp_lock_acquire>
 8006b08:	4b1e      	ldr	r3, [pc, #120]	; (8006b84 <__sfp+0x84>)
 8006b0a:	681e      	ldr	r6, [r3, #0]
 8006b0c:	69b3      	ldr	r3, [r6, #24]
 8006b0e:	b913      	cbnz	r3, 8006b16 <__sfp+0x16>
 8006b10:	4630      	mov	r0, r6
 8006b12:	f7ff ffbd 	bl	8006a90 <__sinit>
 8006b16:	3648      	adds	r6, #72	; 0x48
 8006b18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	d503      	bpl.n	8006b28 <__sfp+0x28>
 8006b20:	6833      	ldr	r3, [r6, #0]
 8006b22:	b30b      	cbz	r3, 8006b68 <__sfp+0x68>
 8006b24:	6836      	ldr	r6, [r6, #0]
 8006b26:	e7f7      	b.n	8006b18 <__sfp+0x18>
 8006b28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b2c:	b9d5      	cbnz	r5, 8006b64 <__sfp+0x64>
 8006b2e:	4b16      	ldr	r3, [pc, #88]	; (8006b88 <__sfp+0x88>)
 8006b30:	60e3      	str	r3, [r4, #12]
 8006b32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b36:	6665      	str	r5, [r4, #100]	; 0x64
 8006b38:	f000 f847 	bl	8006bca <__retarget_lock_init_recursive>
 8006b3c:	f7ff ff96 	bl	8006a6c <__sfp_lock_release>
 8006b40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006b44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b48:	6025      	str	r5, [r4, #0]
 8006b4a:	61a5      	str	r5, [r4, #24]
 8006b4c:	2208      	movs	r2, #8
 8006b4e:	4629      	mov	r1, r5
 8006b50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b54:	f7ff fd44 	bl	80065e0 <memset>
 8006b58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b60:	4620      	mov	r0, r4
 8006b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b64:	3468      	adds	r4, #104	; 0x68
 8006b66:	e7d9      	b.n	8006b1c <__sfp+0x1c>
 8006b68:	2104      	movs	r1, #4
 8006b6a:	4638      	mov	r0, r7
 8006b6c:	f7ff ff62 	bl	8006a34 <__sfmoreglue>
 8006b70:	4604      	mov	r4, r0
 8006b72:	6030      	str	r0, [r6, #0]
 8006b74:	2800      	cmp	r0, #0
 8006b76:	d1d5      	bne.n	8006b24 <__sfp+0x24>
 8006b78:	f7ff ff78 	bl	8006a6c <__sfp_lock_release>
 8006b7c:	230c      	movs	r3, #12
 8006b7e:	603b      	str	r3, [r7, #0]
 8006b80:	e7ee      	b.n	8006b60 <__sfp+0x60>
 8006b82:	bf00      	nop
 8006b84:	08007138 	.word	0x08007138
 8006b88:	ffff0001 	.word	0xffff0001

08006b8c <_fwalk_reent>:
 8006b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b90:	4606      	mov	r6, r0
 8006b92:	4688      	mov	r8, r1
 8006b94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b98:	2700      	movs	r7, #0
 8006b9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b9e:	f1b9 0901 	subs.w	r9, r9, #1
 8006ba2:	d505      	bpl.n	8006bb0 <_fwalk_reent+0x24>
 8006ba4:	6824      	ldr	r4, [r4, #0]
 8006ba6:	2c00      	cmp	r4, #0
 8006ba8:	d1f7      	bne.n	8006b9a <_fwalk_reent+0xe>
 8006baa:	4638      	mov	r0, r7
 8006bac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bb0:	89ab      	ldrh	r3, [r5, #12]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d907      	bls.n	8006bc6 <_fwalk_reent+0x3a>
 8006bb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	d003      	beq.n	8006bc6 <_fwalk_reent+0x3a>
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	47c0      	blx	r8
 8006bc4:	4307      	orrs	r7, r0
 8006bc6:	3568      	adds	r5, #104	; 0x68
 8006bc8:	e7e9      	b.n	8006b9e <_fwalk_reent+0x12>

08006bca <__retarget_lock_init_recursive>:
 8006bca:	4770      	bx	lr

08006bcc <__retarget_lock_acquire_recursive>:
 8006bcc:	4770      	bx	lr

08006bce <__retarget_lock_release_recursive>:
 8006bce:	4770      	bx	lr

08006bd0 <__swhatbuf_r>:
 8006bd0:	b570      	push	{r4, r5, r6, lr}
 8006bd2:	460e      	mov	r6, r1
 8006bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bd8:	2900      	cmp	r1, #0
 8006bda:	b096      	sub	sp, #88	; 0x58
 8006bdc:	4614      	mov	r4, r2
 8006bde:	461d      	mov	r5, r3
 8006be0:	da08      	bge.n	8006bf4 <__swhatbuf_r+0x24>
 8006be2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	602a      	str	r2, [r5, #0]
 8006bea:	061a      	lsls	r2, r3, #24
 8006bec:	d410      	bmi.n	8006c10 <__swhatbuf_r+0x40>
 8006bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bf2:	e00e      	b.n	8006c12 <__swhatbuf_r+0x42>
 8006bf4:	466a      	mov	r2, sp
 8006bf6:	f000 f995 	bl	8006f24 <_fstat_r>
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	dbf1      	blt.n	8006be2 <__swhatbuf_r+0x12>
 8006bfe:	9a01      	ldr	r2, [sp, #4]
 8006c00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c08:	425a      	negs	r2, r3
 8006c0a:	415a      	adcs	r2, r3
 8006c0c:	602a      	str	r2, [r5, #0]
 8006c0e:	e7ee      	b.n	8006bee <__swhatbuf_r+0x1e>
 8006c10:	2340      	movs	r3, #64	; 0x40
 8006c12:	2000      	movs	r0, #0
 8006c14:	6023      	str	r3, [r4, #0]
 8006c16:	b016      	add	sp, #88	; 0x58
 8006c18:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c1c <__smakebuf_r>:
 8006c1c:	898b      	ldrh	r3, [r1, #12]
 8006c1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c20:	079d      	lsls	r5, r3, #30
 8006c22:	4606      	mov	r6, r0
 8006c24:	460c      	mov	r4, r1
 8006c26:	d507      	bpl.n	8006c38 <__smakebuf_r+0x1c>
 8006c28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c2c:	6023      	str	r3, [r4, #0]
 8006c2e:	6123      	str	r3, [r4, #16]
 8006c30:	2301      	movs	r3, #1
 8006c32:	6163      	str	r3, [r4, #20]
 8006c34:	b002      	add	sp, #8
 8006c36:	bd70      	pop	{r4, r5, r6, pc}
 8006c38:	ab01      	add	r3, sp, #4
 8006c3a:	466a      	mov	r2, sp
 8006c3c:	f7ff ffc8 	bl	8006bd0 <__swhatbuf_r>
 8006c40:	9900      	ldr	r1, [sp, #0]
 8006c42:	4605      	mov	r5, r0
 8006c44:	4630      	mov	r0, r6
 8006c46:	f000 f895 	bl	8006d74 <_malloc_r>
 8006c4a:	b948      	cbnz	r0, 8006c60 <__smakebuf_r+0x44>
 8006c4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c50:	059a      	lsls	r2, r3, #22
 8006c52:	d4ef      	bmi.n	8006c34 <__smakebuf_r+0x18>
 8006c54:	f023 0303 	bic.w	r3, r3, #3
 8006c58:	f043 0302 	orr.w	r3, r3, #2
 8006c5c:	81a3      	strh	r3, [r4, #12]
 8006c5e:	e7e3      	b.n	8006c28 <__smakebuf_r+0xc>
 8006c60:	4b0d      	ldr	r3, [pc, #52]	; (8006c98 <__smakebuf_r+0x7c>)
 8006c62:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c64:	89a3      	ldrh	r3, [r4, #12]
 8006c66:	6020      	str	r0, [r4, #0]
 8006c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c6c:	81a3      	strh	r3, [r4, #12]
 8006c6e:	9b00      	ldr	r3, [sp, #0]
 8006c70:	6163      	str	r3, [r4, #20]
 8006c72:	9b01      	ldr	r3, [sp, #4]
 8006c74:	6120      	str	r0, [r4, #16]
 8006c76:	b15b      	cbz	r3, 8006c90 <__smakebuf_r+0x74>
 8006c78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c7c:	4630      	mov	r0, r6
 8006c7e:	f000 f963 	bl	8006f48 <_isatty_r>
 8006c82:	b128      	cbz	r0, 8006c90 <__smakebuf_r+0x74>
 8006c84:	89a3      	ldrh	r3, [r4, #12]
 8006c86:	f023 0303 	bic.w	r3, r3, #3
 8006c8a:	f043 0301 	orr.w	r3, r3, #1
 8006c8e:	81a3      	strh	r3, [r4, #12]
 8006c90:	89a0      	ldrh	r0, [r4, #12]
 8006c92:	4305      	orrs	r5, r0
 8006c94:	81a5      	strh	r5, [r4, #12]
 8006c96:	e7cd      	b.n	8006c34 <__smakebuf_r+0x18>
 8006c98:	08006a29 	.word	0x08006a29

08006c9c <_free_r>:
 8006c9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c9e:	2900      	cmp	r1, #0
 8006ca0:	d044      	beq.n	8006d2c <_free_r+0x90>
 8006ca2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ca6:	9001      	str	r0, [sp, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f1a1 0404 	sub.w	r4, r1, #4
 8006cae:	bfb8      	it	lt
 8006cb0:	18e4      	addlt	r4, r4, r3
 8006cb2:	f000 f96b 	bl	8006f8c <__malloc_lock>
 8006cb6:	4a1e      	ldr	r2, [pc, #120]	; (8006d30 <_free_r+0x94>)
 8006cb8:	9801      	ldr	r0, [sp, #4]
 8006cba:	6813      	ldr	r3, [r2, #0]
 8006cbc:	b933      	cbnz	r3, 8006ccc <_free_r+0x30>
 8006cbe:	6063      	str	r3, [r4, #4]
 8006cc0:	6014      	str	r4, [r2, #0]
 8006cc2:	b003      	add	sp, #12
 8006cc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cc8:	f000 b966 	b.w	8006f98 <__malloc_unlock>
 8006ccc:	42a3      	cmp	r3, r4
 8006cce:	d908      	bls.n	8006ce2 <_free_r+0x46>
 8006cd0:	6825      	ldr	r5, [r4, #0]
 8006cd2:	1961      	adds	r1, r4, r5
 8006cd4:	428b      	cmp	r3, r1
 8006cd6:	bf01      	itttt	eq
 8006cd8:	6819      	ldreq	r1, [r3, #0]
 8006cda:	685b      	ldreq	r3, [r3, #4]
 8006cdc:	1949      	addeq	r1, r1, r5
 8006cde:	6021      	streq	r1, [r4, #0]
 8006ce0:	e7ed      	b.n	8006cbe <_free_r+0x22>
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	b10b      	cbz	r3, 8006cec <_free_r+0x50>
 8006ce8:	42a3      	cmp	r3, r4
 8006cea:	d9fa      	bls.n	8006ce2 <_free_r+0x46>
 8006cec:	6811      	ldr	r1, [r2, #0]
 8006cee:	1855      	adds	r5, r2, r1
 8006cf0:	42a5      	cmp	r5, r4
 8006cf2:	d10b      	bne.n	8006d0c <_free_r+0x70>
 8006cf4:	6824      	ldr	r4, [r4, #0]
 8006cf6:	4421      	add	r1, r4
 8006cf8:	1854      	adds	r4, r2, r1
 8006cfa:	42a3      	cmp	r3, r4
 8006cfc:	6011      	str	r1, [r2, #0]
 8006cfe:	d1e0      	bne.n	8006cc2 <_free_r+0x26>
 8006d00:	681c      	ldr	r4, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	6053      	str	r3, [r2, #4]
 8006d06:	4421      	add	r1, r4
 8006d08:	6011      	str	r1, [r2, #0]
 8006d0a:	e7da      	b.n	8006cc2 <_free_r+0x26>
 8006d0c:	d902      	bls.n	8006d14 <_free_r+0x78>
 8006d0e:	230c      	movs	r3, #12
 8006d10:	6003      	str	r3, [r0, #0]
 8006d12:	e7d6      	b.n	8006cc2 <_free_r+0x26>
 8006d14:	6825      	ldr	r5, [r4, #0]
 8006d16:	1961      	adds	r1, r4, r5
 8006d18:	428b      	cmp	r3, r1
 8006d1a:	bf04      	itt	eq
 8006d1c:	6819      	ldreq	r1, [r3, #0]
 8006d1e:	685b      	ldreq	r3, [r3, #4]
 8006d20:	6063      	str	r3, [r4, #4]
 8006d22:	bf04      	itt	eq
 8006d24:	1949      	addeq	r1, r1, r5
 8006d26:	6021      	streq	r1, [r4, #0]
 8006d28:	6054      	str	r4, [r2, #4]
 8006d2a:	e7ca      	b.n	8006cc2 <_free_r+0x26>
 8006d2c:	b003      	add	sp, #12
 8006d2e:	bd30      	pop	{r4, r5, pc}
 8006d30:	20014504 	.word	0x20014504

08006d34 <sbrk_aligned>:
 8006d34:	b570      	push	{r4, r5, r6, lr}
 8006d36:	4e0e      	ldr	r6, [pc, #56]	; (8006d70 <sbrk_aligned+0x3c>)
 8006d38:	460c      	mov	r4, r1
 8006d3a:	6831      	ldr	r1, [r6, #0]
 8006d3c:	4605      	mov	r5, r0
 8006d3e:	b911      	cbnz	r1, 8006d46 <sbrk_aligned+0x12>
 8006d40:	f000 f88c 	bl	8006e5c <_sbrk_r>
 8006d44:	6030      	str	r0, [r6, #0]
 8006d46:	4621      	mov	r1, r4
 8006d48:	4628      	mov	r0, r5
 8006d4a:	f000 f887 	bl	8006e5c <_sbrk_r>
 8006d4e:	1c43      	adds	r3, r0, #1
 8006d50:	d00a      	beq.n	8006d68 <sbrk_aligned+0x34>
 8006d52:	1cc4      	adds	r4, r0, #3
 8006d54:	f024 0403 	bic.w	r4, r4, #3
 8006d58:	42a0      	cmp	r0, r4
 8006d5a:	d007      	beq.n	8006d6c <sbrk_aligned+0x38>
 8006d5c:	1a21      	subs	r1, r4, r0
 8006d5e:	4628      	mov	r0, r5
 8006d60:	f000 f87c 	bl	8006e5c <_sbrk_r>
 8006d64:	3001      	adds	r0, #1
 8006d66:	d101      	bne.n	8006d6c <sbrk_aligned+0x38>
 8006d68:	f04f 34ff 	mov.w	r4, #4294967295
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	bd70      	pop	{r4, r5, r6, pc}
 8006d70:	20014508 	.word	0x20014508

08006d74 <_malloc_r>:
 8006d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d78:	1ccd      	adds	r5, r1, #3
 8006d7a:	f025 0503 	bic.w	r5, r5, #3
 8006d7e:	3508      	adds	r5, #8
 8006d80:	2d0c      	cmp	r5, #12
 8006d82:	bf38      	it	cc
 8006d84:	250c      	movcc	r5, #12
 8006d86:	2d00      	cmp	r5, #0
 8006d88:	4607      	mov	r7, r0
 8006d8a:	db01      	blt.n	8006d90 <_malloc_r+0x1c>
 8006d8c:	42a9      	cmp	r1, r5
 8006d8e:	d905      	bls.n	8006d9c <_malloc_r+0x28>
 8006d90:	230c      	movs	r3, #12
 8006d92:	603b      	str	r3, [r7, #0]
 8006d94:	2600      	movs	r6, #0
 8006d96:	4630      	mov	r0, r6
 8006d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d9c:	4e2e      	ldr	r6, [pc, #184]	; (8006e58 <_malloc_r+0xe4>)
 8006d9e:	f000 f8f5 	bl	8006f8c <__malloc_lock>
 8006da2:	6833      	ldr	r3, [r6, #0]
 8006da4:	461c      	mov	r4, r3
 8006da6:	bb34      	cbnz	r4, 8006df6 <_malloc_r+0x82>
 8006da8:	4629      	mov	r1, r5
 8006daa:	4638      	mov	r0, r7
 8006dac:	f7ff ffc2 	bl	8006d34 <sbrk_aligned>
 8006db0:	1c43      	adds	r3, r0, #1
 8006db2:	4604      	mov	r4, r0
 8006db4:	d14d      	bne.n	8006e52 <_malloc_r+0xde>
 8006db6:	6834      	ldr	r4, [r6, #0]
 8006db8:	4626      	mov	r6, r4
 8006dba:	2e00      	cmp	r6, #0
 8006dbc:	d140      	bne.n	8006e40 <_malloc_r+0xcc>
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	4631      	mov	r1, r6
 8006dc2:	4638      	mov	r0, r7
 8006dc4:	eb04 0803 	add.w	r8, r4, r3
 8006dc8:	f000 f848 	bl	8006e5c <_sbrk_r>
 8006dcc:	4580      	cmp	r8, r0
 8006dce:	d13a      	bne.n	8006e46 <_malloc_r+0xd2>
 8006dd0:	6821      	ldr	r1, [r4, #0]
 8006dd2:	3503      	adds	r5, #3
 8006dd4:	1a6d      	subs	r5, r5, r1
 8006dd6:	f025 0503 	bic.w	r5, r5, #3
 8006dda:	3508      	adds	r5, #8
 8006ddc:	2d0c      	cmp	r5, #12
 8006dde:	bf38      	it	cc
 8006de0:	250c      	movcc	r5, #12
 8006de2:	4629      	mov	r1, r5
 8006de4:	4638      	mov	r0, r7
 8006de6:	f7ff ffa5 	bl	8006d34 <sbrk_aligned>
 8006dea:	3001      	adds	r0, #1
 8006dec:	d02b      	beq.n	8006e46 <_malloc_r+0xd2>
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	442b      	add	r3, r5
 8006df2:	6023      	str	r3, [r4, #0]
 8006df4:	e00e      	b.n	8006e14 <_malloc_r+0xa0>
 8006df6:	6822      	ldr	r2, [r4, #0]
 8006df8:	1b52      	subs	r2, r2, r5
 8006dfa:	d41e      	bmi.n	8006e3a <_malloc_r+0xc6>
 8006dfc:	2a0b      	cmp	r2, #11
 8006dfe:	d916      	bls.n	8006e2e <_malloc_r+0xba>
 8006e00:	1961      	adds	r1, r4, r5
 8006e02:	42a3      	cmp	r3, r4
 8006e04:	6025      	str	r5, [r4, #0]
 8006e06:	bf18      	it	ne
 8006e08:	6059      	strne	r1, [r3, #4]
 8006e0a:	6863      	ldr	r3, [r4, #4]
 8006e0c:	bf08      	it	eq
 8006e0e:	6031      	streq	r1, [r6, #0]
 8006e10:	5162      	str	r2, [r4, r5]
 8006e12:	604b      	str	r3, [r1, #4]
 8006e14:	4638      	mov	r0, r7
 8006e16:	f104 060b 	add.w	r6, r4, #11
 8006e1a:	f000 f8bd 	bl	8006f98 <__malloc_unlock>
 8006e1e:	f026 0607 	bic.w	r6, r6, #7
 8006e22:	1d23      	adds	r3, r4, #4
 8006e24:	1af2      	subs	r2, r6, r3
 8006e26:	d0b6      	beq.n	8006d96 <_malloc_r+0x22>
 8006e28:	1b9b      	subs	r3, r3, r6
 8006e2a:	50a3      	str	r3, [r4, r2]
 8006e2c:	e7b3      	b.n	8006d96 <_malloc_r+0x22>
 8006e2e:	6862      	ldr	r2, [r4, #4]
 8006e30:	42a3      	cmp	r3, r4
 8006e32:	bf0c      	ite	eq
 8006e34:	6032      	streq	r2, [r6, #0]
 8006e36:	605a      	strne	r2, [r3, #4]
 8006e38:	e7ec      	b.n	8006e14 <_malloc_r+0xa0>
 8006e3a:	4623      	mov	r3, r4
 8006e3c:	6864      	ldr	r4, [r4, #4]
 8006e3e:	e7b2      	b.n	8006da6 <_malloc_r+0x32>
 8006e40:	4634      	mov	r4, r6
 8006e42:	6876      	ldr	r6, [r6, #4]
 8006e44:	e7b9      	b.n	8006dba <_malloc_r+0x46>
 8006e46:	230c      	movs	r3, #12
 8006e48:	603b      	str	r3, [r7, #0]
 8006e4a:	4638      	mov	r0, r7
 8006e4c:	f000 f8a4 	bl	8006f98 <__malloc_unlock>
 8006e50:	e7a1      	b.n	8006d96 <_malloc_r+0x22>
 8006e52:	6025      	str	r5, [r4, #0]
 8006e54:	e7de      	b.n	8006e14 <_malloc_r+0xa0>
 8006e56:	bf00      	nop
 8006e58:	20014504 	.word	0x20014504

08006e5c <_sbrk_r>:
 8006e5c:	b538      	push	{r3, r4, r5, lr}
 8006e5e:	4d06      	ldr	r5, [pc, #24]	; (8006e78 <_sbrk_r+0x1c>)
 8006e60:	2300      	movs	r3, #0
 8006e62:	4604      	mov	r4, r0
 8006e64:	4608      	mov	r0, r1
 8006e66:	602b      	str	r3, [r5, #0]
 8006e68:	f000 f8ae 	bl	8006fc8 <_sbrk>
 8006e6c:	1c43      	adds	r3, r0, #1
 8006e6e:	d102      	bne.n	8006e76 <_sbrk_r+0x1a>
 8006e70:	682b      	ldr	r3, [r5, #0]
 8006e72:	b103      	cbz	r3, 8006e76 <_sbrk_r+0x1a>
 8006e74:	6023      	str	r3, [r4, #0]
 8006e76:	bd38      	pop	{r3, r4, r5, pc}
 8006e78:	2001450c 	.word	0x2001450c

08006e7c <__sread>:
 8006e7c:	b510      	push	{r4, lr}
 8006e7e:	460c      	mov	r4, r1
 8006e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e84:	f000 f88e 	bl	8006fa4 <_read_r>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	bfab      	itete	ge
 8006e8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8006e90:	181b      	addge	r3, r3, r0
 8006e92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e96:	bfac      	ite	ge
 8006e98:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e9a:	81a3      	strhlt	r3, [r4, #12]
 8006e9c:	bd10      	pop	{r4, pc}

08006e9e <__swrite>:
 8006e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea2:	461f      	mov	r7, r3
 8006ea4:	898b      	ldrh	r3, [r1, #12]
 8006ea6:	05db      	lsls	r3, r3, #23
 8006ea8:	4605      	mov	r5, r0
 8006eaa:	460c      	mov	r4, r1
 8006eac:	4616      	mov	r6, r2
 8006eae:	d505      	bpl.n	8006ebc <__swrite+0x1e>
 8006eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f000 f856 	bl	8006f68 <_lseek_r>
 8006ebc:	89a3      	ldrh	r3, [r4, #12]
 8006ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ec2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ec6:	81a3      	strh	r3, [r4, #12]
 8006ec8:	4632      	mov	r2, r6
 8006eca:	463b      	mov	r3, r7
 8006ecc:	4628      	mov	r0, r5
 8006ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed2:	f7ff bb31 	b.w	8006538 <_write_r>

08006ed6 <__sseek>:
 8006ed6:	b510      	push	{r4, lr}
 8006ed8:	460c      	mov	r4, r1
 8006eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ede:	f000 f843 	bl	8006f68 <_lseek_r>
 8006ee2:	1c43      	adds	r3, r0, #1
 8006ee4:	89a3      	ldrh	r3, [r4, #12]
 8006ee6:	bf15      	itete	ne
 8006ee8:	6560      	strne	r0, [r4, #84]	; 0x54
 8006eea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006eee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ef2:	81a3      	strheq	r3, [r4, #12]
 8006ef4:	bf18      	it	ne
 8006ef6:	81a3      	strhne	r3, [r4, #12]
 8006ef8:	bd10      	pop	{r4, pc}

08006efa <__sclose>:
 8006efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006efe:	f000 b801 	b.w	8006f04 <_close_r>
	...

08006f04 <_close_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	4d06      	ldr	r5, [pc, #24]	; (8006f20 <_close_r+0x1c>)
 8006f08:	2300      	movs	r3, #0
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	4608      	mov	r0, r1
 8006f0e:	602b      	str	r3, [r5, #0]
 8006f10:	f7f9 fe51 	bl	8000bb6 <_close>
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	d102      	bne.n	8006f1e <_close_r+0x1a>
 8006f18:	682b      	ldr	r3, [r5, #0]
 8006f1a:	b103      	cbz	r3, 8006f1e <_close_r+0x1a>
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	bd38      	pop	{r3, r4, r5, pc}
 8006f20:	2001450c 	.word	0x2001450c

08006f24 <_fstat_r>:
 8006f24:	b538      	push	{r3, r4, r5, lr}
 8006f26:	4d07      	ldr	r5, [pc, #28]	; (8006f44 <_fstat_r+0x20>)
 8006f28:	2300      	movs	r3, #0
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	4608      	mov	r0, r1
 8006f2e:	4611      	mov	r1, r2
 8006f30:	602b      	str	r3, [r5, #0]
 8006f32:	f7f9 fe4c 	bl	8000bce <_fstat>
 8006f36:	1c43      	adds	r3, r0, #1
 8006f38:	d102      	bne.n	8006f40 <_fstat_r+0x1c>
 8006f3a:	682b      	ldr	r3, [r5, #0]
 8006f3c:	b103      	cbz	r3, 8006f40 <_fstat_r+0x1c>
 8006f3e:	6023      	str	r3, [r4, #0]
 8006f40:	bd38      	pop	{r3, r4, r5, pc}
 8006f42:	bf00      	nop
 8006f44:	2001450c 	.word	0x2001450c

08006f48 <_isatty_r>:
 8006f48:	b538      	push	{r3, r4, r5, lr}
 8006f4a:	4d06      	ldr	r5, [pc, #24]	; (8006f64 <_isatty_r+0x1c>)
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	4604      	mov	r4, r0
 8006f50:	4608      	mov	r0, r1
 8006f52:	602b      	str	r3, [r5, #0]
 8006f54:	f7f9 fe4b 	bl	8000bee <_isatty>
 8006f58:	1c43      	adds	r3, r0, #1
 8006f5a:	d102      	bne.n	8006f62 <_isatty_r+0x1a>
 8006f5c:	682b      	ldr	r3, [r5, #0]
 8006f5e:	b103      	cbz	r3, 8006f62 <_isatty_r+0x1a>
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	bd38      	pop	{r3, r4, r5, pc}
 8006f64:	2001450c 	.word	0x2001450c

08006f68 <_lseek_r>:
 8006f68:	b538      	push	{r3, r4, r5, lr}
 8006f6a:	4d07      	ldr	r5, [pc, #28]	; (8006f88 <_lseek_r+0x20>)
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	4608      	mov	r0, r1
 8006f70:	4611      	mov	r1, r2
 8006f72:	2200      	movs	r2, #0
 8006f74:	602a      	str	r2, [r5, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	f7f9 fe44 	bl	8000c04 <_lseek>
 8006f7c:	1c43      	adds	r3, r0, #1
 8006f7e:	d102      	bne.n	8006f86 <_lseek_r+0x1e>
 8006f80:	682b      	ldr	r3, [r5, #0]
 8006f82:	b103      	cbz	r3, 8006f86 <_lseek_r+0x1e>
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	bd38      	pop	{r3, r4, r5, pc}
 8006f88:	2001450c 	.word	0x2001450c

08006f8c <__malloc_lock>:
 8006f8c:	4801      	ldr	r0, [pc, #4]	; (8006f94 <__malloc_lock+0x8>)
 8006f8e:	f7ff be1d 	b.w	8006bcc <__retarget_lock_acquire_recursive>
 8006f92:	bf00      	nop
 8006f94:	200144ff 	.word	0x200144ff

08006f98 <__malloc_unlock>:
 8006f98:	4801      	ldr	r0, [pc, #4]	; (8006fa0 <__malloc_unlock+0x8>)
 8006f9a:	f7ff be18 	b.w	8006bce <__retarget_lock_release_recursive>
 8006f9e:	bf00      	nop
 8006fa0:	200144ff 	.word	0x200144ff

08006fa4 <_read_r>:
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	4d07      	ldr	r5, [pc, #28]	; (8006fc4 <_read_r+0x20>)
 8006fa8:	4604      	mov	r4, r0
 8006faa:	4608      	mov	r0, r1
 8006fac:	4611      	mov	r1, r2
 8006fae:	2200      	movs	r2, #0
 8006fb0:	602a      	str	r2, [r5, #0]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f7f9 fde2 	bl	8000b7c <_read>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	d102      	bne.n	8006fc2 <_read_r+0x1e>
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	b103      	cbz	r3, 8006fc2 <_read_r+0x1e>
 8006fc0:	6023      	str	r3, [r4, #0]
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}
 8006fc4:	2001450c 	.word	0x2001450c

08006fc8 <_sbrk>:
 8006fc8:	4a04      	ldr	r2, [pc, #16]	; (8006fdc <_sbrk+0x14>)
 8006fca:	6811      	ldr	r1, [r2, #0]
 8006fcc:	4603      	mov	r3, r0
 8006fce:	b909      	cbnz	r1, 8006fd4 <_sbrk+0xc>
 8006fd0:	4903      	ldr	r1, [pc, #12]	; (8006fe0 <_sbrk+0x18>)
 8006fd2:	6011      	str	r1, [r2, #0]
 8006fd4:	6810      	ldr	r0, [r2, #0]
 8006fd6:	4403      	add	r3, r0
 8006fd8:	6013      	str	r3, [r2, #0]
 8006fda:	4770      	bx	lr
 8006fdc:	20014510 	.word	0x20014510
 8006fe0:	20014518 	.word	0x20014518

08006fe4 <_init>:
 8006fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe6:	bf00      	nop
 8006fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fea:	bc08      	pop	{r3}
 8006fec:	469e      	mov	lr, r3
 8006fee:	4770      	bx	lr

08006ff0 <_fini>:
 8006ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff2:	bf00      	nop
 8006ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ff6:	bc08      	pop	{r3}
 8006ff8:	469e      	mov	lr, r3
 8006ffa:	4770      	bx	lr
